
ECE3411LabPractice2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae9  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a6  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cb  00000000  00000000  000017a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ef  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e0  00000000  00000000  00002097  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002277  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 77 00 	call	0xee	; 0xee <main>
  c4:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <delay_by>:
#define REG_SIZE 8


void delay_by(int freq)
{
	for(int i = 0; i < freq; i++)
  cc:	18 16       	cp	r1, r24
  ce:	19 06       	cpc	r1, r25
  d0:	6c f4       	brge	.+26     	; 0xec <delay_by+0x20>
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	ef e9       	ldi	r30, 0x9F	; 159
  d8:	ff e0       	ldi	r31, 0x0F	; 15
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <delay_by+0xe>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <delay_by+0x14>
  e0:	00 00       	nop
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	3f 4f       	sbci	r19, 0xFF	; 255
  e6:	82 17       	cp	r24, r18
  e8:	93 07       	cpc	r25, r19
  ea:	a9 f7       	brne	.-22     	; 0xd6 <delay_by+0xa>
  ec:	08 95       	ret

000000ee <main>:
	unsigned char current_led = DDD2;
	int freq = 3;
	int increasing = 1;
	int sw1_pressed = 0;
	int sw2_pressed = 0;
	DDRD = 0b11111111; //Set PORTD to output
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1<<DDB7); //Set PORTB 7 to input (SW1) (HW Debounced)
  f2:	27 98       	cbi	0x04, 7	; 4
	DDRB &= ~(1<<DDB1); //Set PORTB 1 to input (SW2) (NEED TO DEBOUNCE)
  f4:	21 98       	cbi	0x04, 1	; 4
{
	unsigned char current_led = DDD2;
	int freq = 3;
	int increasing = 1;
	int sw1_pressed = 0;
	int sw2_pressed = 0;
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
int main(void)
{
	unsigned char current_led = DDD2;
	int freq = 3;
	int increasing = 1;
	int sw1_pressed = 0;
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
}
int main(void)
{
	unsigned char current_led = DDD2;
	int freq = 3;
	int increasing = 1;
  fe:	cc 24       	eor	r12, r12
 100:	c3 94       	inc	r12
 102:	d1 2c       	mov	r13, r1
	}
}
int main(void)
{
	unsigned char current_led = DDD2;
	int freq = 3;
 104:	03 e0       	ldi	r16, 0x03	; 3
 106:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(1);
	}
}
int main(void)
{
	unsigned char current_led = DDD2;
 108:	68 94       	set
 10a:	55 24       	eor	r5, r5
 10c:	51 f8       	bld	r5, 1
				{
					freq++;
				}
				sw1_pressed=0;
			}
			PORTD |= (1<<current_led); //set current_led high
 10e:	c1 e0       	ldi	r28, 0x01	; 1
 110:	d0 e0       	ldi	r29, 0x00	; 0
			delay_by((int)(500/freq));
 112:	0f 2e       	mov	r0, r31
 114:	f4 ef       	ldi	r31, 0xF4	; 244
 116:	ef 2e       	mov	r14, r31
 118:	ff 24       	eor	r15, r15
 11a:	f3 94       	inc	r15
 11c:	f0 2d       	mov	r31, r0
			//_delay_ms(500); //Delay half a period
			PORTD &= ~(1<<current_led); //set current_led low
			delay_by((int)(500/freq));
 11e:	61 2c       	mov	r6, r1
 120:	71 2c       	mov	r7, r1
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x38>
		{
			if(!(PINB & (1<<PINB1))) // SW2
			{
				sw2_pressed = 1;
			}
			sw1_pressed = 1;
 124:	ce 01       	movw	r24, r28
 126:	ef e3       	ldi	r30, 0x3F	; 63
 128:	fc e9       	ldi	r31, 0x9C	; 156
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x3c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x42>
 130:	00 00       	nop
	
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(10);
		if(!(PINB & (1<<PINB7)))//SW1 pressed low
 132:	1f 99       	sbic	0x03, 7	; 3
 134:	05 c0       	rjmp	.+10     	; 0x140 <main+0x52>
		{
			if(!(PINB & (1<<PINB1))) // SW2
 136:	19 99       	sbic	0x03, 1	; 3
 138:	f5 cf       	rjmp	.-22     	; 0x124 <main+0x36>
			{
				sw2_pressed = 1;
 13a:	9e 01       	movw	r18, r28
			}
			sw1_pressed = 1;
 13c:	ce 01       	movw	r24, r28
 13e:	f3 cf       	rjmp	.-26     	; 0x126 <main+0x38>
		}
		else if(!(PINB & (1<<PINB1))) //SW2 pressed low
 140:	19 99       	sbic	0x03, 1	; 3
 142:	03 c0       	rjmp	.+6      	; 0x14a <main+0x5c>
		{
			if(!PINB & (1<<PINB7))
 144:	23 b1       	in	r18, 0x03	; 3
			{
				sw1_pressed = 1;
			}
			sw2_pressed = 1;
 146:	9e 01       	movw	r18, r28
 148:	ee cf       	rjmp	.-36     	; 0x126 <main+0x38>
		} 
		else
		{
			if (sw2_pressed && sw1_pressed)
 14a:	23 2b       	or	r18, r19
 14c:	a1 f0       	breq	.+40     	; 0x176 <main+0x88>
 14e:	89 2b       	or	r24, r25
 150:	61 f0       	breq	.+24     	; 0x16a <main+0x7c>
			{
					if(current_led + 1 == REG_SIZE)
 152:	f7 e0       	ldi	r31, 0x07	; 7
 154:	5f 16       	cp	r5, r31
 156:	b9 f0       	breq	.+46     	; 0x186 <main+0x98>
					{
						increasing = 0;
						current_led--;
					}
					else if (current_led == DDD0)
 158:	55 20       	and	r5, r5
 15a:	e1 f0       	breq	.+56     	; 0x194 <main+0xa6>
						increasing = 1;
						current_led++;
					}
					else
					{
						if (increasing)
 15c:	c1 14       	cp	r12, r1
 15e:	d1 04       	cpc	r13, r1
 160:	11 f0       	breq	.+4      	; 0x166 <main+0x78>
						{
							current_led++;
 162:	53 94       	inc	r5
 164:	1a c0       	rjmp	.+52     	; 0x19a <main+0xac>
						}
						else
						{
							current_led--;
 166:	5a 94       	dec	r5
 168:	18 c0       	rjmp	.+48     	; 0x19a <main+0xac>
					sw1_pressed = 0;
					sw2_pressed = 0;
			} 
			else if (sw2_pressed)
			{
					if (freq > 3)
 16a:	04 30       	cpi	r16, 0x04	; 4
 16c:	11 05       	cpc	r17, r1
 16e:	ac f0       	brlt	.+42     	; 0x19a <main+0xac>
					{
						freq--;
 170:	01 50       	subi	r16, 0x01	; 1
 172:	11 09       	sbc	r17, r1
 174:	12 c0       	rjmp	.+36     	; 0x19a <main+0xac>
					}
					sw2_pressed = 0;
			}
			else if (sw1_pressed)
 176:	89 2b       	or	r24, r25
 178:	81 f0       	breq	.+32     	; 0x19a <main+0xac>
			{
				if(freq < 10)
 17a:	0a 30       	cpi	r16, 0x0A	; 10
 17c:	11 05       	cpc	r17, r1
 17e:	6c f4       	brge	.+26     	; 0x19a <main+0xac>
				{
					freq++;
 180:	0f 5f       	subi	r16, 0xFF	; 255
 182:	1f 4f       	sbci	r17, 0xFF	; 255
 184:	0a c0       	rjmp	.+20     	; 0x19a <main+0xac>
		{
			if (sw2_pressed && sw1_pressed)
			{
					if(current_led + 1 == REG_SIZE)
					{
						increasing = 0;
 186:	c6 2c       	mov	r12, r6
 188:	d7 2c       	mov	r13, r7
						current_led--;
 18a:	0f 2e       	mov	r0, r31
 18c:	f6 e0       	ldi	r31, 0x06	; 6
 18e:	5f 2e       	mov	r5, r31
 190:	f0 2d       	mov	r31, r0
 192:	03 c0       	rjmp	.+6      	; 0x19a <main+0xac>
					}
					else if (current_led == DDD0)
					{
						increasing = 1;
 194:	6e 01       	movw	r12, r28
						current_led++;
 196:	55 24       	eor	r5, r5
 198:	53 94       	inc	r5
				{
					freq++;
				}
				sw1_pressed=0;
			}
			PORTD |= (1<<current_led); //set current_led high
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	5e 01       	movw	r10, r28
 19e:	05 2c       	mov	r0, r5
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <main+0xb8>
 1a2:	aa 0c       	add	r10, r10
 1a4:	bb 1c       	adc	r11, r11
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <main+0xb4>
 1aa:	8a 29       	or	r24, r10
 1ac:	8b b9       	out	0x0b, r24	; 11
			delay_by((int)(500/freq));
 1ae:	c7 01       	movw	r24, r14
 1b0:	b8 01       	movw	r22, r16
 1b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__divmodhi4>
 1b6:	4b 01       	movw	r8, r22
 1b8:	cb 01       	movw	r24, r22
 1ba:	0e 94 66 00 	call	0xcc	; 0xcc <delay_by>
			//_delay_ms(500); //Delay half a period
			PORTD &= ~(1<<current_led); //set current_led low
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	a0 94       	com	r10
 1c2:	a8 22       	and	r10, r24
 1c4:	ab b8       	out	0x0b, r10	; 11
			delay_by((int)(500/freq));
 1c6:	c4 01       	movw	r24, r8
 1c8:	0e 94 66 00 	call	0xcc	; 0xcc <delay_by>
 1cc:	26 2d       	mov	r18, r6
 1ce:	37 2d       	mov	r19, r7
 1d0:	86 2d       	mov	r24, r6
 1d2:	97 2d       	mov	r25, r7
 1d4:	a8 cf       	rjmp	.-176    	; 0x126 <main+0x38>

000001d6 <__divmodhi4>:
 1d6:	97 fb       	bst	r25, 7
 1d8:	07 2e       	mov	r0, r23
 1da:	16 f4       	brtc	.+4      	; 0x1e0 <__divmodhi4+0xa>
 1dc:	00 94       	com	r0
 1de:	07 d0       	rcall	.+14     	; 0x1ee <__divmodhi4_neg1>
 1e0:	77 fd       	sbrc	r23, 7
 1e2:	09 d0       	rcall	.+18     	; 0x1f6 <__divmodhi4_neg2>
 1e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__udivmodhi4>
 1e8:	07 fc       	sbrc	r0, 7
 1ea:	05 d0       	rcall	.+10     	; 0x1f6 <__divmodhi4_neg2>
 1ec:	3e f4       	brtc	.+14     	; 0x1fc <__divmodhi4_exit>

000001ee <__divmodhi4_neg1>:
 1ee:	90 95       	com	r25
 1f0:	81 95       	neg	r24
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	08 95       	ret

000001f6 <__divmodhi4_neg2>:
 1f6:	70 95       	com	r23
 1f8:	61 95       	neg	r22
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255

000001fc <__divmodhi4_exit>:
 1fc:	08 95       	ret

000001fe <__udivmodhi4>:
 1fe:	aa 1b       	sub	r26, r26
 200:	bb 1b       	sub	r27, r27
 202:	51 e1       	ldi	r21, 0x11	; 17
 204:	07 c0       	rjmp	.+14     	; 0x214 <__udivmodhi4_ep>

00000206 <__udivmodhi4_loop>:
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	a6 17       	cp	r26, r22
 20c:	b7 07       	cpc	r27, r23
 20e:	10 f0       	brcs	.+4      	; 0x214 <__udivmodhi4_ep>
 210:	a6 1b       	sub	r26, r22
 212:	b7 0b       	sbc	r27, r23

00000214 <__udivmodhi4_ep>:
 214:	88 1f       	adc	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	5a 95       	dec	r21
 21a:	a9 f7       	brne	.-22     	; 0x206 <__udivmodhi4_loop>
 21c:	80 95       	com	r24
 21e:	90 95       	com	r25
 220:	bc 01       	movw	r22, r24
 222:	cd 01       	movw	r24, r26
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
