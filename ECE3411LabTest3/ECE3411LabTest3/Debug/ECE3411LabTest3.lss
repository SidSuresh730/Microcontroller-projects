
ECE3411LabTest3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000085e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  0000085e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5a  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095a  00000000  00000000  000014a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044f  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053b  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000312  00000000  00000000  00002953  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002c65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_3>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_11>
  30:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_12>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_14>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_21>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	ad 30       	cpi	r26, 0x0D	; 13
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 19 02 	call	0x432	; 0x432 <main>
  d4:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setupADC>:
volatile int count_adc_flag = 0;

//Initialize ADC
void setupADC(void)
{
	ADMUX |= (1<<MUX2) | (1<<MUX1); // ADC6
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	86 60       	ori	r24, 0x06	; 6
  e4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | // ADC enable, interrupt enable
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8e 68       	ori	r24, 0x8E	; 142
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <startConversion>:
}

//function for starting a conversion
void startConversion(void)
{
	ADCSRA |= (1<<ADSC);
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <InitTimer0>:


void InitTimer0(void)
{
	//1ms clock
	TCCR0A |= (1<<WGM01); // Clear on Compare A
  fe:	84 b5       	in	r24, 0x24	; 36
 100:	82 60       	ori	r24, 0x02	; 2
 102:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249; // Set number of ticks for Compare A
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);  // Enable Timer 0 Compare A ISR
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = 3; // Set Prescaler 64 & Timer 0 starts
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	85 bd       	out	0x25, r24	; 37
 112:	08 95       	ret

00000114 <InitTimer1>:
{
	//WGM = Fast PWM w/ TOP at OCR1A = 1111
	//COM1B = 10, Clear OC1B on compare match, set on BOTTOM
	
	//1.5 kHz clock
	TCCR1A |= (1<<WGM10) | (1<<WGM11);
 114:	e0 e8       	ldi	r30, 0x80	; 128
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	83 60       	ori	r24, 0x03	; 3
 11c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13);
 11e:	e1 e8       	ldi	r30, 0x81	; 129
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 61       	ori	r24, 0x18	; 24
 126:	80 83       	st	Z, r24
	OCR1A = 1332; // ~1.5kHz // PICK SUCH THAT OCR1A > 1024
 128:	84 e3       	ldi	r24, 0x34	; 52
 12a:	95 e0       	ldi	r25, 0x05	; 5
 12c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 130:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = 0;
 134:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 138:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	TIMSK1 |= (1<<OCIE1B) | (1<<OCIE1A); //Enable output compare B, A, match interrupt
 13c:	af e6       	ldi	r26, 0x6F	; 111
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	8c 91       	ld	r24, X
 142:	86 60       	ori	r24, 0x06	; 6
 144:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS11); // prescaler = 8
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <InitSW1>:
}

void InitSW1(void)
{
	PCMSK0 |= (1<<PCINT7); //PCINT7 is SW1 (PB7)
 14e:	eb e6       	ldi	r30, 0x6B	; 107
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 68       	ori	r24, 0x80	; 128
 156:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0); //PCINT7 is in PCIE0
 158:	e8 e6       	ldi	r30, 0x68	; 104
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <bar_display>:
}

//calculate how to display voltage level on port d LEDs
void bar_display(void)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
	int i;
	led_selection = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <led_selection+0x1>
 170:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <led_selection>
	for(i = 0; i<(int)(9*dutyCycle); i++) //multiply by 9 to get 8 from truncation
 174:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <dutyCycle>
 178:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <dutyCycle+0x1>
 17c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <dutyCycle+0x2>
 180:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <dutyCycle+0x3>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e1       	ldi	r20, 0x10	; 16
 18a:	51 e4       	ldi	r21, 0x41	; 65
 18c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__mulsf3>
 190:	0e 94 99 02 	call	0x532	; 0x532 <__fixsfsi>
 194:	16 16       	cp	r1, r22
 196:	17 06       	cpc	r1, r23
 198:	04 f5       	brge	.+64     	; 0x1da <bar_display+0x76>
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
		led_selection*=2;
 19e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led_selection>
 1a2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <led_selection+0x1>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <led_selection+0x1>
 1ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <led_selection>
//calculate how to display voltage level on port d LEDs
void bar_display(void)
{
	int i;
	led_selection = 1;
	for(i = 0; i<(int)(9*dutyCycle); i++) //multiply by 9 to get 8 from truncation
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <dutyCycle>
 1b8:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <dutyCycle+0x1>
 1bc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <dutyCycle+0x2>
 1c0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <dutyCycle+0x3>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e1       	ldi	r20, 0x10	; 16
 1ca:	51 e4       	ldi	r21, 0x41	; 65
 1cc:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__mulsf3>
 1d0:	0e 94 99 02 	call	0x532	; 0x532 <__fixsfsi>
 1d4:	c6 17       	cp	r28, r22
 1d6:	d7 07       	cpc	r29, r23
 1d8:	14 f3       	brlt	.-60     	; 0x19e <bar_display+0x3a>
		led_selection*=2;
	led_selection--;
 1da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led_selection>
 1de:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <led_selection+0x1>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <led_selection+0x1>
 1e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <led_selection>
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <__vector_21>:

ISR(ADC_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
	sum_adc += ADC;
 204:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 208:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 20c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 210:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 214:	82 0f       	add	r24, r18
 216:	93 1f       	adc	r25, r19
 218:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 21c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	cf 92       	push	r12
 23e:	df 92       	push	r13
 240:	ef 92       	push	r14
 242:	ff 92       	push	r15
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
	LED_OFF;
 25c:	2d 98       	cbi	0x05, 5	; 5
	if(mode2)
 25e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mode2>
 262:	88 23       	and	r24, r24
 264:	11 f0       	breq	.+4      	; 0x26a <__vector_12+0x38>
		PORTD = 0b00000000;
 266:	1b b8       	out	0x0b, r1	; 11
 268:	05 c0       	rjmp	.+10     	; 0x274 <__vector_12+0x42>
	else
		PORTD = led_selection;
 26a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led_selection>
 26e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <led_selection+0x1>
 272:	8b b9       	out	0x0b, r24	; 11
	if(dutyCycle>0)
 274:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <dutyCycle>
 278:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <dutyCycle+0x1>
 27c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <dutyCycle+0x2>
 280:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <dutyCycle+0x3>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	a9 01       	movw	r20, r18
 28a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__gesf2>
 28e:	18 16       	cp	r1, r24
 290:	ec f4       	brge	.+58     	; 0x2cc <__vector_12+0x9a>
		OCR1B = (int)((dutyCycle)*(OCR1A+1));
 292:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 296:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 29a:	c0 90 09 01 	lds	r12, 0x0109	; 0x800109 <dutyCycle>
 29e:	d0 90 0a 01 	lds	r13, 0x010A	; 0x80010a <dutyCycle+0x1>
 2a2:	e0 90 0b 01 	lds	r14, 0x010B	; 0x80010b <dutyCycle+0x2>
 2a6:	f0 90 0c 01 	lds	r15, 0x010C	; 0x80010c <dutyCycle+0x3>
 2aa:	6f 5f       	subi	r22, 0xFF	; 255
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 cf 02 	call	0x59e	; 0x59e <__floatunsisf>
 2b6:	a7 01       	movw	r20, r14
 2b8:	96 01       	movw	r18, r12
 2ba:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__mulsf3>
 2be:	0e 94 99 02 	call	0x532	; 0x532 <__fixsfsi>
 2c2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 2c6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <__vector_12+0xa2>
	else
		OCR1B = 0;
 2cc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 2d0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
}
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	df 90       	pop	r13
 2f2:	cf 90       	pop	r12
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
	LED_ON;
 30c:	2d 9a       	sbi	0x05, 5	; 5
	PORTD = led_selection;
 30e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led_selection>
 312:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <led_selection+0x1>
 316:	8b b9       	out	0x0b, r24	; 11
}
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <__vector_3>:

ISR(PCINT0_vect) //ON BOARD SWITCH (SW1)
{
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
	if(!(PINB & (1<<PINB7))) //Falling Edge
 334:	1f 99       	sbic	0x03, 7	; 3
 336:	07 c0       	rjmp	.+14     	; 0x346 <__vector_3+0x20>
	{
		mode2 = !mode2;
 338:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <mode2>
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	91 11       	cpse	r25, r1
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mode2>
	}
}
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	3f 93       	push	r19
 362:	4f 93       	push	r20
 364:	5f 93       	push	r21
 366:	6f 93       	push	r22
 368:	7f 93       	push	r23
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
 36e:	af 93       	push	r26
 370:	bf 93       	push	r27
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
	counter10ms++;	
 376:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <counter10ms>
 37a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <counter10ms+0x1>
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <counter10ms+0x1>
 384:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <counter10ms>
	if(counter100ms == 100)
 388:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter100ms>
 38c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <counter100ms+0x1>
 390:	84 36       	cpi	r24, 0x64	; 100
 392:	91 05       	cpc	r25, r1
 394:	41 f5       	brne	.+80     	; 0x3e6 <__vector_14+0x92>
	{
		dutyCycle = (sum_adc/10.0)/1024.0;
 396:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 39a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 39e:	07 2e       	mov	r0, r23
 3a0:	00 0c       	add	r0, r0
 3a2:	88 0b       	sbc	r24, r24
 3a4:	99 0b       	sbc	r25, r25
 3a6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__floatsisf>
 3aa:	20 e0       	ldi	r18, 0x00	; 0
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	40 e2       	ldi	r20, 0x20	; 32
 3b0:	51 e4       	ldi	r21, 0x41	; 65
 3b2:	0e 94 27 02 	call	0x44e	; 0x44e <__divsf3>
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	40 e8       	ldi	r20, 0x80	; 128
 3bc:	5a e3       	ldi	r21, 0x3A	; 58
 3be:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__mulsf3>
 3c2:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <dutyCycle>
 3c6:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <dutyCycle+0x1>
 3ca:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <dutyCycle+0x2>
 3ce:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <dutyCycle+0x3>
		bar_display();
 3d2:	0e 94 b2 00 	call	0x164	; 0x164 <bar_display>
		sum_adc = 0;
 3d6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 3da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		counter100ms = 0;
 3de:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <counter100ms+0x1>
 3e2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter100ms>
	}
	if(counter10ms == 10)
 3e6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <counter10ms>
 3ea:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <counter10ms+0x1>
 3ee:	0a 97       	sbiw	r24, 0x0a	; 10
 3f0:	79 f4       	brne	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		counter10ms = 0;
 3f2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <counter10ms+0x1>
 3f6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <counter10ms>
		counter100ms+=10;
 3fa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter100ms>
 3fe:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <counter100ms+0x1>
 402:	0a 96       	adiw	r24, 0x0a	; 10
 404:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <counter100ms+0x1>
 408:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter100ms>
		startConversion();
 40c:	0e 94 79 00 	call	0xf2	; 0xf2 <startConversion>
	}



}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRB |= (1<<DDB5); //ON BOARD LED
 432:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= ~(1<<DDB7); // ON BOARD LED
 434:	27 98       	cbi	0x04, 7	; 4
	DDRD = 0b11111111; // Set port D to output
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	8a b9       	out	0x0a, r24	; 10
	InitTimer1();
 43a:	0e 94 8a 00 	call	0x114	; 0x114 <InitTimer1>
	InitTimer0();
 43e:	0e 94 7f 00 	call	0xfe	; 0xfe <InitTimer0>
	InitSW1();
 442:	0e 94 a7 00 	call	0x14e	; 0x14e <InitSW1>
	setupADC();
 446:	0e 94 6e 00 	call	0xdc	; 0xdc <setupADC>
	sei();
 44a:	78 94       	sei
 44c:	ff cf       	rjmp	.-2      	; 0x44c <main+0x1a>

0000044e <__divsf3>:
 44e:	0e 94 3b 02 	call	0x476	; 0x476 <__divsf3x>
 452:	0c 94 23 03 	jmp	0x646	; 0x646 <__fp_round>
 456:	0e 94 1c 03 	call	0x638	; 0x638 <__fp_pscB>
 45a:	58 f0       	brcs	.+22     	; 0x472 <__divsf3+0x24>
 45c:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_pscA>
 460:	40 f0       	brcs	.+16     	; 0x472 <__divsf3+0x24>
 462:	29 f4       	brne	.+10     	; 0x46e <__divsf3+0x20>
 464:	5f 3f       	cpi	r21, 0xFF	; 255
 466:	29 f0       	breq	.+10     	; 0x472 <__divsf3+0x24>
 468:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_inf>
 46c:	51 11       	cpse	r21, r1
 46e:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_szero>
 472:	0c 94 12 03 	jmp	0x624	; 0x624 <__fp_nan>

00000476 <__divsf3x>:
 476:	0e 94 34 03 	call	0x668	; 0x668 <__fp_split3>
 47a:	68 f3       	brcs	.-38     	; 0x456 <__divsf3+0x8>

0000047c <__divsf3_pse>:
 47c:	99 23       	and	r25, r25
 47e:	b1 f3       	breq	.-20     	; 0x46c <__divsf3+0x1e>
 480:	55 23       	and	r21, r21
 482:	91 f3       	breq	.-28     	; 0x468 <__divsf3+0x1a>
 484:	95 1b       	sub	r25, r21
 486:	55 0b       	sbc	r21, r21
 488:	bb 27       	eor	r27, r27
 48a:	aa 27       	eor	r26, r26
 48c:	62 17       	cp	r22, r18
 48e:	73 07       	cpc	r23, r19
 490:	84 07       	cpc	r24, r20
 492:	38 f0       	brcs	.+14     	; 0x4a2 <__divsf3_pse+0x26>
 494:	9f 5f       	subi	r25, 0xFF	; 255
 496:	5f 4f       	sbci	r21, 0xFF	; 255
 498:	22 0f       	add	r18, r18
 49a:	33 1f       	adc	r19, r19
 49c:	44 1f       	adc	r20, r20
 49e:	aa 1f       	adc	r26, r26
 4a0:	a9 f3       	breq	.-22     	; 0x48c <__divsf3_pse+0x10>
 4a2:	35 d0       	rcall	.+106    	; 0x50e <__divsf3_pse+0x92>
 4a4:	0e 2e       	mov	r0, r30
 4a6:	3a f0       	brmi	.+14     	; 0x4b6 <__divsf3_pse+0x3a>
 4a8:	e0 e8       	ldi	r30, 0x80	; 128
 4aa:	32 d0       	rcall	.+100    	; 0x510 <__divsf3_pse+0x94>
 4ac:	91 50       	subi	r25, 0x01	; 1
 4ae:	50 40       	sbci	r21, 0x00	; 0
 4b0:	e6 95       	lsr	r30
 4b2:	00 1c       	adc	r0, r0
 4b4:	ca f7       	brpl	.-14     	; 0x4a8 <__divsf3_pse+0x2c>
 4b6:	2b d0       	rcall	.+86     	; 0x50e <__divsf3_pse+0x92>
 4b8:	fe 2f       	mov	r31, r30
 4ba:	29 d0       	rcall	.+82     	; 0x50e <__divsf3_pse+0x92>
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	88 1f       	adc	r24, r24
 4c2:	bb 1f       	adc	r27, r27
 4c4:	26 17       	cp	r18, r22
 4c6:	37 07       	cpc	r19, r23
 4c8:	48 07       	cpc	r20, r24
 4ca:	ab 07       	cpc	r26, r27
 4cc:	b0 e8       	ldi	r27, 0x80	; 128
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__divsf3_pse+0x56>
 4d0:	bb 0b       	sbc	r27, r27
 4d2:	80 2d       	mov	r24, r0
 4d4:	bf 01       	movw	r22, r30
 4d6:	ff 27       	eor	r31, r31
 4d8:	93 58       	subi	r25, 0x83	; 131
 4da:	5f 4f       	sbci	r21, 0xFF	; 255
 4dc:	3a f0       	brmi	.+14     	; 0x4ec <__divsf3_pse+0x70>
 4de:	9e 3f       	cpi	r25, 0xFE	; 254
 4e0:	51 05       	cpc	r21, r1
 4e2:	78 f0       	brcs	.+30     	; 0x502 <__divsf3_pse+0x86>
 4e4:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_inf>
 4e8:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_szero>
 4ec:	5f 3f       	cpi	r21, 0xFF	; 255
 4ee:	e4 f3       	brlt	.-8      	; 0x4e8 <__divsf3_pse+0x6c>
 4f0:	98 3e       	cpi	r25, 0xE8	; 232
 4f2:	d4 f3       	brlt	.-12     	; 0x4e8 <__divsf3_pse+0x6c>
 4f4:	86 95       	lsr	r24
 4f6:	77 95       	ror	r23
 4f8:	67 95       	ror	r22
 4fa:	b7 95       	ror	r27
 4fc:	f7 95       	ror	r31
 4fe:	9f 5f       	subi	r25, 0xFF	; 255
 500:	c9 f7       	brne	.-14     	; 0x4f4 <__divsf3_pse+0x78>
 502:	88 0f       	add	r24, r24
 504:	91 1d       	adc	r25, r1
 506:	96 95       	lsr	r25
 508:	87 95       	ror	r24
 50a:	97 f9       	bld	r25, 7
 50c:	08 95       	ret
 50e:	e1 e0       	ldi	r30, 0x01	; 1
 510:	66 0f       	add	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	88 1f       	adc	r24, r24
 516:	bb 1f       	adc	r27, r27
 518:	62 17       	cp	r22, r18
 51a:	73 07       	cpc	r23, r19
 51c:	84 07       	cpc	r24, r20
 51e:	ba 07       	cpc	r27, r26
 520:	20 f0       	brcs	.+8      	; 0x52a <__divsf3_pse+0xae>
 522:	62 1b       	sub	r22, r18
 524:	73 0b       	sbc	r23, r19
 526:	84 0b       	sbc	r24, r20
 528:	ba 0b       	sbc	r27, r26
 52a:	ee 1f       	adc	r30, r30
 52c:	88 f7       	brcc	.-30     	; 0x510 <__divsf3_pse+0x94>
 52e:	e0 95       	com	r30
 530:	08 95       	ret

00000532 <__fixsfsi>:
 532:	0e 94 a0 02 	call	0x540	; 0x540 <__fixunssfsi>
 536:	68 94       	set
 538:	b1 11       	cpse	r27, r1
 53a:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_szero>
 53e:	08 95       	ret

00000540 <__fixunssfsi>:
 540:	0e 94 3c 03 	call	0x678	; 0x678 <__fp_splitA>
 544:	88 f0       	brcs	.+34     	; 0x568 <__fixunssfsi+0x28>
 546:	9f 57       	subi	r25, 0x7F	; 127
 548:	98 f0       	brcs	.+38     	; 0x570 <__fixunssfsi+0x30>
 54a:	b9 2f       	mov	r27, r25
 54c:	99 27       	eor	r25, r25
 54e:	b7 51       	subi	r27, 0x17	; 23
 550:	b0 f0       	brcs	.+44     	; 0x57e <__fixunssfsi+0x3e>
 552:	e1 f0       	breq	.+56     	; 0x58c <__fixunssfsi+0x4c>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	1a f0       	brmi	.+6      	; 0x564 <__fixunssfsi+0x24>
 55e:	ba 95       	dec	r27
 560:	c9 f7       	brne	.-14     	; 0x554 <__fixunssfsi+0x14>
 562:	14 c0       	rjmp	.+40     	; 0x58c <__fixunssfsi+0x4c>
 564:	b1 30       	cpi	r27, 0x01	; 1
 566:	91 f0       	breq	.+36     	; 0x58c <__fixunssfsi+0x4c>
 568:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_zero>
 56c:	b1 e0       	ldi	r27, 0x01	; 1
 56e:	08 95       	ret
 570:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_zero>
 574:	67 2f       	mov	r22, r23
 576:	78 2f       	mov	r23, r24
 578:	88 27       	eor	r24, r24
 57a:	b8 5f       	subi	r27, 0xF8	; 248
 57c:	39 f0       	breq	.+14     	; 0x58c <__fixunssfsi+0x4c>
 57e:	b9 3f       	cpi	r27, 0xF9	; 249
 580:	cc f3       	brlt	.-14     	; 0x574 <__fixunssfsi+0x34>
 582:	86 95       	lsr	r24
 584:	77 95       	ror	r23
 586:	67 95       	ror	r22
 588:	b3 95       	inc	r27
 58a:	d9 f7       	brne	.-10     	; 0x582 <__fixunssfsi+0x42>
 58c:	3e f4       	brtc	.+14     	; 0x59c <__fixunssfsi+0x5c>
 58e:	90 95       	com	r25
 590:	80 95       	com	r24
 592:	70 95       	com	r23
 594:	61 95       	neg	r22
 596:	7f 4f       	sbci	r23, 0xFF	; 255
 598:	8f 4f       	sbci	r24, 0xFF	; 255
 59a:	9f 4f       	sbci	r25, 0xFF	; 255
 59c:	08 95       	ret

0000059e <__floatunsisf>:
 59e:	e8 94       	clt
 5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <__floatsisf+0x12>

000005a2 <__floatsisf>:
 5a2:	97 fb       	bst	r25, 7
 5a4:	3e f4       	brtc	.+14     	; 0x5b4 <__floatsisf+0x12>
 5a6:	90 95       	com	r25
 5a8:	80 95       	com	r24
 5aa:	70 95       	com	r23
 5ac:	61 95       	neg	r22
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	8f 4f       	sbci	r24, 0xFF	; 255
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	99 23       	and	r25, r25
 5b6:	a9 f0       	breq	.+42     	; 0x5e2 <__floatsisf+0x40>
 5b8:	f9 2f       	mov	r31, r25
 5ba:	96 e9       	ldi	r25, 0x96	; 150
 5bc:	bb 27       	eor	r27, r27
 5be:	93 95       	inc	r25
 5c0:	f6 95       	lsr	r31
 5c2:	87 95       	ror	r24
 5c4:	77 95       	ror	r23
 5c6:	67 95       	ror	r22
 5c8:	b7 95       	ror	r27
 5ca:	f1 11       	cpse	r31, r1
 5cc:	f8 cf       	rjmp	.-16     	; 0x5be <__floatsisf+0x1c>
 5ce:	fa f4       	brpl	.+62     	; 0x60e <__floatsisf+0x6c>
 5d0:	bb 0f       	add	r27, r27
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <__floatsisf+0x36>
 5d4:	60 ff       	sbrs	r22, 0
 5d6:	1b c0       	rjmp	.+54     	; 0x60e <__floatsisf+0x6c>
 5d8:	6f 5f       	subi	r22, 0xFF	; 255
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	16 c0       	rjmp	.+44     	; 0x60e <__floatsisf+0x6c>
 5e2:	88 23       	and	r24, r24
 5e4:	11 f0       	breq	.+4      	; 0x5ea <__floatsisf+0x48>
 5e6:	96 e9       	ldi	r25, 0x96	; 150
 5e8:	11 c0       	rjmp	.+34     	; 0x60c <__floatsisf+0x6a>
 5ea:	77 23       	and	r23, r23
 5ec:	21 f0       	breq	.+8      	; 0x5f6 <__floatsisf+0x54>
 5ee:	9e e8       	ldi	r25, 0x8E	; 142
 5f0:	87 2f       	mov	r24, r23
 5f2:	76 2f       	mov	r23, r22
 5f4:	05 c0       	rjmp	.+10     	; 0x600 <__floatsisf+0x5e>
 5f6:	66 23       	and	r22, r22
 5f8:	71 f0       	breq	.+28     	; 0x616 <__floatsisf+0x74>
 5fa:	96 e8       	ldi	r25, 0x86	; 134
 5fc:	86 2f       	mov	r24, r22
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	2a f0       	brmi	.+10     	; 0x60e <__floatsisf+0x6c>
 604:	9a 95       	dec	r25
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	da f7       	brpl	.-10     	; 0x604 <__floatsisf+0x62>
 60e:	88 0f       	add	r24, r24
 610:	96 95       	lsr	r25
 612:	87 95       	ror	r24
 614:	97 f9       	bld	r25, 7
 616:	08 95       	ret

00000618 <__fp_inf>:
 618:	97 f9       	bld	r25, 7
 61a:	9f 67       	ori	r25, 0x7F	; 127
 61c:	80 e8       	ldi	r24, 0x80	; 128
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	08 95       	ret

00000624 <__fp_nan>:
 624:	9f ef       	ldi	r25, 0xFF	; 255
 626:	80 ec       	ldi	r24, 0xC0	; 192
 628:	08 95       	ret

0000062a <__fp_pscA>:
 62a:	00 24       	eor	r0, r0
 62c:	0a 94       	dec	r0
 62e:	16 16       	cp	r1, r22
 630:	17 06       	cpc	r1, r23
 632:	18 06       	cpc	r1, r24
 634:	09 06       	cpc	r0, r25
 636:	08 95       	ret

00000638 <__fp_pscB>:
 638:	00 24       	eor	r0, r0
 63a:	0a 94       	dec	r0
 63c:	12 16       	cp	r1, r18
 63e:	13 06       	cpc	r1, r19
 640:	14 06       	cpc	r1, r20
 642:	05 06       	cpc	r0, r21
 644:	08 95       	ret

00000646 <__fp_round>:
 646:	09 2e       	mov	r0, r25
 648:	03 94       	inc	r0
 64a:	00 0c       	add	r0, r0
 64c:	11 f4       	brne	.+4      	; 0x652 <__fp_round+0xc>
 64e:	88 23       	and	r24, r24
 650:	52 f0       	brmi	.+20     	; 0x666 <__fp_round+0x20>
 652:	bb 0f       	add	r27, r27
 654:	40 f4       	brcc	.+16     	; 0x666 <__fp_round+0x20>
 656:	bf 2b       	or	r27, r31
 658:	11 f4       	brne	.+4      	; 0x65e <__fp_round+0x18>
 65a:	60 ff       	sbrs	r22, 0
 65c:	04 c0       	rjmp	.+8      	; 0x666 <__fp_round+0x20>
 65e:	6f 5f       	subi	r22, 0xFF	; 255
 660:	7f 4f       	sbci	r23, 0xFF	; 255
 662:	8f 4f       	sbci	r24, 0xFF	; 255
 664:	9f 4f       	sbci	r25, 0xFF	; 255
 666:	08 95       	ret

00000668 <__fp_split3>:
 668:	57 fd       	sbrc	r21, 7
 66a:	90 58       	subi	r25, 0x80	; 128
 66c:	44 0f       	add	r20, r20
 66e:	55 1f       	adc	r21, r21
 670:	59 f0       	breq	.+22     	; 0x688 <__fp_splitA+0x10>
 672:	5f 3f       	cpi	r21, 0xFF	; 255
 674:	71 f0       	breq	.+28     	; 0x692 <__fp_splitA+0x1a>
 676:	47 95       	ror	r20

00000678 <__fp_splitA>:
 678:	88 0f       	add	r24, r24
 67a:	97 fb       	bst	r25, 7
 67c:	99 1f       	adc	r25, r25
 67e:	61 f0       	breq	.+24     	; 0x698 <__fp_splitA+0x20>
 680:	9f 3f       	cpi	r25, 0xFF	; 255
 682:	79 f0       	breq	.+30     	; 0x6a2 <__fp_splitA+0x2a>
 684:	87 95       	ror	r24
 686:	08 95       	ret
 688:	12 16       	cp	r1, r18
 68a:	13 06       	cpc	r1, r19
 68c:	14 06       	cpc	r1, r20
 68e:	55 1f       	adc	r21, r21
 690:	f2 cf       	rjmp	.-28     	; 0x676 <__fp_split3+0xe>
 692:	46 95       	lsr	r20
 694:	f1 df       	rcall	.-30     	; 0x678 <__fp_splitA>
 696:	08 c0       	rjmp	.+16     	; 0x6a8 <__fp_splitA+0x30>
 698:	16 16       	cp	r1, r22
 69a:	17 06       	cpc	r1, r23
 69c:	18 06       	cpc	r1, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	f1 cf       	rjmp	.-30     	; 0x684 <__fp_splitA+0xc>
 6a2:	86 95       	lsr	r24
 6a4:	71 05       	cpc	r23, r1
 6a6:	61 05       	cpc	r22, r1
 6a8:	08 94       	sec
 6aa:	08 95       	ret

000006ac <__fp_zero>:
 6ac:	e8 94       	clt

000006ae <__fp_szero>:
 6ae:	bb 27       	eor	r27, r27
 6b0:	66 27       	eor	r22, r22
 6b2:	77 27       	eor	r23, r23
 6b4:	cb 01       	movw	r24, r22
 6b6:	97 f9       	bld	r25, 7
 6b8:	08 95       	ret

000006ba <__gesf2>:
 6ba:	0e 94 cf 03 	call	0x79e	; 0x79e <__fp_cmp>
 6be:	08 f4       	brcc	.+2      	; 0x6c2 <__gesf2+0x8>
 6c0:	8f ef       	ldi	r24, 0xFF	; 255
 6c2:	08 95       	ret

000006c4 <__mulsf3>:
 6c4:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3x>
 6c8:	0c 94 23 03 	jmp	0x646	; 0x646 <__fp_round>
 6cc:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_pscA>
 6d0:	38 f0       	brcs	.+14     	; 0x6e0 <__mulsf3+0x1c>
 6d2:	0e 94 1c 03 	call	0x638	; 0x638 <__fp_pscB>
 6d6:	20 f0       	brcs	.+8      	; 0x6e0 <__mulsf3+0x1c>
 6d8:	95 23       	and	r25, r21
 6da:	11 f0       	breq	.+4      	; 0x6e0 <__mulsf3+0x1c>
 6dc:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_inf>
 6e0:	0c 94 12 03 	jmp	0x624	; 0x624 <__fp_nan>
 6e4:	11 24       	eor	r1, r1
 6e6:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_szero>

000006ea <__mulsf3x>:
 6ea:	0e 94 34 03 	call	0x668	; 0x668 <__fp_split3>
 6ee:	70 f3       	brcs	.-36     	; 0x6cc <__mulsf3+0x8>

000006f0 <__mulsf3_pse>:
 6f0:	95 9f       	mul	r25, r21
 6f2:	c1 f3       	breq	.-16     	; 0x6e4 <__mulsf3+0x20>
 6f4:	95 0f       	add	r25, r21
 6f6:	50 e0       	ldi	r21, 0x00	; 0
 6f8:	55 1f       	adc	r21, r21
 6fa:	62 9f       	mul	r22, r18
 6fc:	f0 01       	movw	r30, r0
 6fe:	72 9f       	mul	r23, r18
 700:	bb 27       	eor	r27, r27
 702:	f0 0d       	add	r31, r0
 704:	b1 1d       	adc	r27, r1
 706:	63 9f       	mul	r22, r19
 708:	aa 27       	eor	r26, r26
 70a:	f0 0d       	add	r31, r0
 70c:	b1 1d       	adc	r27, r1
 70e:	aa 1f       	adc	r26, r26
 710:	64 9f       	mul	r22, r20
 712:	66 27       	eor	r22, r22
 714:	b0 0d       	add	r27, r0
 716:	a1 1d       	adc	r26, r1
 718:	66 1f       	adc	r22, r22
 71a:	82 9f       	mul	r24, r18
 71c:	22 27       	eor	r18, r18
 71e:	b0 0d       	add	r27, r0
 720:	a1 1d       	adc	r26, r1
 722:	62 1f       	adc	r22, r18
 724:	73 9f       	mul	r23, r19
 726:	b0 0d       	add	r27, r0
 728:	a1 1d       	adc	r26, r1
 72a:	62 1f       	adc	r22, r18
 72c:	83 9f       	mul	r24, r19
 72e:	a0 0d       	add	r26, r0
 730:	61 1d       	adc	r22, r1
 732:	22 1f       	adc	r18, r18
 734:	74 9f       	mul	r23, r20
 736:	33 27       	eor	r19, r19
 738:	a0 0d       	add	r26, r0
 73a:	61 1d       	adc	r22, r1
 73c:	23 1f       	adc	r18, r19
 73e:	84 9f       	mul	r24, r20
 740:	60 0d       	add	r22, r0
 742:	21 1d       	adc	r18, r1
 744:	82 2f       	mov	r24, r18
 746:	76 2f       	mov	r23, r22
 748:	6a 2f       	mov	r22, r26
 74a:	11 24       	eor	r1, r1
 74c:	9f 57       	subi	r25, 0x7F	; 127
 74e:	50 40       	sbci	r21, 0x00	; 0
 750:	9a f0       	brmi	.+38     	; 0x778 <__mulsf3_pse+0x88>
 752:	f1 f0       	breq	.+60     	; 0x790 <__mulsf3_pse+0xa0>
 754:	88 23       	and	r24, r24
 756:	4a f0       	brmi	.+18     	; 0x76a <__mulsf3_pse+0x7a>
 758:	ee 0f       	add	r30, r30
 75a:	ff 1f       	adc	r31, r31
 75c:	bb 1f       	adc	r27, r27
 75e:	66 1f       	adc	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	88 1f       	adc	r24, r24
 764:	91 50       	subi	r25, 0x01	; 1
 766:	50 40       	sbci	r21, 0x00	; 0
 768:	a9 f7       	brne	.-22     	; 0x754 <__mulsf3_pse+0x64>
 76a:	9e 3f       	cpi	r25, 0xFE	; 254
 76c:	51 05       	cpc	r21, r1
 76e:	80 f0       	brcs	.+32     	; 0x790 <__mulsf3_pse+0xa0>
 770:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_inf>
 774:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_szero>
 778:	5f 3f       	cpi	r21, 0xFF	; 255
 77a:	e4 f3       	brlt	.-8      	; 0x774 <__mulsf3_pse+0x84>
 77c:	98 3e       	cpi	r25, 0xE8	; 232
 77e:	d4 f3       	brlt	.-12     	; 0x774 <__mulsf3_pse+0x84>
 780:	86 95       	lsr	r24
 782:	77 95       	ror	r23
 784:	67 95       	ror	r22
 786:	b7 95       	ror	r27
 788:	f7 95       	ror	r31
 78a:	e7 95       	ror	r30
 78c:	9f 5f       	subi	r25, 0xFF	; 255
 78e:	c1 f7       	brne	.-16     	; 0x780 <__mulsf3_pse+0x90>
 790:	fe 2b       	or	r31, r30
 792:	88 0f       	add	r24, r24
 794:	91 1d       	adc	r25, r1
 796:	96 95       	lsr	r25
 798:	87 95       	ror	r24
 79a:	97 f9       	bld	r25, 7
 79c:	08 95       	ret

0000079e <__fp_cmp>:
 79e:	99 0f       	add	r25, r25
 7a0:	00 08       	sbc	r0, r0
 7a2:	55 0f       	add	r21, r21
 7a4:	aa 0b       	sbc	r26, r26
 7a6:	e0 e8       	ldi	r30, 0x80	; 128
 7a8:	fe ef       	ldi	r31, 0xFE	; 254
 7aa:	16 16       	cp	r1, r22
 7ac:	17 06       	cpc	r1, r23
 7ae:	e8 07       	cpc	r30, r24
 7b0:	f9 07       	cpc	r31, r25
 7b2:	c0 f0       	brcs	.+48     	; 0x7e4 <__fp_cmp+0x46>
 7b4:	12 16       	cp	r1, r18
 7b6:	13 06       	cpc	r1, r19
 7b8:	e4 07       	cpc	r30, r20
 7ba:	f5 07       	cpc	r31, r21
 7bc:	98 f0       	brcs	.+38     	; 0x7e4 <__fp_cmp+0x46>
 7be:	62 1b       	sub	r22, r18
 7c0:	73 0b       	sbc	r23, r19
 7c2:	84 0b       	sbc	r24, r20
 7c4:	95 0b       	sbc	r25, r21
 7c6:	39 f4       	brne	.+14     	; 0x7d6 <__fp_cmp+0x38>
 7c8:	0a 26       	eor	r0, r26
 7ca:	61 f0       	breq	.+24     	; 0x7e4 <__fp_cmp+0x46>
 7cc:	23 2b       	or	r18, r19
 7ce:	24 2b       	or	r18, r20
 7d0:	25 2b       	or	r18, r21
 7d2:	21 f4       	brne	.+8      	; 0x7dc <__fp_cmp+0x3e>
 7d4:	08 95       	ret
 7d6:	0a 26       	eor	r0, r26
 7d8:	09 f4       	brne	.+2      	; 0x7dc <__fp_cmp+0x3e>
 7da:	a1 40       	sbci	r26, 0x01	; 1
 7dc:	a6 95       	lsr	r26
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	81 1d       	adc	r24, r1
 7e2:	81 1d       	adc	r24, r1
 7e4:	08 95       	ret

000007e6 <_exit>:
 7e6:	f8 94       	cli

000007e8 <__stop_program>:
 7e8:	ff cf       	rjmp	.-2      	; 0x7e8 <__stop_program>
