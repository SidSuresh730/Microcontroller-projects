
ECE3411LabPractice12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000c20  00000cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800136  00800136  00000cea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000141d  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3a  00000000  00000000  00002251  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000898  00000000  00000000  00002f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ff  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ef  00000000  00000000  00004067  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004856  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e2       	ldi	r30, 0x20	; 32
  c8:	fc e0       	ldi	r31, 0x0C	; 12
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 33       	cpi	r26, 0x36	; 54
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e3       	ldi	r26, 0x36	; 54
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 39       	cpi	r26, 0x95	; 149
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  ea:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR1 = (uint8_t)TWBR_val;
  f2:	88 e4       	ldi	r24, 0x48	; 72
  f4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
  f8:	08 95       	ret

000000fa <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR1 = 0;
  fa:	ec ed       	ldi	r30, 0xDC	; 220
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
	// transmit START condition
	TWCR1 = (1<<TWINT1) | (1<<TWSTA1) | (1<<TWEN1);
 100:	94 ea       	ldi	r25, 0xA4	; 164
 102:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 104:	90 81       	ld	r25, Z
 106:	99 23       	and	r25, r25
 108:	ec f7       	brge	.-6      	; 0x104 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR1 & 0xF8) != TW_START){ return 1; }
 10a:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
 10e:	98 7f       	andi	r25, 0xF8	; 248
 110:	98 30       	cpi	r25, 0x08	; 8
 112:	61 f4       	brne	.+24     	; 0x12c <i2c_start+0x32>
	
	// load slave address into data register
	TWDR1 = address;
 114:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	// start transmission of address
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 11e:	ec ed       	ldi	r30, 0xDC	; 220
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <i2c_start+0x28>
/*	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
*/
	return 0;
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
	TWCR1 = (1<<TWINT1) | (1<<TWSTA1) | (1<<TWEN1);
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR1 & 0xF8) != TW_START){ return 1; }
 12c:	81 e0       	ldi	r24, 0x01	; 1
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
*/
	return 0;
}
 12e:	08 95       	ret

00000130 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR1 = data;
 130:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	// start transmission of data
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
 134:	84 e8       	ldi	r24, 0x84	; 132
 136:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 13a:	ec ed       	ldi	r30, 0xDC	; 220
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	ec f7       	brge	.-6      	; 0x13e <i2c_write+0xe>
	
	if( (TWSR1 & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 144:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
 148:	98 7f       	andi	r25, 0xF8	; 248
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	98 32       	cpi	r25, 0x28	; 40
 14e:	09 f4       	brne	.+2      	; 0x152 <i2c_write+0x22>
 150:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 152:	08 95       	ret

00000154 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWEA1);
 154:	84 ec       	ldi	r24, 0xC4	; 196
 156:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 15a:	ec ed       	ldi	r30, 0xDC	; 220
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	ec f7       	brge	.-6      	; 0x15e <i2c_read_ack+0xa>
	// return received data from TWDR
	return TWDR1;
 164:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
 168:	08 95       	ret

0000016a <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 170:	ec ed       	ldi	r30, 0xDC	; 220
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 23       	and	r24, r24
 178:	ec f7       	brge	.-6      	; 0x174 <i2c_read_nack+0xa>
	// return received data from TWDR
	return TWDR1;
 17a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
 17e:	08 95       	ret

00000180 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	6b 01       	movw	r12, r22
 190:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 192:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
 196:	f8 2e       	mov	r15, r24
 198:	81 11       	cpse	r24, r1
 19a:	12 c0       	rjmp	.+36     	; 0x1c0 <i2c_transmit+0x40>
	
	for (uint16_t i = 0; i < length; i++)
 19c:	01 15       	cp	r16, r1
 19e:	11 05       	cpc	r17, r1
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <i2c_transmit+0x38>
 1a2:	e6 01       	movw	r28, r12
 1a4:	0c 0d       	add	r16, r12
 1a6:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 1a8:	89 91       	ld	r24, Y+
 1aa:	0e 94 98 00 	call	0x130	; 0x130 <i2c_write>
 1ae:	81 11       	cpse	r24, r1
 1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <i2c_transmit+0x46>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
 1b2:	0c 17       	cp	r16, r28
 1b4:	1d 07       	cpc	r17, r29
 1b6:	c1 f7       	brne	.-16     	; 0x1a8 <i2c_transmit+0x28>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWSTO1);
 1b8:	84 e9       	ldi	r24, 0x94	; 148
 1ba:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <i2c_transmit+0x4a>
	return TWDR1;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 1c0:	ff 24       	eor	r15, r15
 1c2:	f3 94       	inc	r15
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <i2c_transmit+0x4a>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 1c6:	ff 24       	eor	r15, r15
 1c8:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
 1ca:	8f 2d       	mov	r24, r15
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

000001dc <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
 1dc:	af 92       	push	r10
 1de:	bf 92       	push	r11
 1e0:	df 92       	push	r13
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	5b 01       	movw	r10, r22
 1f0:	7a 01       	movw	r14, r20
	if (i2c_start(address | I2C_READ)) return 1;
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
 1f8:	d8 2e       	mov	r13, r24
 1fa:	81 11       	cpse	r24, r1
 1fc:	18 c0       	rjmp	.+48     	; 0x22e <i2c_receive+0x52>
	
	for (uint16_t i = 0; i < (length-1); i++)
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	e8 1a       	sub	r14, r24
 202:	f1 08       	sbc	r15, r1
 204:	51 f0       	breq	.+20     	; 0x21a <i2c_receive+0x3e>
 206:	e5 01       	movw	r28, r10
 208:	85 01       	movw	r16, r10
 20a:	0e 0d       	add	r16, r14
 20c:	1f 1d       	adc	r17, r15
	{
		data[i] = i2c_read_ack();
 20e:	0e 94 aa 00 	call	0x154	; 0x154 <i2c_read_ack>
 212:	89 93       	st	Y+, r24

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
 214:	0c 17       	cp	r16, r28
 216:	1d 07       	cpc	r17, r29
 218:	d1 f7       	brne	.-12     	; 0x20e <i2c_receive+0x32>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 21a:	e5 01       	movw	r28, r10
 21c:	ce 0d       	add	r28, r14
 21e:	df 1d       	adc	r29, r15
 220:	0e 94 b5 00 	call	0x16a	; 0x16a <i2c_read_nack>
 224:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWSTO1);
 226:	84 e9       	ldi	r24, 0x94	; 148
 228:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
 22c:	02 c0       	rjmp	.+4      	; 0x232 <i2c_receive+0x56>
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
 22e:	dd 24       	eor	r13, r13
 230:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 232:	8d 2d       	mov	r24, r13
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	bf 90       	pop	r11
 244:	af 90       	pop	r10
 246:	08 95       	ret

00000248 <InitTimer0>:
}

double celc_to_far(uint8_t celcius)
{
	return celcius*9.0/5.0 + 32;
}
 248:	84 b5       	in	r24, 0x24	; 36
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	84 bd       	out	0x24, r24	; 36
 24e:	89 ef       	ldi	r24, 0xF9	; 249
 250:	87 bd       	out	0x27, r24	; 39
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	85 bd       	out	0x25, r24	; 37
 25c:	08 95       	ret

0000025e <UART_Init>:
 25e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 262:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 26c:	8e e0       	ldi	r24, 0x0E	; 14
 26e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 272:	08 95       	ret

00000274 <writeDouble>:

void writeDouble(double number) // writes a double (XX.XX) to the buffer
{
 274:	cf 92       	push	r12
 276:	df 92       	push	r13
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	6b 01       	movw	r12, r22
 284:	7c 01       	movw	r14, r24
	uart_putchar((int)number / 10 + 48, &UART_Stream);
 286:	0e 94 4a 04 	call	0x894	; 0x894 <__fixsfsi>
 28a:	ca e0       	ldi	r28, 0x0A	; 10
 28c:	d0 e0       	ldi	r29, 0x00	; 0
 28e:	cb 01       	movw	r24, r22
 290:	be 01       	movw	r22, r28
 292:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__divmodhi4>
 296:	96 2f       	mov	r25, r22
 298:	18 2f       	mov	r17, r24
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	71 e0       	ldi	r23, 0x01	; 1
 29e:	80 e3       	ldi	r24, 0x30	; 48
 2a0:	89 0f       	add	r24, r25
 2a2:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	uart_putchar((int)number % 10 + 48, &UART_Stream); // + 48 converts the integer to the corresponding character in ASCII
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	71 e0       	ldi	r23, 0x01	; 1
 2aa:	80 e3       	ldi	r24, 0x30	; 48
 2ac:	81 0f       	add	r24, r17
 2ae:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	uart_putchar('.', &UART_Stream);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	71 e0       	ldi	r23, 0x01	; 1
 2b6:	8e e2       	ldi	r24, 0x2E	; 46
 2b8:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	uart_putchar((int)(number * 10) % 10 + 48, &UART_Stream);
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	40 e2       	ldi	r20, 0x20	; 32
 2c2:	51 e4       	ldi	r21, 0x41	; 65
 2c4:	c7 01       	movw	r24, r14
 2c6:	b6 01       	movw	r22, r12
 2c8:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__mulsf3>
 2cc:	0e 94 4a 04 	call	0x894	; 0x894 <__fixsfsi>
 2d0:	cb 01       	movw	r24, r22
 2d2:	be 01       	movw	r22, r28
 2d4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__divmodhi4>
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	71 e0       	ldi	r23, 0x01	; 1
 2dc:	80 5d       	subi	r24, 0xD0	; 208
 2de:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	uart_putchar((int)(number * 100) % 10 + 48, &UART_Stream);
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	48 ec       	ldi	r20, 0xC8	; 200
 2e8:	52 e4       	ldi	r21, 0x42	; 66
 2ea:	c7 01       	movw	r24, r14
 2ec:	b6 01       	movw	r22, r12
 2ee:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__mulsf3>
 2f2:	0e 94 4a 04 	call	0x894	; 0x894 <__fixsfsi>
 2f6:	cb 01       	movw	r24, r22
 2f8:	be 01       	movw	r22, r28
 2fa:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__divmodhi4>
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	71 e0       	ldi	r23, 0x01	; 1
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	//uart_putchar('\n', &UART_Stream);
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	cf 90       	pop	r12
 316:	08 95       	ret

00000318 <writeMSG>:

void writeMSG(void)
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
	for(int i=0; i<strlen(msg_1); i++)
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	d0 e0       	ldi	r29, 0x00	; 0
 320:	08 c0       	rjmp	.+16     	; 0x332 <writeMSG+0x1a>
	{
		uart_putchar(msg_1[i], &UART_Stream);
 322:	ac 0f       	add	r26, r28
 324:	bd 1f       	adc	r27, r29
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	71 e0       	ldi	r23, 0x01	; 1
 32a:	8c 91       	ld	r24, X
 32c:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	//uart_putchar('\n', &UART_Stream);
}

void writeMSG(void)
{
	for(int i=0; i<strlen(msg_1); i++)
 330:	21 96       	adiw	r28, 0x01	; 1
 332:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <msg_1>
 336:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <msg_1+0x1>
 33a:	fd 01       	movw	r30, r26
 33c:	01 90       	ld	r0, Z+
 33e:	00 20       	and	r0, r0
 340:	e9 f7       	brne	.-6      	; 0x33c <writeMSG+0x24>
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	ea 1b       	sub	r30, r26
 346:	fb 0b       	sbc	r31, r27
 348:	ce 17       	cp	r28, r30
 34a:	df 07       	cpc	r29, r31
 34c:	50 f3       	brcs	.-44     	; 0x322 <writeMSG+0xa>
	{
		uart_putchar(msg_1[i], &UART_Stream);
	}
	writeDouble(celc_to_far(temperature));
 34e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__data_end>
 352:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <__data_end+0x1>
 356:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end+0x2>
 35a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x3>
 35e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fixunssfsi>
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 82 04 	call	0x904	; 0x904 <__floatsisf>
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	40 e1       	ldi	r20, 0x10	; 16
 372:	51 e4       	ldi	r21, 0x41	; 65
 374:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__mulsf3>
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 ea       	ldi	r20, 0xA0	; 160
 37e:	50 e4       	ldi	r21, 0x40	; 64
 380:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__divsf3>
 384:	20 e0       	ldi	r18, 0x00	; 0
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	52 e4       	ldi	r21, 0x42	; 66
 38c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__addsf3>
 390:	0e 94 3a 01 	call	0x274	; 0x274 <writeDouble>
	for(int i=0; i<strlen(msg_2); i++)
 394:	c0 e0       	ldi	r28, 0x00	; 0
 396:	d0 e0       	ldi	r29, 0x00	; 0
 398:	08 c0       	rjmp	.+16     	; 0x3aa <writeMSG+0x92>
	{
		uart_putchar(msg_2[i], &UART_Stream);
 39a:	ac 0f       	add	r26, r28
 39c:	bd 1f       	adc	r27, r29
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	71 e0       	ldi	r23, 0x01	; 1
 3a2:	8c 91       	ld	r24, X
 3a4:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	for(int i=0; i<strlen(msg_1); i++)
	{
		uart_putchar(msg_1[i], &UART_Stream);
	}
	writeDouble(celc_to_far(temperature));
	for(int i=0; i<strlen(msg_2); i++)
 3a8:	21 96       	adiw	r28, 0x01	; 1
 3aa:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <msg_2>
 3ae:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <msg_2+0x1>
 3b2:	fd 01       	movw	r30, r26
 3b4:	01 90       	ld	r0, Z+
 3b6:	00 20       	and	r0, r0
 3b8:	e9 f7       	brne	.-6      	; 0x3b4 <writeMSG+0x9c>
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	ea 1b       	sub	r30, r26
 3be:	fb 0b       	sbc	r31, r27
 3c0:	ce 17       	cp	r28, r30
 3c2:	df 07       	cpc	r29, r31
 3c4:	50 f3       	brcs	.-44     	; 0x39a <writeMSG+0x82>
	{
		uart_putchar(msg_2[i], &UART_Stream);
	}
	
}
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
	counter++;
 3da:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <counter>
 3de:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <counter+0x1>
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <counter+0x1>
 3e8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <counter>
}
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <main>:

int main(void)
{
    /* Replace with your application code */
	i2c_init();
 3fa:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_init>
	UART_Init(MYUBRR);
 3fe:	87 e6       	ldi	r24, 0x67	; 103
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 2f 01 	call	0x25e	; 0x25e <UART_Init>
	InitTimer0();
 406:	0e 94 24 01 	call	0x248	; 0x248 <InitTimer0>
	sei();
 40a:	78 94       	sei
    while (1) 
    {
		if(counter>=4999) // 5 seconds
 40c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <counter>
 410:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <counter+0x1>
 414:	87 38       	cpi	r24, 0x87	; 135
 416:	93 41       	sbci	r25, 0x13	; 19
 418:	cc f3       	brlt	.-14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		{
		counter = 0;
 41a:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <counter+0x1>
 41e:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <counter>
		i2c_transmit(slave_addr, 0x00, 8);
 422:	48 e0       	ldi	r20, 0x08	; 8
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	80 e9       	ldi	r24, 0x90	; 144
 42c:	0e 94 c0 00 	call	0x180	; 0x180 <i2c_transmit>
		i2c_receive(slave_addr, &receive, 8);
 430:	48 e0       	ldi	r20, 0x08	; 8
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	6e e8       	ldi	r22, 0x8E	; 142
 436:	71 e0       	ldi	r23, 0x01	; 1
 438:	80 e9       	ldi	r24, 0x90	; 144
 43a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_receive>
		temperature = receive;
 43e:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <receive>
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 80 04 	call	0x900	; 0x900 <__floatunsisf>
 44c:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <__data_end>
 450:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <__data_end+0x1>
 454:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end+0x2>
 458:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x3>
		writeMSG();
 45c:	0e 94 8c 01 	call	0x318	; 0x318 <writeMSG>
 460:	d5 cf       	rjmp	.-86     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

00000462 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 462:	cf 93       	push	r28
 464:	c8 2f       	mov	r28, r24

  if (c == '\a')
 466:	87 30       	cpi	r24, 0x07	; 7
 468:	69 f4       	brne	.+26     	; 0x484 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 46a:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <__iob+0x4>
 46e:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <__iob+0x5>
 472:	47 e0       	ldi	r20, 0x07	; 7
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	8e e2       	ldi	r24, 0x2E	; 46
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 a3 05 	call	0xb46	; 0xb46 <fwrite>
      return 0;
 482:	0c c0       	rjmp	.+24     	; 0x49c <uart_putchar+0x3a>
    }

  if (c == '\n')
 484:	8a 30       	cpi	r24, 0x0A	; 10
 486:	19 f4       	brne	.+6      	; 0x48e <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 488:	8d e0       	ldi	r24, 0x0D	; 13
 48a:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 48e:	e0 ec       	ldi	r30, 0xC0	; 192
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	85 ff       	sbrs	r24, 5
 496:	fd cf       	rjmp	.-6      	; 0x492 <uart_putchar+0x30>
  UDR0 = c;
 498:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

  return 0;
}
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 4a4:	6f 92       	push	r6
 4a6:	7f 92       	push	r7
 4a8:	8f 92       	push	r8
 4aa:	9f 92       	push	r9
 4ac:	af 92       	push	r10
 4ae:	bf 92       	push	r11
 4b0:	cf 92       	push	r12
 4b2:	df 92       	push	r13
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 4c0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <rxp.1828>
 4c4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <rxp.1828+0x1>
 4c8:	23 2b       	or	r18, r19
 4ca:	09 f0       	breq	.+2      	; 0x4ce <uart_getchar+0x2a>
 4cc:	da c0       	rjmp	.+436    	; 0x682 <uart_getchar+0x1de>
 4ce:	8c 01       	movw	r16, r24
 4d0:	0f 2e       	mov	r0, r31
 4d2:	fc e3       	ldi	r31, 0x3C	; 60
 4d4:	8f 2e       	mov	r8, r31
 4d6:	f1 e0       	ldi	r31, 0x01	; 1
 4d8:	9f 2e       	mov	r9, r31
 4da:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 4dc:	c0 ec       	ldi	r28, 0xC0	; 192
 4de:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 4e0:	0f 2e       	mov	r0, r31
 4e2:	f6 ec       	ldi	r31, 0xC6	; 198
 4e4:	cf 2e       	mov	r12, r31
 4e6:	d1 2c       	mov	r13, r1
 4e8:	f0 2d       	mov	r31, r0
 4ea:	54 01       	movw	r10, r8
 4ec:	0f 2e       	mov	r0, r31
 4ee:	fb e3       	ldi	r31, 0x3B	; 59
 4f0:	6f 2e       	mov	r6, r31
 4f2:	f1 e0       	ldi	r31, 0x01	; 1
 4f4:	7f 2e       	mov	r7, r31
 4f6:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 4f8:	88 81       	ld	r24, Y
 4fa:	88 23       	and	r24, r24
 4fc:	ec f7       	brge	.-6      	; 0x4f8 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 4fe:	88 81       	ld	r24, Y
 500:	84 fd       	sbrc	r24, 4
 502:	d2 c0       	rjmp	.+420    	; 0x6a8 <uart_getchar+0x204>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 504:	88 81       	ld	r24, Y
 506:	83 fd       	sbrc	r24, 3
 508:	d2 c0       	rjmp	.+420    	; 0x6ae <uart_getchar+0x20a>
	  return _FDEV_ERR;
	c = UDR0;
 50a:	f6 01       	movw	r30, r12
 50c:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 50e:	8d 30       	cpi	r24, 0x0D	; 13
 510:	11 f0       	breq	.+4      	; 0x516 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 512:	8a 30       	cpi	r24, 0x0A	; 10
 514:	69 f4       	brne	.+26     	; 0x530 <uart_getchar+0x8c>
	  {
	    *cp = c;
 516:	8a e0       	ldi	r24, 0x0A	; 10
 518:	f4 01       	movw	r30, r8
 51a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 51c:	b8 01       	movw	r22, r16
 51e:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	    rxp = b;
 522:	8c e3       	ldi	r24, 0x3C	; 60
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <rxp.1828+0x1>
 52a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <rxp.1828>
	    break;
 52e:	a9 c0       	rjmp	.+338    	; 0x682 <uart_getchar+0x1de>
	  }
	else if (c == '\t')
 530:	89 30       	cpi	r24, 0x09	; 9
 532:	39 f0       	breq	.+14     	; 0x542 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 534:	90 ee       	ldi	r25, 0xE0	; 224
 536:	98 0f       	add	r25, r24
 538:	9f 35       	cpi	r25, 0x5F	; 95
 53a:	20 f0       	brcs	.+8      	; 0x544 <uart_getchar+0xa0>
 53c:	80 3a       	cpi	r24, 0xA0	; 160
 53e:	b8 f0       	brcs	.+46     	; 0x56e <uart_getchar+0xca>
 540:	01 c0       	rjmp	.+2      	; 0x544 <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 542:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 544:	fb e8       	ldi	r31, 0x8B	; 139
 546:	8f 16       	cp	r8, r31
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	9f 06       	cpc	r9, r31
 54c:	29 f4       	brne	.+10     	; 0x558 <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 54e:	b8 01       	movw	r22, r16
 550:	87 e0       	ldi	r24, 0x07	; 7
 552:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
 556:	d0 cf       	rjmp	.-96     	; 0x4f8 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 558:	74 01       	movw	r14, r8
 55a:	9f ef       	ldi	r25, 0xFF	; 255
 55c:	e9 1a       	sub	r14, r25
 55e:	f9 0a       	sbc	r15, r25
 560:	f4 01       	movw	r30, r8
 562:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 564:	b8 01       	movw	r22, r16
 566:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 56a:	47 01       	movw	r8, r14
 56c:	c5 cf       	rjmp	.-118    	; 0x4f8 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 56e:	82 31       	cpi	r24, 0x12	; 18
 570:	d1 f1       	breq	.+116    	; 0x5e6 <uart_getchar+0x142>
 572:	30 f4       	brcc	.+12     	; 0x580 <uart_getchar+0xdc>
 574:	83 30       	cpi	r24, 0x03	; 3
 576:	09 f4       	brne	.+2      	; 0x57a <uart_getchar+0xd6>
 578:	9d c0       	rjmp	.+314    	; 0x6b4 <uart_getchar+0x210>
 57a:	88 30       	cpi	r24, 0x08	; 8
 57c:	e9 f0       	breq	.+58     	; 0x5b8 <uart_getchar+0x114>
 57e:	bc cf       	rjmp	.-136    	; 0x4f8 <uart_getchar+0x54>
 580:	87 31       	cpi	r24, 0x17	; 23
 582:	29 f0       	breq	.+10     	; 0x58e <uart_getchar+0xea>
 584:	8f 37       	cpi	r24, 0x7F	; 127
 586:	c1 f0       	breq	.+48     	; 0x5b8 <uart_getchar+0x114>
 588:	85 31       	cpi	r24, 0x15	; 21
 58a:	79 f0       	breq	.+30     	; 0x5aa <uart_getchar+0x106>
 58c:	b5 cf       	rjmp	.-150    	; 0x4f8 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 58e:	fc e3       	ldi	r31, 0x3C	; 60
 590:	8f 16       	cp	r8, r31
 592:	f1 e0       	ldi	r31, 0x01	; 1
 594:	9f 06       	cpc	r9, r31
 596:	09 f0       	breq	.+2      	; 0x59a <uart_getchar+0xf6>
 598:	08 f4       	brcc	.+2      	; 0x59c <uart_getchar+0xf8>
 59a:	ae cf       	rjmp	.-164    	; 0x4f8 <uart_getchar+0x54>
 59c:	f4 01       	movw	r30, r8
 59e:	31 97       	sbiw	r30, 0x01	; 1
 5a0:	80 81       	ld	r24, Z
 5a2:	80 32       	cpi	r24, 0x20	; 32
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <uart_getchar+0x104>
 5a6:	52 c0       	rjmp	.+164    	; 0x64c <uart_getchar+0x1a8>
 5a8:	a7 cf       	rjmp	.-178    	; 0x4f8 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 5aa:	8c e3       	ldi	r24, 0x3C	; 60
 5ac:	88 16       	cp	r8, r24
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	98 06       	cpc	r9, r24
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <uart_getchar+0x112>
 5b4:	98 f5       	brcc	.+102    	; 0x61c <uart_getchar+0x178>
 5b6:	a0 cf       	rjmp	.-192    	; 0x4f8 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 5b8:	9c e3       	ldi	r25, 0x3C	; 60
 5ba:	89 16       	cp	r8, r25
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	99 06       	cpc	r9, r25
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <uart_getchar+0x120>
 5c2:	08 f4       	brcc	.+2      	; 0x5c6 <uart_getchar+0x122>
 5c4:	99 cf       	rjmp	.-206    	; 0x4f8 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 5c6:	b8 01       	movw	r22, r16
 5c8:	88 e0       	ldi	r24, 0x08	; 8
 5ca:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
		uart_putchar(' ', stream);
 5ce:	b8 01       	movw	r22, r16
 5d0:	80 e2       	ldi	r24, 0x20	; 32
 5d2:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
		uart_putchar('\b', stream);
 5d6:	b8 01       	movw	r22, r16
 5d8:	88 e0       	ldi	r24, 0x08	; 8
 5da:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
		cp--;
 5de:	e1 e0       	ldi	r30, 0x01	; 1
 5e0:	8e 1a       	sub	r8, r30
 5e2:	91 08       	sbc	r9, r1
 5e4:	89 cf       	rjmp	.-238    	; 0x4f8 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 5e6:	b8 01       	movw	r22, r16
 5e8:	8d e0       	ldi	r24, 0x0D	; 13
 5ea:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 5ee:	fc e3       	ldi	r31, 0x3C	; 60
 5f0:	8f 16       	cp	r8, r31
 5f2:	f1 e0       	ldi	r31, 0x01	; 1
 5f4:	9f 06       	cpc	r9, r31
 5f6:	09 f0       	breq	.+2      	; 0x5fa <uart_getchar+0x156>
 5f8:	08 f4       	brcc	.+2      	; 0x5fc <uart_getchar+0x158>
 5fa:	7e cf       	rjmp	.-260    	; 0x4f8 <uart_getchar+0x54>
 5fc:	0f 2e       	mov	r0, r31
 5fe:	fc e3       	ldi	r31, 0x3C	; 60
 600:	ef 2e       	mov	r14, r31
 602:	f1 e0       	ldi	r31, 0x01	; 1
 604:	ff 2e       	mov	r15, r31
 606:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 608:	b8 01       	movw	r22, r16
 60a:	f7 01       	movw	r30, r14
 60c:	81 91       	ld	r24, Z+
 60e:	7f 01       	movw	r14, r30
 610:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 614:	8e 14       	cp	r8, r14
 616:	9f 04       	cpc	r9, r15
 618:	b9 f7       	brne	.-18     	; 0x608 <uart_getchar+0x164>
 61a:	6e cf       	rjmp	.-292    	; 0x4f8 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 61c:	b8 01       	movw	r22, r16
 61e:	88 e0       	ldi	r24, 0x08	; 8
 620:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
		uart_putchar(' ', stream);
 624:	b8 01       	movw	r22, r16
 626:	80 e2       	ldi	r24, 0x20	; 32
 628:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
		uart_putchar('\b', stream);
 62c:	b8 01       	movw	r22, r16
 62e:	88 e0       	ldi	r24, 0x08	; 8
 630:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
		cp--;
 634:	f1 e0       	ldi	r31, 0x01	; 1
 636:	8f 1a       	sub	r8, r31
 638:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 63a:	8c e3       	ldi	r24, 0x3C	; 60
 63c:	88 16       	cp	r8, r24
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	98 06       	cpc	r9, r24
 642:	61 f7       	brne	.-40     	; 0x61c <uart_getchar+0x178>
 644:	f3 01       	movw	r30, r6
 646:	31 96       	adiw	r30, 0x01	; 1
 648:	4f 01       	movw	r8, r30
 64a:	56 cf       	rjmp	.-340    	; 0x4f8 <uart_getchar+0x54>
 64c:	74 01       	movw	r14, r8
 64e:	f1 e0       	ldi	r31, 0x01	; 1
 650:	ef 1a       	sub	r14, r31
 652:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 654:	b8 01       	movw	r22, r16
 656:	88 e0       	ldi	r24, 0x08	; 8
 658:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
		uart_putchar(' ', stream);
 65c:	b8 01       	movw	r22, r16
 65e:	80 e2       	ldi	r24, 0x20	; 32
 660:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
		uart_putchar('\b', stream);
 664:	b8 01       	movw	r22, r16
 666:	88 e0       	ldi	r24, 0x08	; 8
 668:	0e 94 31 02 	call	0x462	; 0x462 <uart_putchar>
		cp--;
 66c:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 66e:	ea 14       	cp	r14, r10
 670:	fb 04       	cpc	r15, r11
 672:	09 f4       	brne	.+2      	; 0x676 <uart_getchar+0x1d2>
 674:	41 cf       	rjmp	.-382    	; 0x4f8 <uart_getchar+0x54>
 676:	f7 01       	movw	r30, r14
 678:	82 91       	ld	r24, -Z
 67a:	7f 01       	movw	r14, r30
 67c:	80 32       	cpi	r24, 0x20	; 32
 67e:	51 f7       	brne	.-44     	; 0x654 <uart_getchar+0x1b0>
 680:	3b cf       	rjmp	.-394    	; 0x4f8 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 682:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <rxp.1828>
 686:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <rxp.1828+0x1>
 68a:	cf 01       	movw	r24, r30
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <rxp.1828+0x1>
 692:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <rxp.1828>
 696:	80 81       	ld	r24, Z
  if (c == '\n')
 698:	8a 30       	cpi	r24, 0x0A	; 10
 69a:	21 f4       	brne	.+8      	; 0x6a4 <uart_getchar+0x200>
    rxp = 0;
 69c:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <rxp.1828+0x1>
 6a0:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <rxp.1828>

  return c;
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <uart_getchar+0x214>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 6a8:	8e ef       	ldi	r24, 0xFE	; 254
 6aa:	9f ef       	ldi	r25, 0xFF	; 255
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <uart_getchar+0x214>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	9f ef       	ldi	r25, 0xFF	; 255
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <uart_getchar+0x214>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 6b4:	8f ef       	ldi	r24, 0xFF	; 255
 6b6:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	1f 91       	pop	r17
 6be:	0f 91       	pop	r16
 6c0:	ff 90       	pop	r15
 6c2:	ef 90       	pop	r14
 6c4:	df 90       	pop	r13
 6c6:	cf 90       	pop	r12
 6c8:	bf 90       	pop	r11
 6ca:	af 90       	pop	r10
 6cc:	9f 90       	pop	r9
 6ce:	8f 90       	pop	r8
 6d0:	7f 90       	pop	r7
 6d2:	6f 90       	pop	r6
 6d4:	08 95       	ret

000006d6 <__subsf3>:
 6d6:	50 58       	subi	r21, 0x80	; 128

000006d8 <__addsf3>:
 6d8:	bb 27       	eor	r27, r27
 6da:	aa 27       	eor	r26, r26
 6dc:	0e 94 83 03 	call	0x706	; 0x706 <__addsf3x>
 6e0:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_round>
 6e4:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_pscA>
 6e8:	38 f0       	brcs	.+14     	; 0x6f8 <__addsf3+0x20>
 6ea:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_pscB>
 6ee:	20 f0       	brcs	.+8      	; 0x6f8 <__addsf3+0x20>
 6f0:	39 f4       	brne	.+14     	; 0x700 <__addsf3+0x28>
 6f2:	9f 3f       	cpi	r25, 0xFF	; 255
 6f4:	19 f4       	brne	.+6      	; 0x6fc <__addsf3+0x24>
 6f6:	26 f4       	brtc	.+8      	; 0x700 <__addsf3+0x28>
 6f8:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_nan>
 6fc:	0e f4       	brtc	.+2      	; 0x700 <__addsf3+0x28>
 6fe:	e0 95       	com	r30
 700:	e7 fb       	bst	r30, 7
 702:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_inf>

00000706 <__addsf3x>:
 706:	e9 2f       	mov	r30, r25
 708:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_split3>
 70c:	58 f3       	brcs	.-42     	; 0x6e4 <__addsf3+0xc>
 70e:	ba 17       	cp	r27, r26
 710:	62 07       	cpc	r22, r18
 712:	73 07       	cpc	r23, r19
 714:	84 07       	cpc	r24, r20
 716:	95 07       	cpc	r25, r21
 718:	20 f0       	brcs	.+8      	; 0x722 <__addsf3x+0x1c>
 71a:	79 f4       	brne	.+30     	; 0x73a <__addsf3x+0x34>
 71c:	a6 f5       	brtc	.+104    	; 0x786 <__addsf3x+0x80>
 71e:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_zero>
 722:	0e f4       	brtc	.+2      	; 0x726 <__addsf3x+0x20>
 724:	e0 95       	com	r30
 726:	0b 2e       	mov	r0, r27
 728:	ba 2f       	mov	r27, r26
 72a:	a0 2d       	mov	r26, r0
 72c:	0b 01       	movw	r0, r22
 72e:	b9 01       	movw	r22, r18
 730:	90 01       	movw	r18, r0
 732:	0c 01       	movw	r0, r24
 734:	ca 01       	movw	r24, r20
 736:	a0 01       	movw	r20, r0
 738:	11 24       	eor	r1, r1
 73a:	ff 27       	eor	r31, r31
 73c:	59 1b       	sub	r21, r25
 73e:	99 f0       	breq	.+38     	; 0x766 <__addsf3x+0x60>
 740:	59 3f       	cpi	r21, 0xF9	; 249
 742:	50 f4       	brcc	.+20     	; 0x758 <__addsf3x+0x52>
 744:	50 3e       	cpi	r21, 0xE0	; 224
 746:	68 f1       	brcs	.+90     	; 0x7a2 <__addsf3x+0x9c>
 748:	1a 16       	cp	r1, r26
 74a:	f0 40       	sbci	r31, 0x00	; 0
 74c:	a2 2f       	mov	r26, r18
 74e:	23 2f       	mov	r18, r19
 750:	34 2f       	mov	r19, r20
 752:	44 27       	eor	r20, r20
 754:	58 5f       	subi	r21, 0xF8	; 248
 756:	f3 cf       	rjmp	.-26     	; 0x73e <__addsf3x+0x38>
 758:	46 95       	lsr	r20
 75a:	37 95       	ror	r19
 75c:	27 95       	ror	r18
 75e:	a7 95       	ror	r26
 760:	f0 40       	sbci	r31, 0x00	; 0
 762:	53 95       	inc	r21
 764:	c9 f7       	brne	.-14     	; 0x758 <__addsf3x+0x52>
 766:	7e f4       	brtc	.+30     	; 0x786 <__addsf3x+0x80>
 768:	1f 16       	cp	r1, r31
 76a:	ba 0b       	sbc	r27, r26
 76c:	62 0b       	sbc	r22, r18
 76e:	73 0b       	sbc	r23, r19
 770:	84 0b       	sbc	r24, r20
 772:	ba f0       	brmi	.+46     	; 0x7a2 <__addsf3x+0x9c>
 774:	91 50       	subi	r25, 0x01	; 1
 776:	a1 f0       	breq	.+40     	; 0x7a0 <__addsf3x+0x9a>
 778:	ff 0f       	add	r31, r31
 77a:	bb 1f       	adc	r27, r27
 77c:	66 1f       	adc	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	c2 f7       	brpl	.-16     	; 0x774 <__addsf3x+0x6e>
 784:	0e c0       	rjmp	.+28     	; 0x7a2 <__addsf3x+0x9c>
 786:	ba 0f       	add	r27, r26
 788:	62 1f       	adc	r22, r18
 78a:	73 1f       	adc	r23, r19
 78c:	84 1f       	adc	r24, r20
 78e:	48 f4       	brcc	.+18     	; 0x7a2 <__addsf3x+0x9c>
 790:	87 95       	ror	r24
 792:	77 95       	ror	r23
 794:	67 95       	ror	r22
 796:	b7 95       	ror	r27
 798:	f7 95       	ror	r31
 79a:	9e 3f       	cpi	r25, 0xFE	; 254
 79c:	08 f0       	brcs	.+2      	; 0x7a0 <__addsf3x+0x9a>
 79e:	b0 cf       	rjmp	.-160    	; 0x700 <__addsf3+0x28>
 7a0:	93 95       	inc	r25
 7a2:	88 0f       	add	r24, r24
 7a4:	08 f0       	brcs	.+2      	; 0x7a8 <__addsf3x+0xa2>
 7a6:	99 27       	eor	r25, r25
 7a8:	ee 0f       	add	r30, r30
 7aa:	97 95       	ror	r25
 7ac:	87 95       	ror	r24
 7ae:	08 95       	ret

000007b0 <__divsf3>:
 7b0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__divsf3x>
 7b4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_round>
 7b8:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_pscB>
 7bc:	58 f0       	brcs	.+22     	; 0x7d4 <__divsf3+0x24>
 7be:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_pscA>
 7c2:	40 f0       	brcs	.+16     	; 0x7d4 <__divsf3+0x24>
 7c4:	29 f4       	brne	.+10     	; 0x7d0 <__divsf3+0x20>
 7c6:	5f 3f       	cpi	r21, 0xFF	; 255
 7c8:	29 f0       	breq	.+10     	; 0x7d4 <__divsf3+0x24>
 7ca:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_inf>
 7ce:	51 11       	cpse	r21, r1
 7d0:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_szero>
 7d4:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_nan>

000007d8 <__divsf3x>:
 7d8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_split3>
 7dc:	68 f3       	brcs	.-38     	; 0x7b8 <__divsf3+0x8>

000007de <__divsf3_pse>:
 7de:	99 23       	and	r25, r25
 7e0:	b1 f3       	breq	.-20     	; 0x7ce <__divsf3+0x1e>
 7e2:	55 23       	and	r21, r21
 7e4:	91 f3       	breq	.-28     	; 0x7ca <__divsf3+0x1a>
 7e6:	95 1b       	sub	r25, r21
 7e8:	55 0b       	sbc	r21, r21
 7ea:	bb 27       	eor	r27, r27
 7ec:	aa 27       	eor	r26, r26
 7ee:	62 17       	cp	r22, r18
 7f0:	73 07       	cpc	r23, r19
 7f2:	84 07       	cpc	r24, r20
 7f4:	38 f0       	brcs	.+14     	; 0x804 <__divsf3_pse+0x26>
 7f6:	9f 5f       	subi	r25, 0xFF	; 255
 7f8:	5f 4f       	sbci	r21, 0xFF	; 255
 7fa:	22 0f       	add	r18, r18
 7fc:	33 1f       	adc	r19, r19
 7fe:	44 1f       	adc	r20, r20
 800:	aa 1f       	adc	r26, r26
 802:	a9 f3       	breq	.-22     	; 0x7ee <__divsf3_pse+0x10>
 804:	35 d0       	rcall	.+106    	; 0x870 <__divsf3_pse+0x92>
 806:	0e 2e       	mov	r0, r30
 808:	3a f0       	brmi	.+14     	; 0x818 <__divsf3_pse+0x3a>
 80a:	e0 e8       	ldi	r30, 0x80	; 128
 80c:	32 d0       	rcall	.+100    	; 0x872 <__divsf3_pse+0x94>
 80e:	91 50       	subi	r25, 0x01	; 1
 810:	50 40       	sbci	r21, 0x00	; 0
 812:	e6 95       	lsr	r30
 814:	00 1c       	adc	r0, r0
 816:	ca f7       	brpl	.-14     	; 0x80a <__divsf3_pse+0x2c>
 818:	2b d0       	rcall	.+86     	; 0x870 <__divsf3_pse+0x92>
 81a:	fe 2f       	mov	r31, r30
 81c:	29 d0       	rcall	.+82     	; 0x870 <__divsf3_pse+0x92>
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	bb 1f       	adc	r27, r27
 826:	26 17       	cp	r18, r22
 828:	37 07       	cpc	r19, r23
 82a:	48 07       	cpc	r20, r24
 82c:	ab 07       	cpc	r26, r27
 82e:	b0 e8       	ldi	r27, 0x80	; 128
 830:	09 f0       	breq	.+2      	; 0x834 <__divsf3_pse+0x56>
 832:	bb 0b       	sbc	r27, r27
 834:	80 2d       	mov	r24, r0
 836:	bf 01       	movw	r22, r30
 838:	ff 27       	eor	r31, r31
 83a:	93 58       	subi	r25, 0x83	; 131
 83c:	5f 4f       	sbci	r21, 0xFF	; 255
 83e:	3a f0       	brmi	.+14     	; 0x84e <__divsf3_pse+0x70>
 840:	9e 3f       	cpi	r25, 0xFE	; 254
 842:	51 05       	cpc	r21, r1
 844:	78 f0       	brcs	.+30     	; 0x864 <__divsf3_pse+0x86>
 846:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_inf>
 84a:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_szero>
 84e:	5f 3f       	cpi	r21, 0xFF	; 255
 850:	e4 f3       	brlt	.-8      	; 0x84a <__divsf3_pse+0x6c>
 852:	98 3e       	cpi	r25, 0xE8	; 232
 854:	d4 f3       	brlt	.-12     	; 0x84a <__divsf3_pse+0x6c>
 856:	86 95       	lsr	r24
 858:	77 95       	ror	r23
 85a:	67 95       	ror	r22
 85c:	b7 95       	ror	r27
 85e:	f7 95       	ror	r31
 860:	9f 5f       	subi	r25, 0xFF	; 255
 862:	c9 f7       	brne	.-14     	; 0x856 <__divsf3_pse+0x78>
 864:	88 0f       	add	r24, r24
 866:	91 1d       	adc	r25, r1
 868:	96 95       	lsr	r25
 86a:	87 95       	ror	r24
 86c:	97 f9       	bld	r25, 7
 86e:	08 95       	ret
 870:	e1 e0       	ldi	r30, 0x01	; 1
 872:	66 0f       	add	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	bb 1f       	adc	r27, r27
 87a:	62 17       	cp	r22, r18
 87c:	73 07       	cpc	r23, r19
 87e:	84 07       	cpc	r24, r20
 880:	ba 07       	cpc	r27, r26
 882:	20 f0       	brcs	.+8      	; 0x88c <__divsf3_pse+0xae>
 884:	62 1b       	sub	r22, r18
 886:	73 0b       	sbc	r23, r19
 888:	84 0b       	sbc	r24, r20
 88a:	ba 0b       	sbc	r27, r26
 88c:	ee 1f       	adc	r30, r30
 88e:	88 f7       	brcc	.-30     	; 0x872 <__divsf3_pse+0x94>
 890:	e0 95       	com	r30
 892:	08 95       	ret

00000894 <__fixsfsi>:
 894:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fixunssfsi>
 898:	68 94       	set
 89a:	b1 11       	cpse	r27, r1
 89c:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_szero>
 8a0:	08 95       	ret

000008a2 <__fixunssfsi>:
 8a2:	0e 94 ed 04 	call	0x9da	; 0x9da <__fp_splitA>
 8a6:	88 f0       	brcs	.+34     	; 0x8ca <__fixunssfsi+0x28>
 8a8:	9f 57       	subi	r25, 0x7F	; 127
 8aa:	98 f0       	brcs	.+38     	; 0x8d2 <__fixunssfsi+0x30>
 8ac:	b9 2f       	mov	r27, r25
 8ae:	99 27       	eor	r25, r25
 8b0:	b7 51       	subi	r27, 0x17	; 23
 8b2:	b0 f0       	brcs	.+44     	; 0x8e0 <__fixunssfsi+0x3e>
 8b4:	e1 f0       	breq	.+56     	; 0x8ee <__fixunssfsi+0x4c>
 8b6:	66 0f       	add	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	1a f0       	brmi	.+6      	; 0x8c6 <__fixunssfsi+0x24>
 8c0:	ba 95       	dec	r27
 8c2:	c9 f7       	brne	.-14     	; 0x8b6 <__fixunssfsi+0x14>
 8c4:	14 c0       	rjmp	.+40     	; 0x8ee <__fixunssfsi+0x4c>
 8c6:	b1 30       	cpi	r27, 0x01	; 1
 8c8:	91 f0       	breq	.+36     	; 0x8ee <__fixunssfsi+0x4c>
 8ca:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_zero>
 8ce:	b1 e0       	ldi	r27, 0x01	; 1
 8d0:	08 95       	ret
 8d2:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_zero>
 8d6:	67 2f       	mov	r22, r23
 8d8:	78 2f       	mov	r23, r24
 8da:	88 27       	eor	r24, r24
 8dc:	b8 5f       	subi	r27, 0xF8	; 248
 8de:	39 f0       	breq	.+14     	; 0x8ee <__fixunssfsi+0x4c>
 8e0:	b9 3f       	cpi	r27, 0xF9	; 249
 8e2:	cc f3       	brlt	.-14     	; 0x8d6 <__fixunssfsi+0x34>
 8e4:	86 95       	lsr	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	b3 95       	inc	r27
 8ec:	d9 f7       	brne	.-10     	; 0x8e4 <__fixunssfsi+0x42>
 8ee:	3e f4       	brtc	.+14     	; 0x8fe <__fixunssfsi+0x5c>
 8f0:	90 95       	com	r25
 8f2:	80 95       	com	r24
 8f4:	70 95       	com	r23
 8f6:	61 95       	neg	r22
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	08 95       	ret

00000900 <__floatunsisf>:
 900:	e8 94       	clt
 902:	09 c0       	rjmp	.+18     	; 0x916 <__floatsisf+0x12>

00000904 <__floatsisf>:
 904:	97 fb       	bst	r25, 7
 906:	3e f4       	brtc	.+14     	; 0x916 <__floatsisf+0x12>
 908:	90 95       	com	r25
 90a:	80 95       	com	r24
 90c:	70 95       	com	r23
 90e:	61 95       	neg	r22
 910:	7f 4f       	sbci	r23, 0xFF	; 255
 912:	8f 4f       	sbci	r24, 0xFF	; 255
 914:	9f 4f       	sbci	r25, 0xFF	; 255
 916:	99 23       	and	r25, r25
 918:	a9 f0       	breq	.+42     	; 0x944 <__floatsisf+0x40>
 91a:	f9 2f       	mov	r31, r25
 91c:	96 e9       	ldi	r25, 0x96	; 150
 91e:	bb 27       	eor	r27, r27
 920:	93 95       	inc	r25
 922:	f6 95       	lsr	r31
 924:	87 95       	ror	r24
 926:	77 95       	ror	r23
 928:	67 95       	ror	r22
 92a:	b7 95       	ror	r27
 92c:	f1 11       	cpse	r31, r1
 92e:	f8 cf       	rjmp	.-16     	; 0x920 <__floatsisf+0x1c>
 930:	fa f4       	brpl	.+62     	; 0x970 <__floatsisf+0x6c>
 932:	bb 0f       	add	r27, r27
 934:	11 f4       	brne	.+4      	; 0x93a <__floatsisf+0x36>
 936:	60 ff       	sbrs	r22, 0
 938:	1b c0       	rjmp	.+54     	; 0x970 <__floatsisf+0x6c>
 93a:	6f 5f       	subi	r22, 0xFF	; 255
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	16 c0       	rjmp	.+44     	; 0x970 <__floatsisf+0x6c>
 944:	88 23       	and	r24, r24
 946:	11 f0       	breq	.+4      	; 0x94c <__floatsisf+0x48>
 948:	96 e9       	ldi	r25, 0x96	; 150
 94a:	11 c0       	rjmp	.+34     	; 0x96e <__floatsisf+0x6a>
 94c:	77 23       	and	r23, r23
 94e:	21 f0       	breq	.+8      	; 0x958 <__floatsisf+0x54>
 950:	9e e8       	ldi	r25, 0x8E	; 142
 952:	87 2f       	mov	r24, r23
 954:	76 2f       	mov	r23, r22
 956:	05 c0       	rjmp	.+10     	; 0x962 <__floatsisf+0x5e>
 958:	66 23       	and	r22, r22
 95a:	71 f0       	breq	.+28     	; 0x978 <__floatsisf+0x74>
 95c:	96 e8       	ldi	r25, 0x86	; 134
 95e:	86 2f       	mov	r24, r22
 960:	70 e0       	ldi	r23, 0x00	; 0
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	2a f0       	brmi	.+10     	; 0x970 <__floatsisf+0x6c>
 966:	9a 95       	dec	r25
 968:	66 0f       	add	r22, r22
 96a:	77 1f       	adc	r23, r23
 96c:	88 1f       	adc	r24, r24
 96e:	da f7       	brpl	.-10     	; 0x966 <__floatsisf+0x62>
 970:	88 0f       	add	r24, r24
 972:	96 95       	lsr	r25
 974:	87 95       	ror	r24
 976:	97 f9       	bld	r25, 7
 978:	08 95       	ret

0000097a <__fp_inf>:
 97a:	97 f9       	bld	r25, 7
 97c:	9f 67       	ori	r25, 0x7F	; 127
 97e:	80 e8       	ldi	r24, 0x80	; 128
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	08 95       	ret

00000986 <__fp_nan>:
 986:	9f ef       	ldi	r25, 0xFF	; 255
 988:	80 ec       	ldi	r24, 0xC0	; 192
 98a:	08 95       	ret

0000098c <__fp_pscA>:
 98c:	00 24       	eor	r0, r0
 98e:	0a 94       	dec	r0
 990:	16 16       	cp	r1, r22
 992:	17 06       	cpc	r1, r23
 994:	18 06       	cpc	r1, r24
 996:	09 06       	cpc	r0, r25
 998:	08 95       	ret

0000099a <__fp_pscB>:
 99a:	00 24       	eor	r0, r0
 99c:	0a 94       	dec	r0
 99e:	12 16       	cp	r1, r18
 9a0:	13 06       	cpc	r1, r19
 9a2:	14 06       	cpc	r1, r20
 9a4:	05 06       	cpc	r0, r21
 9a6:	08 95       	ret

000009a8 <__fp_round>:
 9a8:	09 2e       	mov	r0, r25
 9aa:	03 94       	inc	r0
 9ac:	00 0c       	add	r0, r0
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__fp_round+0xc>
 9b0:	88 23       	and	r24, r24
 9b2:	52 f0       	brmi	.+20     	; 0x9c8 <__fp_round+0x20>
 9b4:	bb 0f       	add	r27, r27
 9b6:	40 f4       	brcc	.+16     	; 0x9c8 <__fp_round+0x20>
 9b8:	bf 2b       	or	r27, r31
 9ba:	11 f4       	brne	.+4      	; 0x9c0 <__fp_round+0x18>
 9bc:	60 ff       	sbrs	r22, 0
 9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__fp_round+0x20>
 9c0:	6f 5f       	subi	r22, 0xFF	; 255
 9c2:	7f 4f       	sbci	r23, 0xFF	; 255
 9c4:	8f 4f       	sbci	r24, 0xFF	; 255
 9c6:	9f 4f       	sbci	r25, 0xFF	; 255
 9c8:	08 95       	ret

000009ca <__fp_split3>:
 9ca:	57 fd       	sbrc	r21, 7
 9cc:	90 58       	subi	r25, 0x80	; 128
 9ce:	44 0f       	add	r20, r20
 9d0:	55 1f       	adc	r21, r21
 9d2:	59 f0       	breq	.+22     	; 0x9ea <__fp_splitA+0x10>
 9d4:	5f 3f       	cpi	r21, 0xFF	; 255
 9d6:	71 f0       	breq	.+28     	; 0x9f4 <__fp_splitA+0x1a>
 9d8:	47 95       	ror	r20

000009da <__fp_splitA>:
 9da:	88 0f       	add	r24, r24
 9dc:	97 fb       	bst	r25, 7
 9de:	99 1f       	adc	r25, r25
 9e0:	61 f0       	breq	.+24     	; 0x9fa <__fp_splitA+0x20>
 9e2:	9f 3f       	cpi	r25, 0xFF	; 255
 9e4:	79 f0       	breq	.+30     	; 0xa04 <__fp_splitA+0x2a>
 9e6:	87 95       	ror	r24
 9e8:	08 95       	ret
 9ea:	12 16       	cp	r1, r18
 9ec:	13 06       	cpc	r1, r19
 9ee:	14 06       	cpc	r1, r20
 9f0:	55 1f       	adc	r21, r21
 9f2:	f2 cf       	rjmp	.-28     	; 0x9d8 <__fp_split3+0xe>
 9f4:	46 95       	lsr	r20
 9f6:	f1 df       	rcall	.-30     	; 0x9da <__fp_splitA>
 9f8:	08 c0       	rjmp	.+16     	; 0xa0a <__fp_splitA+0x30>
 9fa:	16 16       	cp	r1, r22
 9fc:	17 06       	cpc	r1, r23
 9fe:	18 06       	cpc	r1, r24
 a00:	99 1f       	adc	r25, r25
 a02:	f1 cf       	rjmp	.-30     	; 0x9e6 <__fp_splitA+0xc>
 a04:	86 95       	lsr	r24
 a06:	71 05       	cpc	r23, r1
 a08:	61 05       	cpc	r22, r1
 a0a:	08 94       	sec
 a0c:	08 95       	ret

00000a0e <__fp_zero>:
 a0e:	e8 94       	clt

00000a10 <__fp_szero>:
 a10:	bb 27       	eor	r27, r27
 a12:	66 27       	eor	r22, r22
 a14:	77 27       	eor	r23, r23
 a16:	cb 01       	movw	r24, r22
 a18:	97 f9       	bld	r25, 7
 a1a:	08 95       	ret

00000a1c <__mulsf3>:
 a1c:	0e 94 21 05 	call	0xa42	; 0xa42 <__mulsf3x>
 a20:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_round>
 a24:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_pscA>
 a28:	38 f0       	brcs	.+14     	; 0xa38 <__mulsf3+0x1c>
 a2a:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_pscB>
 a2e:	20 f0       	brcs	.+8      	; 0xa38 <__mulsf3+0x1c>
 a30:	95 23       	and	r25, r21
 a32:	11 f0       	breq	.+4      	; 0xa38 <__mulsf3+0x1c>
 a34:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_inf>
 a38:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_nan>
 a3c:	11 24       	eor	r1, r1
 a3e:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_szero>

00000a42 <__mulsf3x>:
 a42:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_split3>
 a46:	70 f3       	brcs	.-36     	; 0xa24 <__mulsf3+0x8>

00000a48 <__mulsf3_pse>:
 a48:	95 9f       	mul	r25, r21
 a4a:	c1 f3       	breq	.-16     	; 0xa3c <__mulsf3+0x20>
 a4c:	95 0f       	add	r25, r21
 a4e:	50 e0       	ldi	r21, 0x00	; 0
 a50:	55 1f       	adc	r21, r21
 a52:	62 9f       	mul	r22, r18
 a54:	f0 01       	movw	r30, r0
 a56:	72 9f       	mul	r23, r18
 a58:	bb 27       	eor	r27, r27
 a5a:	f0 0d       	add	r31, r0
 a5c:	b1 1d       	adc	r27, r1
 a5e:	63 9f       	mul	r22, r19
 a60:	aa 27       	eor	r26, r26
 a62:	f0 0d       	add	r31, r0
 a64:	b1 1d       	adc	r27, r1
 a66:	aa 1f       	adc	r26, r26
 a68:	64 9f       	mul	r22, r20
 a6a:	66 27       	eor	r22, r22
 a6c:	b0 0d       	add	r27, r0
 a6e:	a1 1d       	adc	r26, r1
 a70:	66 1f       	adc	r22, r22
 a72:	82 9f       	mul	r24, r18
 a74:	22 27       	eor	r18, r18
 a76:	b0 0d       	add	r27, r0
 a78:	a1 1d       	adc	r26, r1
 a7a:	62 1f       	adc	r22, r18
 a7c:	73 9f       	mul	r23, r19
 a7e:	b0 0d       	add	r27, r0
 a80:	a1 1d       	adc	r26, r1
 a82:	62 1f       	adc	r22, r18
 a84:	83 9f       	mul	r24, r19
 a86:	a0 0d       	add	r26, r0
 a88:	61 1d       	adc	r22, r1
 a8a:	22 1f       	adc	r18, r18
 a8c:	74 9f       	mul	r23, r20
 a8e:	33 27       	eor	r19, r19
 a90:	a0 0d       	add	r26, r0
 a92:	61 1d       	adc	r22, r1
 a94:	23 1f       	adc	r18, r19
 a96:	84 9f       	mul	r24, r20
 a98:	60 0d       	add	r22, r0
 a9a:	21 1d       	adc	r18, r1
 a9c:	82 2f       	mov	r24, r18
 a9e:	76 2f       	mov	r23, r22
 aa0:	6a 2f       	mov	r22, r26
 aa2:	11 24       	eor	r1, r1
 aa4:	9f 57       	subi	r25, 0x7F	; 127
 aa6:	50 40       	sbci	r21, 0x00	; 0
 aa8:	9a f0       	brmi	.+38     	; 0xad0 <__mulsf3_pse+0x88>
 aaa:	f1 f0       	breq	.+60     	; 0xae8 <__mulsf3_pse+0xa0>
 aac:	88 23       	and	r24, r24
 aae:	4a f0       	brmi	.+18     	; 0xac2 <__mulsf3_pse+0x7a>
 ab0:	ee 0f       	add	r30, r30
 ab2:	ff 1f       	adc	r31, r31
 ab4:	bb 1f       	adc	r27, r27
 ab6:	66 1f       	adc	r22, r22
 ab8:	77 1f       	adc	r23, r23
 aba:	88 1f       	adc	r24, r24
 abc:	91 50       	subi	r25, 0x01	; 1
 abe:	50 40       	sbci	r21, 0x00	; 0
 ac0:	a9 f7       	brne	.-22     	; 0xaac <__mulsf3_pse+0x64>
 ac2:	9e 3f       	cpi	r25, 0xFE	; 254
 ac4:	51 05       	cpc	r21, r1
 ac6:	80 f0       	brcs	.+32     	; 0xae8 <__mulsf3_pse+0xa0>
 ac8:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_inf>
 acc:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_szero>
 ad0:	5f 3f       	cpi	r21, 0xFF	; 255
 ad2:	e4 f3       	brlt	.-8      	; 0xacc <__mulsf3_pse+0x84>
 ad4:	98 3e       	cpi	r25, 0xE8	; 232
 ad6:	d4 f3       	brlt	.-12     	; 0xacc <__mulsf3_pse+0x84>
 ad8:	86 95       	lsr	r24
 ada:	77 95       	ror	r23
 adc:	67 95       	ror	r22
 ade:	b7 95       	ror	r27
 ae0:	f7 95       	ror	r31
 ae2:	e7 95       	ror	r30
 ae4:	9f 5f       	subi	r25, 0xFF	; 255
 ae6:	c1 f7       	brne	.-16     	; 0xad8 <__mulsf3_pse+0x90>
 ae8:	fe 2b       	or	r31, r30
 aea:	88 0f       	add	r24, r24
 aec:	91 1d       	adc	r25, r1
 aee:	96 95       	lsr	r25
 af0:	87 95       	ror	r24
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret

00000af6 <__divmodhi4>:
 af6:	97 fb       	bst	r25, 7
 af8:	07 2e       	mov	r0, r23
 afa:	16 f4       	brtc	.+4      	; 0xb00 <__divmodhi4+0xa>
 afc:	00 94       	com	r0
 afe:	07 d0       	rcall	.+14     	; 0xb0e <__divmodhi4_neg1>
 b00:	77 fd       	sbrc	r23, 7
 b02:	09 d0       	rcall	.+18     	; 0xb16 <__divmodhi4_neg2>
 b04:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__udivmodhi4>
 b08:	07 fc       	sbrc	r0, 7
 b0a:	05 d0       	rcall	.+10     	; 0xb16 <__divmodhi4_neg2>
 b0c:	3e f4       	brtc	.+14     	; 0xb1c <__divmodhi4_exit>

00000b0e <__divmodhi4_neg1>:
 b0e:	90 95       	com	r25
 b10:	81 95       	neg	r24
 b12:	9f 4f       	sbci	r25, 0xFF	; 255
 b14:	08 95       	ret

00000b16 <__divmodhi4_neg2>:
 b16:	70 95       	com	r23
 b18:	61 95       	neg	r22
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255

00000b1c <__divmodhi4_exit>:
 b1c:	08 95       	ret

00000b1e <__udivmodhi4>:
 b1e:	aa 1b       	sub	r26, r26
 b20:	bb 1b       	sub	r27, r27
 b22:	51 e1       	ldi	r21, 0x11	; 17
 b24:	07 c0       	rjmp	.+14     	; 0xb34 <__udivmodhi4_ep>

00000b26 <__udivmodhi4_loop>:
 b26:	aa 1f       	adc	r26, r26
 b28:	bb 1f       	adc	r27, r27
 b2a:	a6 17       	cp	r26, r22
 b2c:	b7 07       	cpc	r27, r23
 b2e:	10 f0       	brcs	.+4      	; 0xb34 <__udivmodhi4_ep>
 b30:	a6 1b       	sub	r26, r22
 b32:	b7 0b       	sbc	r27, r23

00000b34 <__udivmodhi4_ep>:
 b34:	88 1f       	adc	r24, r24
 b36:	99 1f       	adc	r25, r25
 b38:	5a 95       	dec	r21
 b3a:	a9 f7       	brne	.-22     	; 0xb26 <__udivmodhi4_loop>
 b3c:	80 95       	com	r24
 b3e:	90 95       	com	r25
 b40:	bc 01       	movw	r22, r24
 b42:	cd 01       	movw	r24, r26
 b44:	08 95       	ret

00000b46 <fwrite>:
 b46:	a0 e0       	ldi	r26, 0x00	; 0
 b48:	b0 e0       	ldi	r27, 0x00	; 0
 b4a:	e9 ea       	ldi	r30, 0xA9	; 169
 b4c:	f5 e0       	ldi	r31, 0x05	; 5
 b4e:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__prologue_saves__+0xc>
 b52:	5b 01       	movw	r10, r22
 b54:	4a 01       	movw	r8, r20
 b56:	79 01       	movw	r14, r18
 b58:	d9 01       	movw	r26, r18
 b5a:	13 96       	adiw	r26, 0x03	; 3
 b5c:	2c 91       	ld	r18, X
 b5e:	21 ff       	sbrs	r18, 1
 b60:	1d c0       	rjmp	.+58     	; 0xb9c <fwrite+0x56>
 b62:	c0 e0       	ldi	r28, 0x00	; 0
 b64:	d0 e0       	ldi	r29, 0x00	; 0
 b66:	c8 15       	cp	r28, r8
 b68:	d9 05       	cpc	r29, r9
 b6a:	d9 f0       	breq	.+54     	; 0xba2 <fwrite+0x5c>
 b6c:	8c 01       	movw	r16, r24
 b6e:	6c 01       	movw	r12, r24
 b70:	ca 0c       	add	r12, r10
 b72:	db 1c       	adc	r13, r11
 b74:	c8 01       	movw	r24, r16
 b76:	0c 15       	cp	r16, r12
 b78:	1d 05       	cpc	r17, r13
 b7a:	71 f0       	breq	.+28     	; 0xb98 <fwrite+0x52>
 b7c:	0f 5f       	subi	r16, 0xFF	; 255
 b7e:	1f 4f       	sbci	r17, 0xFF	; 255
 b80:	d7 01       	movw	r26, r14
 b82:	18 96       	adiw	r26, 0x08	; 8
 b84:	ed 91       	ld	r30, X+
 b86:	fc 91       	ld	r31, X
 b88:	19 97       	sbiw	r26, 0x09	; 9
 b8a:	b7 01       	movw	r22, r14
 b8c:	dc 01       	movw	r26, r24
 b8e:	8c 91       	ld	r24, X
 b90:	09 95       	icall
 b92:	89 2b       	or	r24, r25
 b94:	79 f3       	breq	.-34     	; 0xb74 <fwrite+0x2e>
 b96:	05 c0       	rjmp	.+10     	; 0xba2 <fwrite+0x5c>
 b98:	21 96       	adiw	r28, 0x01	; 1
 b9a:	e5 cf       	rjmp	.-54     	; 0xb66 <fwrite+0x20>
 b9c:	80 e0       	ldi	r24, 0x00	; 0
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	01 c0       	rjmp	.+2      	; 0xba4 <fwrite+0x5e>
 ba2:	ce 01       	movw	r24, r28
 ba4:	cd b7       	in	r28, 0x3d	; 61
 ba6:	de b7       	in	r29, 0x3e	; 62
 ba8:	ec e0       	ldi	r30, 0x0C	; 12
 baa:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__epilogue_restores__+0xc>

00000bae <__prologue_saves__>:
 bae:	2f 92       	push	r2
 bb0:	3f 92       	push	r3
 bb2:	4f 92       	push	r4
 bb4:	5f 92       	push	r5
 bb6:	6f 92       	push	r6
 bb8:	7f 92       	push	r7
 bba:	8f 92       	push	r8
 bbc:	9f 92       	push	r9
 bbe:	af 92       	push	r10
 bc0:	bf 92       	push	r11
 bc2:	cf 92       	push	r12
 bc4:	df 92       	push	r13
 bc6:	ef 92       	push	r14
 bc8:	ff 92       	push	r15
 bca:	0f 93       	push	r16
 bcc:	1f 93       	push	r17
 bce:	cf 93       	push	r28
 bd0:	df 93       	push	r29
 bd2:	cd b7       	in	r28, 0x3d	; 61
 bd4:	de b7       	in	r29, 0x3e	; 62
 bd6:	ca 1b       	sub	r28, r26
 bd8:	db 0b       	sbc	r29, r27
 bda:	0f b6       	in	r0, 0x3f	; 63
 bdc:	f8 94       	cli
 bde:	de bf       	out	0x3e, r29	; 62
 be0:	0f be       	out	0x3f, r0	; 63
 be2:	cd bf       	out	0x3d, r28	; 61
 be4:	09 94       	ijmp

00000be6 <__epilogue_restores__>:
 be6:	2a 88       	ldd	r2, Y+18	; 0x12
 be8:	39 88       	ldd	r3, Y+17	; 0x11
 bea:	48 88       	ldd	r4, Y+16	; 0x10
 bec:	5f 84       	ldd	r5, Y+15	; 0x0f
 bee:	6e 84       	ldd	r6, Y+14	; 0x0e
 bf0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bf2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bf4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bf6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf8:	b9 84       	ldd	r11, Y+9	; 0x09
 bfa:	c8 84       	ldd	r12, Y+8	; 0x08
 bfc:	df 80       	ldd	r13, Y+7	; 0x07
 bfe:	ee 80       	ldd	r14, Y+6	; 0x06
 c00:	fd 80       	ldd	r15, Y+5	; 0x05
 c02:	0c 81       	ldd	r16, Y+4	; 0x04
 c04:	1b 81       	ldd	r17, Y+3	; 0x03
 c06:	aa 81       	ldd	r26, Y+2	; 0x02
 c08:	b9 81       	ldd	r27, Y+1	; 0x01
 c0a:	ce 0f       	add	r28, r30
 c0c:	d1 1d       	adc	r29, r1
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	de bf       	out	0x3e, r29	; 62
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	cd bf       	out	0x3d, r28	; 61
 c18:	ed 01       	movw	r28, r26
 c1a:	08 95       	ret

00000c1c <_exit>:
 c1c:	f8 94       	cli

00000c1e <__stop_program>:
 c1e:	ff cf       	rjmp	.-2      	; 0xc1e <__stop_program>
