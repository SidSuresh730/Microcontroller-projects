
ECE34111_LabTest2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000008b8  0000094c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000950  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b30  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000998  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042b  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038f  00000000  00000000  00002a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002db6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_2>
   c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_11>
  30:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_12>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 eb       	ldi	r30, 0xB8	; 184
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 30       	cpi	r26, 0x08	; 8
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 34 02 	call	0x468	; 0x468 <main>
  ea:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <my_delay_ms>:
volatile int OC1A_duty = 50;
volatile int OC1B_duty = 70;

void my_delay_ms(uint32_t setCount)
{
	ms_count = setCount;
  f2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
  f6:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
  fa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
  fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
	while(ms_count>0)
 102:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 106:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 10a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 10e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 112:	89 2b       	or	r24, r25
 114:	8a 2b       	or	r24, r26
 116:	8b 2b       	or	r24, r27
 118:	a1 f7       	brne	.-24     	; 0x102 <my_delay_ms+0x10>
	{
	
	}
}
 11a:	08 95       	ret

0000011c <InitTimer0>:

void InitTimer0(void)
{
		//1ms clock
		TCCR0A |= (1<<WGM01); // Clear on Compare A
 11c:	84 b5       	in	r24, 0x24	; 36
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	84 bd       	out	0x24, r24	; 36
		OCR0A = 249; // Set number of ticks for Compare A
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	87 bd       	out	0x27, r24	; 39
		TIMSK0 = (1<<OCIE0A);  // Enable Timer 0 Compare A ISR
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
		TCCR0B = 3; // Set Prescaler 64 & Timer 0 starts
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	85 bd       	out	0x25, r24	; 37
 130:	08 95       	ret

00000132 <InitTimer1>:
void InitTimer1(void)
{
	//WGM = 1110 //Mode 14: Fast PWM with TOP = ICR1
	//COM1A = 10 //non-inverting PWM OC1A
	//COM1B = 10 //non-inverting PWM OC1B
	TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1B1);
 132:	e0 e8       	ldi	r30, 0x80	; 128
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	82 6a       	ori	r24, 0xA2	; 162
 13a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13);
 13c:	e1 e8       	ldi	r30, 0x81	; 129
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	88 61       	ori	r24, 0x18	; 24
 144:	80 83       	st	Z, r24
	ICR1 = 99; // 250K / (99+1) = 2.5KHz clock
 146:	83 e6       	ldi	r24, 0x63	; 99
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 14e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A = 49; //49
 152:	81 e3       	ldi	r24, 0x31	; 49
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 15a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = 69; //69
 15e:	85 e4       	ldi	r24, 0x45	; 69
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 166:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	TIMSK1 |= (1<<OCIE1B) | (1<<OCIE1A); //Enable output compare B, A match interrupt
 16a:	af e6       	ldi	r26, 0x6F	; 111
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	8c 91       	ld	r24, X
 170:	86 60       	ori	r24, 0x06	; 6
 172:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS11) | (1<<CS10); //prescaler = 64 and timer starts
 174:	80 81       	ld	r24, Z
 176:	83 60       	ori	r24, 0x03	; 3
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <InitSW1>:
}

void InitSW1(void)
{
	PCMSK0 |= (1<<PCINT7); //PCINT7 is SW1 (PB7)
 17c:	eb e6       	ldi	r30, 0x6B	; 107
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 68       	ori	r24, 0x80	; 128
 184:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0); //PCINT7 is in PCIE0
 186:	e8 e6       	ldi	r30, 0x68	; 104
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	80 83       	st	Z, r24
 190:	08 95       	ret

00000192 <InitSW2>:
}

void InitSW2(void)
{
	EICRA |= (1<<ISC11); //Set up INT1 Falling Edge Trigger 
 192:	e9 e6       	ldi	r30, 0x69	; 105
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 60       	ori	r24, 0x08	; 8
 19a:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1); //INT1 is SW2 (PD3)
 19c:	e9 9a       	sbi	0x1d, 1	; 29
 19e:	08 95       	ret

000001a0 <__vector_3>:
}

ISR(PCINT0_vect) //ON BOARD SWITCH (SW1)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
	if(!(PINB & (1<<PINB7))) //Falling Edge
 1ae:	1f 99       	sbic	0x03, 7	; 3
 1b0:	15 c0       	rjmp	.+42     	; 0x1dc <__vector_3+0x3c>
	{
		if(OC1A_duty >= 100)
 1b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <OC1A_duty>
 1b6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <OC1A_duty+0x1>
 1ba:	84 36       	cpi	r24, 0x64	; 100
 1bc:	91 05       	cpc	r25, r1
 1be:	2c f0       	brlt	.+10     	; 0x1ca <__vector_3+0x2a>
			OC1A_duty = 0;
 1c0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <OC1A_duty+0x1>
 1c4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <OC1A_duty>
 1c8:	09 c0       	rjmp	.+18     	; 0x1dc <__vector_3+0x3c>
		else
			OC1A_duty = (OC1A_duty+5); //increment OC1A_duty by 5 do not exceed 100 when SW1 pressed
 1ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <OC1A_duty>
 1ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <OC1A_duty+0x1>
 1d2:	05 96       	adiw	r24, 0x05	; 5
 1d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <OC1A_duty+0x1>
 1d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <OC1A_duty>
	}
}
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_2>:

ISR(INT1_vect) //EXTERNAL SWITCH (SW2)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
	if(OC1B_duty >= 100)
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <OC1B_duty>
 1fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <OC1B_duty+0x1>
 200:	84 36       	cpi	r24, 0x64	; 100
 202:	91 05       	cpc	r25, r1
 204:	2c f0       	brlt	.+10     	; 0x210 <__vector_2+0x26>
		OC1B_duty = 0;
 206:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <OC1B_duty+0x1>
 20a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <OC1B_duty>
 20e:	09 c0       	rjmp	.+18     	; 0x222 <__vector_2+0x38>
	else
		OC1B_duty = (OC1B_duty + 10); //increment OC1B_duty by 10 do not exceed 100 when SW2 pressed
 210:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <OC1B_duty>
 214:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <OC1B_duty+0x1>
 218:	0a 96       	adiw	r24, 0x0a	; 10
 21a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <OC1B_duty+0x1>
 21e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <OC1B_duty>
}
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	if(ms_count>0)
 252:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 256:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 25a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 25e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 262:	89 2b       	or	r24, r25
 264:	8a 2b       	or	r24, r26
 266:	8b 2b       	or	r24, r27
 268:	a1 f0       	breq	.+40     	; 0x292 <__vector_14+0x62>
	{
		ms_count--;
 26a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 26e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 272:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 276:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	a1 09       	sbc	r26, r1
 27e:	b1 09       	sbc	r27, r1
 280:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 284:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 288:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 28c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 290:	0a c0       	rjmp	.+20     	; 0x2a6 <__vector_14+0x76>
	}
	else
	{
		my_delay_ms(ms_count);
 292:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 296:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
 29a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
 29e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
 2a2:	0e 94 79 00 	call	0xf2	; 0xf2 <my_delay_ms>
	}
}
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	bf 91       	pop	r27
 2ac:	af 91       	pop	r26
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	7f 91       	pop	r23
 2b4:	6f 91       	pop	r22
 2b6:	5f 91       	pop	r21
 2b8:	4f 91       	pop	r20
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	cf 92       	push	r12
 2d4:	df 92       	push	r13
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
	if(OC1A_duty == 0)
 2f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <OC1A_duty>
 2fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <OC1A_duty+0x1>
 2fe:	89 2b       	or	r24, r25
 300:	29 f4       	brne	.+10     	; 0x30c <__vector_11+0x44>
		OCR1A = 0;
 302:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 306:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 30a:	2f c0       	rjmp	.+94     	; 0x36a <__vector_11+0xa2>
	else
	{
		OCR1A = (OC1A_duty/100.0)*(ICR1+1) - 1;
 30c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <OC1A_duty>
 310:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <OC1A_duty+0x1>
 314:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 318:	d0 91 87 00 	lds	r29, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 31c:	07 2e       	mov	r0, r23
 31e:	00 0c       	add	r0, r0
 320:	88 0b       	sbc	r24, r24
 322:	99 0b       	sbc	r25, r25
 324:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__floatsisf>
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	48 ec       	ldi	r20, 0xC8	; 200
 32e:	52 e4       	ldi	r21, 0x42	; 66
 330:	0e 94 be 02 	call	0x57c	; 0x57c <__divsf3>
 334:	6b 01       	movw	r12, r22
 336:	7c 01       	movw	r14, r24
 338:	be 01       	movw	r22, r28
 33a:	6f 5f       	subi	r22, 0xFF	; 255
 33c:	7f 4f       	sbci	r23, 0xFF	; 255
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 5f 03 	call	0x6be	; 0x6be <__floatunsisf>
 346:	9b 01       	movw	r18, r22
 348:	ac 01       	movw	r20, r24
 34a:	c7 01       	movw	r24, r14
 34c:	b6 01       	movw	r22, r12
 34e:	0e 94 ed 03 	call	0x7da	; 0x7da <__mulsf3>
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	40 e8       	ldi	r20, 0x80	; 128
 358:	5f e3       	ldi	r21, 0x3F	; 63
 35a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__subsf3>
 35e:	0e 94 30 03 	call	0x660	; 0x660 <__fixunssfsi>
 362:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 366:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	}
}
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	df 90       	pop	r13
 38c:	cf 90       	pop	r12
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	6f 93       	push	r22
 3b4:	7f 93       	push	r23
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
	if(OC1B_duty == 0)
 3c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <OC1B_duty>
 3ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <OC1B_duty+0x1>
 3ce:	89 2b       	or	r24, r25
 3d0:	29 f4       	brne	.+10     	; 0x3dc <__vector_12+0x44>
		OCR1B = 0;
 3d2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 3d6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 3da:	2f c0       	rjmp	.+94     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	else
	{
		OCR1B = (OC1B_duty/100.0)*(ICR1+1) - 1;
 3dc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <OC1B_duty>
 3e0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <OC1B_duty+0x1>
 3e4:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 3e8:	d0 91 87 00 	lds	r29, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 3ec:	07 2e       	mov	r0, r23
 3ee:	00 0c       	add	r0, r0
 3f0:	88 0b       	sbc	r24, r24
 3f2:	99 0b       	sbc	r25, r25
 3f4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__floatsisf>
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	48 ec       	ldi	r20, 0xC8	; 200
 3fe:	52 e4       	ldi	r21, 0x42	; 66
 400:	0e 94 be 02 	call	0x57c	; 0x57c <__divsf3>
 404:	6b 01       	movw	r12, r22
 406:	7c 01       	movw	r14, r24
 408:	be 01       	movw	r22, r28
 40a:	6f 5f       	subi	r22, 0xFF	; 255
 40c:	7f 4f       	sbci	r23, 0xFF	; 255
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 5f 03 	call	0x6be	; 0x6be <__floatunsisf>
 416:	9b 01       	movw	r18, r22
 418:	ac 01       	movw	r20, r24
 41a:	c7 01       	movw	r24, r14
 41c:	b6 01       	movw	r22, r12
 41e:	0e 94 ed 03 	call	0x7da	; 0x7da <__mulsf3>
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e8       	ldi	r20, 0x80	; 128
 428:	5f e3       	ldi	r21, 0x3F	; 63
 42a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__subsf3>
 42e:	0e 94 30 03 	call	0x660	; 0x660 <__fixunssfsi>
 432:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 436:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	}
}
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	bf 91       	pop	r27
 444:	af 91       	pop	r26
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	7f 91       	pop	r23
 44c:	6f 91       	pop	r22
 44e:	5f 91       	pop	r21
 450:	4f 91       	pop	r20
 452:	3f 91       	pop	r19
 454:	2f 91       	pop	r18
 456:	ff 90       	pop	r15
 458:	ef 90       	pop	r14
 45a:	df 90       	pop	r13
 45c:	cf 90       	pop	r12
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <main>:

int main(void)
{
	DDRB |= (1<<DDB1) | (1<<DDB2) | (1<<DDB5); //OC1A OC1B onboardLED
 468:	84 b1       	in	r24, 0x04	; 4
 46a:	86 62       	ori	r24, 0x26	; 38
 46c:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<DDB7); //SW1
 46e:	27 98       	cbi	0x04, 7	; 4
	DDRD &= ~(1<<DDD3); // SW2
 470:	53 98       	cbi	0x0a, 3	; 10
	InitTimer0();
 472:	0e 94 8e 00 	call	0x11c	; 0x11c <InitTimer0>
	InitTimer1();
 476:	0e 94 99 00 	call	0x132	; 0x132 <InitTimer1>
	InitSW1();
 47a:	0e 94 be 00 	call	0x17c	; 0x17c <InitSW1>
	InitSW2();
 47e:	0e 94 c9 00 	call	0x192	; 0x192 <InitSW2>
	sei();
 482:	78 94       	sei
	
    while (1) 
    {
		my_delay_ms(16);
 484:	60 e1       	ldi	r22, 0x10	; 16
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 79 00 	call	0xf2	; 0xf2 <my_delay_ms>
		PORTB |= (1<<PORTB5);
 490:	2d 9a       	sbi	0x05, 5	; 5
		my_delay_ms(17);
 492:	61 e1       	ldi	r22, 0x11	; 17
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 79 00 	call	0xf2	; 0xf2 <my_delay_ms>
		PORTB &= ~(1<<PORTB5);
 49e:	2d 98       	cbi	0x05, 5	; 5
 4a0:	f1 cf       	rjmp	.-30     	; 0x484 <main+0x1c>

000004a2 <__subsf3>:
 4a2:	50 58       	subi	r21, 0x80	; 128

000004a4 <__addsf3>:
 4a4:	bb 27       	eor	r27, r27
 4a6:	aa 27       	eor	r26, r26
 4a8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__addsf3x>
 4ac:	0c 94 b3 03 	jmp	0x766	; 0x766 <__fp_round>
 4b0:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_pscA>
 4b4:	38 f0       	brcs	.+14     	; 0x4c4 <__addsf3+0x20>
 4b6:	0e 94 ac 03 	call	0x758	; 0x758 <__fp_pscB>
 4ba:	20 f0       	brcs	.+8      	; 0x4c4 <__addsf3+0x20>
 4bc:	39 f4       	brne	.+14     	; 0x4cc <__addsf3+0x28>
 4be:	9f 3f       	cpi	r25, 0xFF	; 255
 4c0:	19 f4       	brne	.+6      	; 0x4c8 <__addsf3+0x24>
 4c2:	26 f4       	brtc	.+8      	; 0x4cc <__addsf3+0x28>
 4c4:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_nan>
 4c8:	0e f4       	brtc	.+2      	; 0x4cc <__addsf3+0x28>
 4ca:	e0 95       	com	r30
 4cc:	e7 fb       	bst	r30, 7
 4ce:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_inf>

000004d2 <__addsf3x>:
 4d2:	e9 2f       	mov	r30, r25
 4d4:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_split3>
 4d8:	58 f3       	brcs	.-42     	; 0x4b0 <__addsf3+0xc>
 4da:	ba 17       	cp	r27, r26
 4dc:	62 07       	cpc	r22, r18
 4de:	73 07       	cpc	r23, r19
 4e0:	84 07       	cpc	r24, r20
 4e2:	95 07       	cpc	r25, r21
 4e4:	20 f0       	brcs	.+8      	; 0x4ee <__addsf3x+0x1c>
 4e6:	79 f4       	brne	.+30     	; 0x506 <__addsf3x+0x34>
 4e8:	a6 f5       	brtc	.+104    	; 0x552 <__addsf3x+0x80>
 4ea:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_zero>
 4ee:	0e f4       	brtc	.+2      	; 0x4f2 <__addsf3x+0x20>
 4f0:	e0 95       	com	r30
 4f2:	0b 2e       	mov	r0, r27
 4f4:	ba 2f       	mov	r27, r26
 4f6:	a0 2d       	mov	r26, r0
 4f8:	0b 01       	movw	r0, r22
 4fa:	b9 01       	movw	r22, r18
 4fc:	90 01       	movw	r18, r0
 4fe:	0c 01       	movw	r0, r24
 500:	ca 01       	movw	r24, r20
 502:	a0 01       	movw	r20, r0
 504:	11 24       	eor	r1, r1
 506:	ff 27       	eor	r31, r31
 508:	59 1b       	sub	r21, r25
 50a:	99 f0       	breq	.+38     	; 0x532 <__addsf3x+0x60>
 50c:	59 3f       	cpi	r21, 0xF9	; 249
 50e:	50 f4       	brcc	.+20     	; 0x524 <__addsf3x+0x52>
 510:	50 3e       	cpi	r21, 0xE0	; 224
 512:	68 f1       	brcs	.+90     	; 0x56e <__addsf3x+0x9c>
 514:	1a 16       	cp	r1, r26
 516:	f0 40       	sbci	r31, 0x00	; 0
 518:	a2 2f       	mov	r26, r18
 51a:	23 2f       	mov	r18, r19
 51c:	34 2f       	mov	r19, r20
 51e:	44 27       	eor	r20, r20
 520:	58 5f       	subi	r21, 0xF8	; 248
 522:	f3 cf       	rjmp	.-26     	; 0x50a <__addsf3x+0x38>
 524:	46 95       	lsr	r20
 526:	37 95       	ror	r19
 528:	27 95       	ror	r18
 52a:	a7 95       	ror	r26
 52c:	f0 40       	sbci	r31, 0x00	; 0
 52e:	53 95       	inc	r21
 530:	c9 f7       	brne	.-14     	; 0x524 <__addsf3x+0x52>
 532:	7e f4       	brtc	.+30     	; 0x552 <__addsf3x+0x80>
 534:	1f 16       	cp	r1, r31
 536:	ba 0b       	sbc	r27, r26
 538:	62 0b       	sbc	r22, r18
 53a:	73 0b       	sbc	r23, r19
 53c:	84 0b       	sbc	r24, r20
 53e:	ba f0       	brmi	.+46     	; 0x56e <__addsf3x+0x9c>
 540:	91 50       	subi	r25, 0x01	; 1
 542:	a1 f0       	breq	.+40     	; 0x56c <__addsf3x+0x9a>
 544:	ff 0f       	add	r31, r31
 546:	bb 1f       	adc	r27, r27
 548:	66 1f       	adc	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	c2 f7       	brpl	.-16     	; 0x540 <__addsf3x+0x6e>
 550:	0e c0       	rjmp	.+28     	; 0x56e <__addsf3x+0x9c>
 552:	ba 0f       	add	r27, r26
 554:	62 1f       	adc	r22, r18
 556:	73 1f       	adc	r23, r19
 558:	84 1f       	adc	r24, r20
 55a:	48 f4       	brcc	.+18     	; 0x56e <__addsf3x+0x9c>
 55c:	87 95       	ror	r24
 55e:	77 95       	ror	r23
 560:	67 95       	ror	r22
 562:	b7 95       	ror	r27
 564:	f7 95       	ror	r31
 566:	9e 3f       	cpi	r25, 0xFE	; 254
 568:	08 f0       	brcs	.+2      	; 0x56c <__addsf3x+0x9a>
 56a:	b0 cf       	rjmp	.-160    	; 0x4cc <__addsf3+0x28>
 56c:	93 95       	inc	r25
 56e:	88 0f       	add	r24, r24
 570:	08 f0       	brcs	.+2      	; 0x574 <__addsf3x+0xa2>
 572:	99 27       	eor	r25, r25
 574:	ee 0f       	add	r30, r30
 576:	97 95       	ror	r25
 578:	87 95       	ror	r24
 57a:	08 95       	ret

0000057c <__divsf3>:
 57c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divsf3x>
 580:	0c 94 b3 03 	jmp	0x766	; 0x766 <__fp_round>
 584:	0e 94 ac 03 	call	0x758	; 0x758 <__fp_pscB>
 588:	58 f0       	brcs	.+22     	; 0x5a0 <__divsf3+0x24>
 58a:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_pscA>
 58e:	40 f0       	brcs	.+16     	; 0x5a0 <__divsf3+0x24>
 590:	29 f4       	brne	.+10     	; 0x59c <__divsf3+0x20>
 592:	5f 3f       	cpi	r21, 0xFF	; 255
 594:	29 f0       	breq	.+10     	; 0x5a0 <__divsf3+0x24>
 596:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_inf>
 59a:	51 11       	cpse	r21, r1
 59c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__fp_szero>
 5a0:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_nan>

000005a4 <__divsf3x>:
 5a4:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_split3>
 5a8:	68 f3       	brcs	.-38     	; 0x584 <__divsf3+0x8>

000005aa <__divsf3_pse>:
 5aa:	99 23       	and	r25, r25
 5ac:	b1 f3       	breq	.-20     	; 0x59a <__divsf3+0x1e>
 5ae:	55 23       	and	r21, r21
 5b0:	91 f3       	breq	.-28     	; 0x596 <__divsf3+0x1a>
 5b2:	95 1b       	sub	r25, r21
 5b4:	55 0b       	sbc	r21, r21
 5b6:	bb 27       	eor	r27, r27
 5b8:	aa 27       	eor	r26, r26
 5ba:	62 17       	cp	r22, r18
 5bc:	73 07       	cpc	r23, r19
 5be:	84 07       	cpc	r24, r20
 5c0:	38 f0       	brcs	.+14     	; 0x5d0 <__divsf3_pse+0x26>
 5c2:	9f 5f       	subi	r25, 0xFF	; 255
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	22 0f       	add	r18, r18
 5c8:	33 1f       	adc	r19, r19
 5ca:	44 1f       	adc	r20, r20
 5cc:	aa 1f       	adc	r26, r26
 5ce:	a9 f3       	breq	.-22     	; 0x5ba <__divsf3_pse+0x10>
 5d0:	35 d0       	rcall	.+106    	; 0x63c <__divsf3_pse+0x92>
 5d2:	0e 2e       	mov	r0, r30
 5d4:	3a f0       	brmi	.+14     	; 0x5e4 <__divsf3_pse+0x3a>
 5d6:	e0 e8       	ldi	r30, 0x80	; 128
 5d8:	32 d0       	rcall	.+100    	; 0x63e <__divsf3_pse+0x94>
 5da:	91 50       	subi	r25, 0x01	; 1
 5dc:	50 40       	sbci	r21, 0x00	; 0
 5de:	e6 95       	lsr	r30
 5e0:	00 1c       	adc	r0, r0
 5e2:	ca f7       	brpl	.-14     	; 0x5d6 <__divsf3_pse+0x2c>
 5e4:	2b d0       	rcall	.+86     	; 0x63c <__divsf3_pse+0x92>
 5e6:	fe 2f       	mov	r31, r30
 5e8:	29 d0       	rcall	.+82     	; 0x63c <__divsf3_pse+0x92>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	bb 1f       	adc	r27, r27
 5f2:	26 17       	cp	r18, r22
 5f4:	37 07       	cpc	r19, r23
 5f6:	48 07       	cpc	r20, r24
 5f8:	ab 07       	cpc	r26, r27
 5fa:	b0 e8       	ldi	r27, 0x80	; 128
 5fc:	09 f0       	breq	.+2      	; 0x600 <__divsf3_pse+0x56>
 5fe:	bb 0b       	sbc	r27, r27
 600:	80 2d       	mov	r24, r0
 602:	bf 01       	movw	r22, r30
 604:	ff 27       	eor	r31, r31
 606:	93 58       	subi	r25, 0x83	; 131
 608:	5f 4f       	sbci	r21, 0xFF	; 255
 60a:	3a f0       	brmi	.+14     	; 0x61a <__divsf3_pse+0x70>
 60c:	9e 3f       	cpi	r25, 0xFE	; 254
 60e:	51 05       	cpc	r21, r1
 610:	78 f0       	brcs	.+30     	; 0x630 <__divsf3_pse+0x86>
 612:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_inf>
 616:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__fp_szero>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	e4 f3       	brlt	.-8      	; 0x616 <__divsf3_pse+0x6c>
 61e:	98 3e       	cpi	r25, 0xE8	; 232
 620:	d4 f3       	brlt	.-12     	; 0x616 <__divsf3_pse+0x6c>
 622:	86 95       	lsr	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	f7 95       	ror	r31
 62c:	9f 5f       	subi	r25, 0xFF	; 255
 62e:	c9 f7       	brne	.-14     	; 0x622 <__divsf3_pse+0x78>
 630:	88 0f       	add	r24, r24
 632:	91 1d       	adc	r25, r1
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret
 63c:	e1 e0       	ldi	r30, 0x01	; 1
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	bb 1f       	adc	r27, r27
 646:	62 17       	cp	r22, r18
 648:	73 07       	cpc	r23, r19
 64a:	84 07       	cpc	r24, r20
 64c:	ba 07       	cpc	r27, r26
 64e:	20 f0       	brcs	.+8      	; 0x658 <__divsf3_pse+0xae>
 650:	62 1b       	sub	r22, r18
 652:	73 0b       	sbc	r23, r19
 654:	84 0b       	sbc	r24, r20
 656:	ba 0b       	sbc	r27, r26
 658:	ee 1f       	adc	r30, r30
 65a:	88 f7       	brcc	.-30     	; 0x63e <__divsf3_pse+0x94>
 65c:	e0 95       	com	r30
 65e:	08 95       	ret

00000660 <__fixunssfsi>:
 660:	0e 94 cc 03 	call	0x798	; 0x798 <__fp_splitA>
 664:	88 f0       	brcs	.+34     	; 0x688 <__fixunssfsi+0x28>
 666:	9f 57       	subi	r25, 0x7F	; 127
 668:	98 f0       	brcs	.+38     	; 0x690 <__fixunssfsi+0x30>
 66a:	b9 2f       	mov	r27, r25
 66c:	99 27       	eor	r25, r25
 66e:	b7 51       	subi	r27, 0x17	; 23
 670:	b0 f0       	brcs	.+44     	; 0x69e <__fixunssfsi+0x3e>
 672:	e1 f0       	breq	.+56     	; 0x6ac <__fixunssfsi+0x4c>
 674:	66 0f       	add	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	1a f0       	brmi	.+6      	; 0x684 <__fixunssfsi+0x24>
 67e:	ba 95       	dec	r27
 680:	c9 f7       	brne	.-14     	; 0x674 <__fixunssfsi+0x14>
 682:	14 c0       	rjmp	.+40     	; 0x6ac <__fixunssfsi+0x4c>
 684:	b1 30       	cpi	r27, 0x01	; 1
 686:	91 f0       	breq	.+36     	; 0x6ac <__fixunssfsi+0x4c>
 688:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_zero>
 68c:	b1 e0       	ldi	r27, 0x01	; 1
 68e:	08 95       	ret
 690:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_zero>
 694:	67 2f       	mov	r22, r23
 696:	78 2f       	mov	r23, r24
 698:	88 27       	eor	r24, r24
 69a:	b8 5f       	subi	r27, 0xF8	; 248
 69c:	39 f0       	breq	.+14     	; 0x6ac <__fixunssfsi+0x4c>
 69e:	b9 3f       	cpi	r27, 0xF9	; 249
 6a0:	cc f3       	brlt	.-14     	; 0x694 <__fixunssfsi+0x34>
 6a2:	86 95       	lsr	r24
 6a4:	77 95       	ror	r23
 6a6:	67 95       	ror	r22
 6a8:	b3 95       	inc	r27
 6aa:	d9 f7       	brne	.-10     	; 0x6a2 <__fixunssfsi+0x42>
 6ac:	3e f4       	brtc	.+14     	; 0x6bc <__fixunssfsi+0x5c>
 6ae:	90 95       	com	r25
 6b0:	80 95       	com	r24
 6b2:	70 95       	com	r23
 6b4:	61 95       	neg	r22
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	08 95       	ret

000006be <__floatunsisf>:
 6be:	e8 94       	clt
 6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <__floatsisf+0x12>

000006c2 <__floatsisf>:
 6c2:	97 fb       	bst	r25, 7
 6c4:	3e f4       	brtc	.+14     	; 0x6d4 <__floatsisf+0x12>
 6c6:	90 95       	com	r25
 6c8:	80 95       	com	r24
 6ca:	70 95       	com	r23
 6cc:	61 95       	neg	r22
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	99 23       	and	r25, r25
 6d6:	a9 f0       	breq	.+42     	; 0x702 <__floatsisf+0x40>
 6d8:	f9 2f       	mov	r31, r25
 6da:	96 e9       	ldi	r25, 0x96	; 150
 6dc:	bb 27       	eor	r27, r27
 6de:	93 95       	inc	r25
 6e0:	f6 95       	lsr	r31
 6e2:	87 95       	ror	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b7 95       	ror	r27
 6ea:	f1 11       	cpse	r31, r1
 6ec:	f8 cf       	rjmp	.-16     	; 0x6de <__floatsisf+0x1c>
 6ee:	fa f4       	brpl	.+62     	; 0x72e <__floatsisf+0x6c>
 6f0:	bb 0f       	add	r27, r27
 6f2:	11 f4       	brne	.+4      	; 0x6f8 <__floatsisf+0x36>
 6f4:	60 ff       	sbrs	r22, 0
 6f6:	1b c0       	rjmp	.+54     	; 0x72e <__floatsisf+0x6c>
 6f8:	6f 5f       	subi	r22, 0xFF	; 255
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	16 c0       	rjmp	.+44     	; 0x72e <__floatsisf+0x6c>
 702:	88 23       	and	r24, r24
 704:	11 f0       	breq	.+4      	; 0x70a <__floatsisf+0x48>
 706:	96 e9       	ldi	r25, 0x96	; 150
 708:	11 c0       	rjmp	.+34     	; 0x72c <__floatsisf+0x6a>
 70a:	77 23       	and	r23, r23
 70c:	21 f0       	breq	.+8      	; 0x716 <__floatsisf+0x54>
 70e:	9e e8       	ldi	r25, 0x8E	; 142
 710:	87 2f       	mov	r24, r23
 712:	76 2f       	mov	r23, r22
 714:	05 c0       	rjmp	.+10     	; 0x720 <__floatsisf+0x5e>
 716:	66 23       	and	r22, r22
 718:	71 f0       	breq	.+28     	; 0x736 <__floatsisf+0x74>
 71a:	96 e8       	ldi	r25, 0x86	; 134
 71c:	86 2f       	mov	r24, r22
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	2a f0       	brmi	.+10     	; 0x72e <__floatsisf+0x6c>
 724:	9a 95       	dec	r25
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	da f7       	brpl	.-10     	; 0x724 <__floatsisf+0x62>
 72e:	88 0f       	add	r24, r24
 730:	96 95       	lsr	r25
 732:	87 95       	ror	r24
 734:	97 f9       	bld	r25, 7
 736:	08 95       	ret

00000738 <__fp_inf>:
 738:	97 f9       	bld	r25, 7
 73a:	9f 67       	ori	r25, 0x7F	; 127
 73c:	80 e8       	ldi	r24, 0x80	; 128
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	08 95       	ret

00000744 <__fp_nan>:
 744:	9f ef       	ldi	r25, 0xFF	; 255
 746:	80 ec       	ldi	r24, 0xC0	; 192
 748:	08 95       	ret

0000074a <__fp_pscA>:
 74a:	00 24       	eor	r0, r0
 74c:	0a 94       	dec	r0
 74e:	16 16       	cp	r1, r22
 750:	17 06       	cpc	r1, r23
 752:	18 06       	cpc	r1, r24
 754:	09 06       	cpc	r0, r25
 756:	08 95       	ret

00000758 <__fp_pscB>:
 758:	00 24       	eor	r0, r0
 75a:	0a 94       	dec	r0
 75c:	12 16       	cp	r1, r18
 75e:	13 06       	cpc	r1, r19
 760:	14 06       	cpc	r1, r20
 762:	05 06       	cpc	r0, r21
 764:	08 95       	ret

00000766 <__fp_round>:
 766:	09 2e       	mov	r0, r25
 768:	03 94       	inc	r0
 76a:	00 0c       	add	r0, r0
 76c:	11 f4       	brne	.+4      	; 0x772 <__fp_round+0xc>
 76e:	88 23       	and	r24, r24
 770:	52 f0       	brmi	.+20     	; 0x786 <__fp_round+0x20>
 772:	bb 0f       	add	r27, r27
 774:	40 f4       	brcc	.+16     	; 0x786 <__fp_round+0x20>
 776:	bf 2b       	or	r27, r31
 778:	11 f4       	brne	.+4      	; 0x77e <__fp_round+0x18>
 77a:	60 ff       	sbrs	r22, 0
 77c:	04 c0       	rjmp	.+8      	; 0x786 <__fp_round+0x20>
 77e:	6f 5f       	subi	r22, 0xFF	; 255
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	8f 4f       	sbci	r24, 0xFF	; 255
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	08 95       	ret

00000788 <__fp_split3>:
 788:	57 fd       	sbrc	r21, 7
 78a:	90 58       	subi	r25, 0x80	; 128
 78c:	44 0f       	add	r20, r20
 78e:	55 1f       	adc	r21, r21
 790:	59 f0       	breq	.+22     	; 0x7a8 <__fp_splitA+0x10>
 792:	5f 3f       	cpi	r21, 0xFF	; 255
 794:	71 f0       	breq	.+28     	; 0x7b2 <__fp_splitA+0x1a>
 796:	47 95       	ror	r20

00000798 <__fp_splitA>:
 798:	88 0f       	add	r24, r24
 79a:	97 fb       	bst	r25, 7
 79c:	99 1f       	adc	r25, r25
 79e:	61 f0       	breq	.+24     	; 0x7b8 <__fp_splitA+0x20>
 7a0:	9f 3f       	cpi	r25, 0xFF	; 255
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <__fp_splitA+0x2a>
 7a4:	87 95       	ror	r24
 7a6:	08 95       	ret
 7a8:	12 16       	cp	r1, r18
 7aa:	13 06       	cpc	r1, r19
 7ac:	14 06       	cpc	r1, r20
 7ae:	55 1f       	adc	r21, r21
 7b0:	f2 cf       	rjmp	.-28     	; 0x796 <__fp_split3+0xe>
 7b2:	46 95       	lsr	r20
 7b4:	f1 df       	rcall	.-30     	; 0x798 <__fp_splitA>
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <__fp_splitA+0x30>
 7b8:	16 16       	cp	r1, r22
 7ba:	17 06       	cpc	r1, r23
 7bc:	18 06       	cpc	r1, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	f1 cf       	rjmp	.-30     	; 0x7a4 <__fp_splitA+0xc>
 7c2:	86 95       	lsr	r24
 7c4:	71 05       	cpc	r23, r1
 7c6:	61 05       	cpc	r22, r1
 7c8:	08 94       	sec
 7ca:	08 95       	ret

000007cc <__fp_zero>:
 7cc:	e8 94       	clt

000007ce <__fp_szero>:
 7ce:	bb 27       	eor	r27, r27
 7d0:	66 27       	eor	r22, r22
 7d2:	77 27       	eor	r23, r23
 7d4:	cb 01       	movw	r24, r22
 7d6:	97 f9       	bld	r25, 7
 7d8:	08 95       	ret

000007da <__mulsf3>:
 7da:	0e 94 00 04 	call	0x800	; 0x800 <__mulsf3x>
 7de:	0c 94 b3 03 	jmp	0x766	; 0x766 <__fp_round>
 7e2:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_pscA>
 7e6:	38 f0       	brcs	.+14     	; 0x7f6 <__mulsf3+0x1c>
 7e8:	0e 94 ac 03 	call	0x758	; 0x758 <__fp_pscB>
 7ec:	20 f0       	brcs	.+8      	; 0x7f6 <__mulsf3+0x1c>
 7ee:	95 23       	and	r25, r21
 7f0:	11 f0       	breq	.+4      	; 0x7f6 <__mulsf3+0x1c>
 7f2:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_inf>
 7f6:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_nan>
 7fa:	11 24       	eor	r1, r1
 7fc:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__fp_szero>

00000800 <__mulsf3x>:
 800:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_split3>
 804:	70 f3       	brcs	.-36     	; 0x7e2 <__mulsf3+0x8>

00000806 <__mulsf3_pse>:
 806:	95 9f       	mul	r25, r21
 808:	c1 f3       	breq	.-16     	; 0x7fa <__mulsf3+0x20>
 80a:	95 0f       	add	r25, r21
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	55 1f       	adc	r21, r21
 810:	62 9f       	mul	r22, r18
 812:	f0 01       	movw	r30, r0
 814:	72 9f       	mul	r23, r18
 816:	bb 27       	eor	r27, r27
 818:	f0 0d       	add	r31, r0
 81a:	b1 1d       	adc	r27, r1
 81c:	63 9f       	mul	r22, r19
 81e:	aa 27       	eor	r26, r26
 820:	f0 0d       	add	r31, r0
 822:	b1 1d       	adc	r27, r1
 824:	aa 1f       	adc	r26, r26
 826:	64 9f       	mul	r22, r20
 828:	66 27       	eor	r22, r22
 82a:	b0 0d       	add	r27, r0
 82c:	a1 1d       	adc	r26, r1
 82e:	66 1f       	adc	r22, r22
 830:	82 9f       	mul	r24, r18
 832:	22 27       	eor	r18, r18
 834:	b0 0d       	add	r27, r0
 836:	a1 1d       	adc	r26, r1
 838:	62 1f       	adc	r22, r18
 83a:	73 9f       	mul	r23, r19
 83c:	b0 0d       	add	r27, r0
 83e:	a1 1d       	adc	r26, r1
 840:	62 1f       	adc	r22, r18
 842:	83 9f       	mul	r24, r19
 844:	a0 0d       	add	r26, r0
 846:	61 1d       	adc	r22, r1
 848:	22 1f       	adc	r18, r18
 84a:	74 9f       	mul	r23, r20
 84c:	33 27       	eor	r19, r19
 84e:	a0 0d       	add	r26, r0
 850:	61 1d       	adc	r22, r1
 852:	23 1f       	adc	r18, r19
 854:	84 9f       	mul	r24, r20
 856:	60 0d       	add	r22, r0
 858:	21 1d       	adc	r18, r1
 85a:	82 2f       	mov	r24, r18
 85c:	76 2f       	mov	r23, r22
 85e:	6a 2f       	mov	r22, r26
 860:	11 24       	eor	r1, r1
 862:	9f 57       	subi	r25, 0x7F	; 127
 864:	50 40       	sbci	r21, 0x00	; 0
 866:	9a f0       	brmi	.+38     	; 0x88e <__mulsf3_pse+0x88>
 868:	f1 f0       	breq	.+60     	; 0x8a6 <__mulsf3_pse+0xa0>
 86a:	88 23       	and	r24, r24
 86c:	4a f0       	brmi	.+18     	; 0x880 <__mulsf3_pse+0x7a>
 86e:	ee 0f       	add	r30, r30
 870:	ff 1f       	adc	r31, r31
 872:	bb 1f       	adc	r27, r27
 874:	66 1f       	adc	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	91 50       	subi	r25, 0x01	; 1
 87c:	50 40       	sbci	r21, 0x00	; 0
 87e:	a9 f7       	brne	.-22     	; 0x86a <__mulsf3_pse+0x64>
 880:	9e 3f       	cpi	r25, 0xFE	; 254
 882:	51 05       	cpc	r21, r1
 884:	80 f0       	brcs	.+32     	; 0x8a6 <__mulsf3_pse+0xa0>
 886:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_inf>
 88a:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__fp_szero>
 88e:	5f 3f       	cpi	r21, 0xFF	; 255
 890:	e4 f3       	brlt	.-8      	; 0x88a <__mulsf3_pse+0x84>
 892:	98 3e       	cpi	r25, 0xE8	; 232
 894:	d4 f3       	brlt	.-12     	; 0x88a <__mulsf3_pse+0x84>
 896:	86 95       	lsr	r24
 898:	77 95       	ror	r23
 89a:	67 95       	ror	r22
 89c:	b7 95       	ror	r27
 89e:	f7 95       	ror	r31
 8a0:	e7 95       	ror	r30
 8a2:	9f 5f       	subi	r25, 0xFF	; 255
 8a4:	c1 f7       	brne	.-16     	; 0x896 <__mulsf3_pse+0x90>
 8a6:	fe 2b       	or	r31, r30
 8a8:	88 0f       	add	r24, r24
 8aa:	91 1d       	adc	r25, r1
 8ac:	96 95       	lsr	r25
 8ae:	87 95       	ror	r24
 8b0:	97 f9       	bld	r25, 7
 8b2:	08 95       	ret

000008b4 <_exit>:
 8b4:	f8 94       	cli

000008b6 <__stop_program>:
 8b6:	ff cf       	rjmp	.-2      	; 0x8b6 <__stop_program>
