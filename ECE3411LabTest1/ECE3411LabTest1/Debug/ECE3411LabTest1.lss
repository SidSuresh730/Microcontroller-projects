
ECE3411LabTest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab4  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094d  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ba  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007733  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000355  00000000  00000000  00009417  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000976c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002a48  00000000  00000000  0000977c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
   6:	00 00       	nop
   8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
   a:	00 00       	nop
   c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
   e:	00 00       	nop
  10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
  12:	00 00       	nop
  14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
  16:	00 00       	nop
  18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
  22:	00 00       	nop
  24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
  26:	00 00       	nop
  28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4b c0       	rjmp	.+150    	; 0xc4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	49 c0       	rjmp	.+146    	; 0xc4 <__bad_interrupt>
  32:	00 00       	nop
  34:	47 c0       	rjmp	.+142    	; 0xc4 <__bad_interrupt>
  36:	00 00       	nop
  38:	45 c0       	rjmp	.+138    	; 0xc4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
  42:	00 00       	nop
  44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
  46:	00 00       	nop
  48:	3d c0       	rjmp	.+122    	; 0xc4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3b c0       	rjmp	.+118    	; 0xc4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
  52:	00 00       	nop
  54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
  56:	00 00       	nop
  58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
  62:	00 00       	nop
  64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
  66:	00 00       	nop
  68:	2d c0       	rjmp	.+90     	; 0xc4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2b c0       	rjmp	.+86     	; 0xc4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	29 c0       	rjmp	.+82     	; 0xc4 <__bad_interrupt>
  72:	00 00       	nop
  74:	27 c0       	rjmp	.+78     	; 0xc4 <__bad_interrupt>
  76:	00 00       	nop
  78:	25 c0       	rjmp	.+74     	; 0xc4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	23 c0       	rjmp	.+70     	; 0xc4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	21 c0       	rjmp	.+66     	; 0xc4 <__bad_interrupt>
  82:	00 00       	nop
  84:	1f c0       	rjmp	.+62     	; 0xc4 <__bad_interrupt>
  86:	00 00       	nop
  88:	1d c0       	rjmp	.+58     	; 0xc4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1b c0       	rjmp	.+54     	; 0xc4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	19 c0       	rjmp	.+50     	; 0xc4 <__bad_interrupt>
  92:	00 00       	nop
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__bad_interrupt>
  96:	00 00       	nop
  98:	15 c0       	rjmp	.+42     	; 0xc4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	13 c0       	rjmp	.+38     	; 0xc4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	11 c0       	rjmp	.+34     	; 0xc4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	0f c0       	rjmp	.+30     	; 0xc4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	0d c0       	rjmp	.+26     	; 0xc4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	0b c0       	rjmp	.+22     	; 0xc4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	02 d0       	rcall	.+4      	; 0xc6 <main>
  c2:	ab c0       	rjmp	.+342    	; 0x21a <_exit>

000000c4 <__bad_interrupt>:
  c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <main>:
#include <util/delay.h>

int main(void)
{
    /* Replace with your application code */
	DDRD = 0b11111111; // set direction of DDRD to output
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1<<DDB7); // set PORTB 7 to input (SW1) // Already debounced
  ca:	27 98       	cbi	0x04, 7	; 4
	DDRB &= ~(1<<DDB1); // set PORTB 1 to input (SW2) // need to debounce
  cc:	21 98       	cbi	0x04, 1	; 4
	int SW2_pressed = 0;
	//int SW1_once = 0;
	//int SW1_twice = 0;
	//int SW2_once = 0;
	//int SW2_twice = 0;
	int state = 0;
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	70 e0       	ldi	r23, 0x00	; 0
	DDRB &= ~(1<<DDB7); // set PORTB 7 to input (SW1) // Already debounced
	DDRB &= ~(1<<DDB1); // set PORTB 1 to input (SW2) // need to debounce
	int counter = 0;
	int increment = 1;
	int SW1_pressed = 0;
	int SW2_pressed = 0;
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
	DDRD = 0b11111111; // set direction of DDRD to output
	DDRB &= ~(1<<DDB7); // set PORTB 7 to input (SW1) // Already debounced
	DDRB &= ~(1<<DDB1); // set PORTB 1 to input (SW2) // need to debounce
	int counter = 0;
	int increment = 1;
	int SW1_pressed = 0;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
    /* Replace with your application code */
	DDRD = 0b11111111; // set direction of DDRD to output
	DDRB &= ~(1<<DDB7); // set PORTB 7 to input (SW1) // Already debounced
	DDRB &= ~(1<<DDB1); // set PORTB 1 to input (SW2) // need to debounce
	int counter = 0;
	int increment = 1;
  da:	88 24       	eor	r8, r8
  dc:	83 94       	inc	r8
  de:	91 2c       	mov	r9, r1
{
    /* Replace with your application code */
	DDRD = 0b11111111; // set direction of DDRD to output
	DDRB &= ~(1<<DDB7); // set PORTB 7 to input (SW1) // Already debounced
	DDRB &= ~(1<<DDB1); // set PORTB 1 to input (SW2) // need to debounce
	int counter = 0;
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b0 e0       	ldi	r27, 0x00	; 0
			}
				else if (SW2_pressed)
				{
					if(state == 0) // nothing yet
					{
						state = 0;//still nothing
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	e0 e0       	ldi	r30, 0x00	; 0
					{
						state = 0; // break the sequence
					}
					else if(state == 2) // SW1 twice
					{
						state = 3; // move to SW2 once
  e8:	0f 2e       	mov	r0, r31
  ea:	f3 e0       	ldi	r31, 0x03	; 3
  ec:	ef 2e       	mov	r14, r31
  ee:	f0 2d       	mov	r31, r0
  f0:	f1 2c       	mov	r15, r1
					}
					else if (state == 3)
					{
						state = 4; // move to SW2 twice
  f2:	68 94       	set
  f4:	aa 24       	eor	r10, r10
  f6:	a2 f8       	bld	r10, 2
  f8:	c1 2c       	mov	r12, r1
				else if (SW1_pressed)
				{
					
					if(state == 0)
					{
						state = 1;
  fa:	51 e0       	ldi	r21, 0x01	; 1
  fc:	40 e0       	ldi	r20, 0x00	; 0
					}
					else if(state == 1)
					{
						state = 2;
  fe:	68 94       	set
 100:	bb 24       	eor	r11, r11
 102:	b1 f8       	bld	r11, 1
 104:	d1 2c       	mov	r13, r1
			{
				if(increment + 5 < 25)
				{
					if (increment == 1)
					{
						increment += 4;
 106:	05 e0       	ldi	r16, 0x05	; 5
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	0a c0       	rjmp	.+20     	; 0x120 <main+0x5a>
    while (1) 
    {
		_delay_ms(10); // debounce
		if(!(PINB & (1<<PINB7)) && !(PINB & (1<<PINB1))) // both pressed
		{
			SW2_pressed = 1;
 10c:	25 2f       	mov	r18, r21
 10e:	34 2f       	mov	r19, r20
			SW1_pressed = 1;
 110:	85 2f       	mov	r24, r21
 112:	94 2f       	mov	r25, r20
 114:	05 c0       	rjmp	.+10     	; 0x120 <main+0x5a>
		}
		else if(!(PINB & (1<<PINB7))) // SW1 Pressed
		{
			SW1_pressed = 1;
 116:	85 2f       	mov	r24, r21
 118:	94 2f       	mov	r25, r20
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x5a>
		}
		else if (!(PINB & (1<<PINB1))) // SW2 Pressed
		{
			SW2_pressed = 1;
 11c:	25 2f       	mov	r18, r21
 11e:	34 2f       	mov	r19, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	cf e3       	ldi	r28, 0x3F	; 63
 122:	dc e9       	ldi	r29, 0x9C	; 156
 124:	21 97       	sbiw	r28, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x5e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x64>
 12a:	00 00       	nop
	//int SW2_twice = 0;
	int state = 0;
    while (1) 
    {
		_delay_ms(10); // debounce
		if(!(PINB & (1<<PINB7)) && !(PINB & (1<<PINB1))) // both pressed
 12c:	1f 99       	sbic	0x03, 7	; 3
 12e:	02 c0       	rjmp	.+4      	; 0x134 <main+0x6e>
 130:	19 9b       	sbis	0x03, 1	; 3
 132:	ec cf       	rjmp	.-40     	; 0x10c <main+0x46>
		{
			SW2_pressed = 1;
			SW1_pressed = 1;
		}
		else if(!(PINB & (1<<PINB7))) // SW1 Pressed
 134:	1f 9b       	sbis	0x03, 7	; 3
 136:	ef cf       	rjmp	.-34     	; 0x116 <main+0x50>
		{
			SW1_pressed = 1;
		}
		else if (!(PINB & (1<<PINB1))) // SW2 Pressed
 138:	19 9b       	sbis	0x03, 1	; 3
 13a:	f0 cf       	rjmp	.-32     	; 0x11c <main+0x56>
		{
			SW2_pressed = 1;
		}
		else
		{
			if(SW1_pressed && SW2_pressed)
 13c:	89 2b       	or	r24, r25
 13e:	09 f4       	brne	.+2      	; 0x142 <main+0x7c>
 140:	61 c0       	rjmp	.+194    	; 0x204 <main+0x13e>
 142:	23 2b       	or	r18, r19
 144:	39 f1       	breq	.+78     	; 0x194 <main+0xce>
			{
				if(increment + 5 < 25)
 146:	c4 01       	movw	r24, r8
 148:	05 96       	adiw	r24, 0x05	; 5
 14a:	89 31       	cpi	r24, 0x19	; 25
 14c:	91 05       	cpc	r25, r1
 14e:	0c f0       	brlt	.+2      	; 0x152 <main+0x8c>
 150:	5d c0       	rjmp	.+186    	; 0x20c <main+0x146>
				{
					if (increment == 1)
 152:	8a 94       	dec	r8
 154:	89 28       	or	r8, r9
 156:	09 f0       	breq	.+2      	; 0x15a <main+0x94>
 158:	5c c0       	rjmp	.+184    	; 0x212 <main+0x14c>
					{
						increment += 4;
 15a:	80 2e       	mov	r8, r16
 15c:	91 2e       	mov	r9, r17
 15e:	5a c0       	rjmp	.+180    	; 0x214 <main+0x14e>
				SW1_pressed = 0;
				SW2_pressed = 0;
			}
				else if (SW2_pressed)
				{
					if(state == 0) // nothing yet
 160:	62 30       	cpi	r22, 0x02	; 2
 162:	71 05       	cpc	r23, r1
 164:	60 f0       	brcs	.+24     	; 0x17e <main+0xb8>
					}
					else if(state == 1)// SW1 once
					{
						state = 0; // break the sequence
					}
					else if(state == 2) // SW1 twice
 166:	62 30       	cpi	r22, 0x02	; 2
 168:	71 05       	cpc	r23, r1
 16a:	61 f0       	breq	.+24     	; 0x184 <main+0xbe>
					{
						state = 3; // move to SW2 once
					}
					else if (state == 3)
 16c:	63 30       	cpi	r22, 0x03	; 3
 16e:	71 05       	cpc	r23, r1
 170:	61 f0       	breq	.+24     	; 0x18a <main+0xc4>
					{
						state = 4; // move to SW2 twice
					}
					else if (state == 4)
 172:	64 30       	cpi	r22, 0x04	; 4
 174:	71 05       	cpc	r23, r1
 176:	59 f4       	brne	.+22     	; 0x18e <main+0xc8>
					{
						state = 0;
 178:	6f 2f       	mov	r22, r31
 17a:	7e 2f       	mov	r23, r30
 17c:	08 c0       	rjmp	.+16     	; 0x18e <main+0xc8>
			}
				else if (SW2_pressed)
				{
					if(state == 0) // nothing yet
					{
						state = 0;//still nothing
 17e:	6f 2f       	mov	r22, r31
 180:	7e 2f       	mov	r23, r30
 182:	05 c0       	rjmp	.+10     	; 0x18e <main+0xc8>
					{
						state = 0; // break the sequence
					}
					else if(state == 2) // SW1 twice
					{
						state = 3; // move to SW2 once
 184:	6e 2d       	mov	r22, r14
 186:	7f 2d       	mov	r23, r15
 188:	02 c0       	rjmp	.+4      	; 0x18e <main+0xc8>
					}
					else if (state == 3)
					{
						state = 4; // move to SW2 twice
 18a:	6a 2d       	mov	r22, r10
 18c:	7c 2d       	mov	r23, r12
					}
					else if (state == 4)
					{
						state = 0;
					}
					counter-=increment;
 18e:	a8 19       	sub	r26, r8
 190:	b9 09       	sbc	r27, r9
 192:	1a c0       	rjmp	.+52     	; 0x1c8 <main+0x102>
					SW2_pressed = 0;
				}
				else if (SW1_pressed)
				{
					
					if(state == 0)
 194:	61 15       	cp	r22, r1
 196:	71 05       	cpc	r23, r1
 198:	69 f0       	breq	.+26     	; 0x1b4 <main+0xee>
					{
						state = 1;
					}
					else if(state == 1)
 19a:	cb 01       	movw	r24, r22
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	02 97       	sbiw	r24, 0x02	; 2
 1a0:	60 f0       	brcs	.+24     	; 0x1ba <main+0xf4>
					}
					else if(state == 2)
					{
						state = 2;
					}
					else if(state == 3)
 1a2:	63 30       	cpi	r22, 0x03	; 3
 1a4:	71 05       	cpc	r23, r1
 1a6:	61 f0       	breq	.+24     	; 0x1c0 <main+0xfa>
					{
						state = 0;
					}
					else if(state == 4)
 1a8:	64 30       	cpi	r22, 0x04	; 4
 1aa:	71 05       	cpc	r23, r1
 1ac:	59 f4       	brne	.+22     	; 0x1c4 <main+0xfe>
					{
						state = 1;
 1ae:	65 2f       	mov	r22, r21
 1b0:	74 2f       	mov	r23, r20
 1b2:	08 c0       	rjmp	.+16     	; 0x1c4 <main+0xfe>
				else if (SW1_pressed)
				{
					
					if(state == 0)
					{
						state = 1;
 1b4:	65 2f       	mov	r22, r21
 1b6:	74 2f       	mov	r23, r20
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <main+0xfe>
					}
					else if(state == 1)
					{
						state = 2;
 1ba:	6b 2d       	mov	r22, r11
 1bc:	7d 2d       	mov	r23, r13
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <main+0xfe>
					{
						state = 2;
					}
					else if(state == 3)
					{
						state = 0;
 1c0:	6f 2f       	mov	r22, r31
 1c2:	7e 2f       	mov	r23, r30
					}
					else if(state == 4)
					{
						state = 1;
					}
					counter+=increment;
 1c4:	a8 0d       	add	r26, r8
 1c6:	b9 1d       	adc	r27, r9
					SW1_pressed = 0;
				}
				if(state == 4)
 1c8:	64 30       	cpi	r22, 0x04	; 4
 1ca:	71 05       	cpc	r23, r1
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <main+0x10c>
				{
					counter = 0;
 1ce:	a0 e0       	ldi	r26, 0x00	; 0
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
				}
		PORTD = counter;
 1d2:	ab b9       	out	0x0b, r26	; 11
 1d4:	2f e7       	ldi	r18, 0x7F	; 127
 1d6:	8a e1       	ldi	r24, 0x1A	; 26
 1d8:	96 e0       	ldi	r25, 0x06	; 6
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x114>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x11e>
 1e4:	00 00       	nop
		_delay_ms(125);
		PORTD = 0b00000000;
 1e6:	1b b8       	out	0x0b, r1	; 11
 1e8:	cf e7       	ldi	r28, 0x7F	; 127
 1ea:	da e1       	ldi	r29, 0x1A	; 26
 1ec:	26 e0       	ldi	r18, 0x06	; 6
 1ee:	c1 50       	subi	r28, 0x01	; 1
 1f0:	d0 40       	sbci	r29, 0x00	; 0
 1f2:	20 40       	sbci	r18, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x128>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x132>
 1f8:	00 00       	nop
 1fa:	2f 2f       	mov	r18, r31
 1fc:	3e 2f       	mov	r19, r30
 1fe:	8f 2f       	mov	r24, r31
 200:	9e 2f       	mov	r25, r30
 202:	8e cf       	rjmp	.-228    	; 0x120 <main+0x5a>
				}
				state = 0;
				SW1_pressed = 0;
				SW2_pressed = 0;
			}
				else if (SW2_pressed)
 204:	23 2b       	or	r18, r19
 206:	09 f0       	breq	.+2      	; 0x20a <main+0x144>
 208:	ab cf       	rjmp	.-170    	; 0x160 <main+0x9a>
 20a:	de cf       	rjmp	.-68     	; 0x1c8 <main+0x102>
						increment += 5;
					}
				}
				else
				{
					increment = 1;
 20c:	85 2e       	mov	r8, r21
 20e:	94 2e       	mov	r9, r20
 210:	01 c0       	rjmp	.+2      	; 0x214 <main+0x14e>
					{
						increment += 4;
					}
					else
					{
						increment += 5;
 212:	4c 01       	movw	r8, r24
					counter+=increment;
					SW1_pressed = 0;
				}
				if(state == 4)
				{
					counter = 0;
 214:	6f 2f       	mov	r22, r31
 216:	7e 2f       	mov	r23, r30
 218:	dc cf       	rjmp	.-72     	; 0x1d2 <main+0x10c>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
