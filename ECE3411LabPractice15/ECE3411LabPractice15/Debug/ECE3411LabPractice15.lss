
ECE3411LabPractice15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000a34  00000ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800136  00800136  00000afe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001218  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf6  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074e  00000000  00000000  00002a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f1  00000000  00000000  000033b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000649  00000000  00000000  000039a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003fee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_17>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_21>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e3       	ldi	r30, 0x34	; 52
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 33       	cpi	r26, 0x36	; 54
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e3       	ldi	r26, 0x36	; 54
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 39       	cpi	r26, 0x9B	; 155
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  ea:	0c 94 18 05 	jmp	0xa30	; 0xa30 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <InitTimer0>:
	PORTB &= ~(1<<SPI_SS); // Pull Slave_Select low
	SPDR0 = cData; // Start transmission
	while( !(SPSR0 & (1<<SPIF)) ); // Wait for transmission complete
	PORTB |= (1<<SPI_SS); // Pull Slave Select High
	return SPDR0; // Return received data
}
  f2:	84 b5       	in	r24, 0x24	; 36
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	84 bd       	out	0x24, r24	; 36
  f8:	89 ef       	ldi	r24, 0xF9	; 249
  fa:	87 bd       	out	0x27, r24	; 39
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	85 bd       	out	0x25, r24	; 37
 106:	08 95       	ret

00000108 <setupADC>:
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8e 68       	ori	r24, 0x8E	; 142
 110:	80 83       	st	Z, r24
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 118:	08 95       	ret

0000011a <startConversion>:
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <UART_Init>:
 126:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 12a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 12e:	88 e1       	ldi	r24, 0x18	; 24
 130:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 13a:	08 95       	ret

0000013c <SPI_MasterInit>:
 13c:	8d e2       	ldi	r24, 0x2D	; 45
 13e:	84 b9       	out	0x04, r24	; 4
 140:	83 ed       	ldi	r24, 0xD3	; 211
 142:	8c bd       	out	0x2c, r24	; 44
 144:	08 95       	ret

00000146 <writeDouble>:

void writeDouble(double number) // writes a double (X.XX) to the buffer
{
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	6b 01       	movw	r12, r22
 154:	7c 01       	movw	r14, r24
	//if(number > 99)
	//uart_putchar((int)number / 100 + 48, &UART_Stream);
	//uart_putchar((int)number %100 / 10 + 48, &UART_Stream);
	uart_putchar((int)number % 10 + 48, &UART_Stream); // + 48 converts the integer to the corresponding character in ASCII
 156:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fixsfsi>
 15a:	ca e0       	ldi	r28, 0x0A	; 10
 15c:	d0 e0       	ldi	r29, 0x00	; 0
 15e:	cb 01       	movw	r24, r22
 160:	be 01       	movw	r22, r28
 162:	0e 94 85 04 	call	0x90a	; 0x90a <__divmodhi4>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	71 e0       	ldi	r23, 0x01	; 1
 16a:	80 5d       	subi	r24, 0xD0	; 208
 16c:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
	uart_putchar('.', &UART_Stream);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	71 e0       	ldi	r23, 0x01	; 1
 174:	8e e2       	ldi	r24, 0x2E	; 46
 176:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
	uart_putchar((int)(number * 10) % 10 + 48, &UART_Stream);
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	40 e2       	ldi	r20, 0x20	; 32
 180:	51 e4       	ldi	r21, 0x41	; 65
 182:	c7 01       	movw	r24, r14
 184:	b6 01       	movw	r22, r12
 186:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__mulsf3>
 18a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fixsfsi>
 18e:	cb 01       	movw	r24, r22
 190:	be 01       	movw	r22, r28
 192:	0e 94 85 04 	call	0x90a	; 0x90a <__divmodhi4>
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	71 e0       	ldi	r23, 0x01	; 1
 19a:	80 5d       	subi	r24, 0xD0	; 208
 19c:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
	uart_putchar((int)(number * 100) % 10 + 48, &UART_Stream);
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	48 ec       	ldi	r20, 0xC8	; 200
 1a6:	52 e4       	ldi	r21, 0x42	; 66
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__mulsf3>
 1b0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fixsfsi>
 1b4:	cb 01       	movw	r24, r22
 1b6:	be 01       	movw	r22, r28
 1b8:	0e 94 85 04 	call	0x90a	; 0x90a <__divmodhi4>
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	71 e0       	ldi	r23, 0x01	; 1
 1c0:	80 5d       	subi	r24, 0xD0	; 208
 1c2:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
	uart_putchar('\n', &UART_Stream);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	71 e0       	ldi	r23, 0x01	; 1
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	08 95       	ret

000001de <writeMSG>:

void writeMSG(void)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
	
	for(int i=0; i<strlen(pot_preamble); i++)
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	08 c0       	rjmp	.+16     	; 0x1f8 <writeMSG+0x1a>
	{
		uart_putchar(pot_preamble[i], &UART_Stream);
 1e8:	ac 0f       	add	r26, r28
 1ea:	bd 1f       	adc	r27, r29
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	71 e0       	ldi	r23, 0x01	; 1
 1f0:	8c 91       	ld	r24, X
 1f2:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
}

void writeMSG(void)
{
	
	for(int i=0; i<strlen(pot_preamble); i++)
 1f6:	21 96       	adiw	r28, 0x01	; 1
 1f8:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <pot_preamble>
 1fc:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <pot_preamble+0x1>
 200:	fd 01       	movw	r30, r26
 202:	01 90       	ld	r0, Z+
 204:	00 20       	and	r0, r0
 206:	e9 f7       	brne	.-6      	; 0x202 <writeMSG+0x24>
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	ea 1b       	sub	r30, r26
 20c:	fb 0b       	sbc	r31, r27
 20e:	ce 17       	cp	r28, r30
 210:	df 07       	cpc	r29, r31
 212:	50 f3       	brcs	.-44     	; 0x1e8 <writeMSG+0xa>
	{
		uart_putchar(pot_preamble[i], &UART_Stream);
	}
	writeDouble(potVolt);
 214:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <potVolt>
 218:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <potVolt+0x1>
 21c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <potVolt+0x2>
 220:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <potVolt+0x3>
 224:	0e 94 a3 00 	call	0x146	; 0x146 <writeDouble>
	for(int i=0; i<strlen(dac_preamble); i++)
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	08 c0       	rjmp	.+16     	; 0x23e <writeMSG+0x60>
	{
		uart_putchar(dac_preamble[i], &UART_Stream);
 22e:	ac 0f       	add	r26, r28
 230:	bd 1f       	adc	r27, r29
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	8c 91       	ld	r24, X
 238:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
	for(int i=0; i<strlen(pot_preamble); i++)
	{
		uart_putchar(pot_preamble[i], &UART_Stream);
	}
	writeDouble(potVolt);
	for(int i=0; i<strlen(dac_preamble); i++)
 23c:	21 96       	adiw	r28, 0x01	; 1
 23e:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <dac_preamble>
 242:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <dac_preamble+0x1>
 246:	fd 01       	movw	r30, r26
 248:	01 90       	ld	r0, Z+
 24a:	00 20       	and	r0, r0
 24c:	e9 f7       	brne	.-6      	; 0x248 <writeMSG+0x6a>
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	ea 1b       	sub	r30, r26
 252:	fb 0b       	sbc	r31, r27
 254:	ce 17       	cp	r28, r30
 256:	df 07       	cpc	r29, r31
 258:	50 f3       	brcs	.-44     	; 0x22e <writeMSG+0x50>
	{
		uart_putchar(dac_preamble[i], &UART_Stream);
	}
	writeDouble(dacVolt);
 25a:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <dacVolt>
 25e:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <dacVolt+0x1>
 262:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <dacVolt+0x2>
 266:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <dacVolt+0x3>
 26a:	0e 94 a3 00 	call	0x146	; 0x146 <writeDouble>
	uart_putchar('\n', &UART_Stream);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	71 e0       	ldi	r23, 0x01	; 1
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
	
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <__vector_14>:
	return SPDR0;
}
*/
	
ISR(TIMER0_COMPA_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
	counter++;
 28c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <counter>
 290:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <counter+0x1>
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <counter+0x1>
 29a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <counter>
}
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__vector_21>:

ISR(ADC_vect)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
	
	switch (ADMUX)
 2d2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	19 f0       	breq	.+6      	; 0x2e0 <__vector_21+0x34>
 2da:	85 30       	cpi	r24, 0x05	; 5
 2dc:	59 f1       	breq	.+86     	; 0x334 <__vector_21+0x88>
 2de:	46 c0       	rjmp	.+140    	; 0x36c <__vector_21+0xc0>
	{
		case 4:
			potVolt = ADC*(5.0/1024);
 2e0:	c8 e7       	ldi	r28, 0x78	; 120
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
 2e4:	68 81       	ld	r22, Y
 2e6:	79 81       	ldd	r23, Y+1	; 0x01
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 8a 03 	call	0x714	; 0x714 <__floatunsisf>
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	40 ea       	ldi	r20, 0xA0	; 160
 2f6:	5b e3       	ldi	r21, 0x3B	; 59
 2f8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__mulsf3>
 2fc:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <potVolt>
 300:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <potVolt+0x1>
 304:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <potVolt+0x2>
 308:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <potVolt+0x3>
			ADMUX = 5;
 30c:	85 e0       	ldi	r24, 0x05	; 5
 30e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			temp = ADC << 2; // Normalize ADC to 12 bits
 312:	88 81       	ld	r24, Y
 314:	99 81       	ldd	r25, Y+1	; 0x01
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <temp+0x1>
 322:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <temp>
			PORTB &= ~(1<<SPI_SS); // Pull Slave_Select low
 326:	2a 98       	cbi	0x05, 2	; 5
			PORTB |= (1<<SPI_LDAC); // Pull LDAC high if not already
 328:	28 9a       	sbi	0x05, 0	; 5
			SPDR0 = DAC_COMMAND | (temp >> 8); // transmit 4bit command + 4 MSB of 12 bit data
 32a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <temp+0x1>
 32e:	80 67       	ori	r24, 0x70	; 112
 330:	8e bd       	out	0x2e, r24	; 46
			break;
 332:	1c c0       	rjmp	.+56     	; 0x36c <__vector_21+0xc0>
		case 5:
			dacVolt = ADC*(5.0/1024);
 334:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 338:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 8a 03 	call	0x714	; 0x714 <__floatunsisf>
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 ea       	ldi	r20, 0xA0	; 160
 34a:	5b e3       	ldi	r21, 0x3B	; 59
 34c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__mulsf3>
 350:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <dacVolt>
 354:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <dacVolt+0x1>
 358:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <dacVolt+0x2>
 35c:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <dacVolt+0x3>
			PORTB |= (1<<SPI_LDAC); //reassert LDAC
 360:	28 9a       	sbi	0x05, 0	; 5
			ADMUX = 4;
 362:	84 e0       	ldi	r24, 0x04	; 4
 364:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			writeMSG();
 368:	0e 94 ef 00 	call	0x1de	; 0x1de <writeMSG>
			break;
		default:
			break;
	}
}
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <__vector_17>:

ISR(SPI0_STC_vect)
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	if(!isSecondHalf)
 3b4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 3b8:	81 11       	cpse	r24, r1
 3ba:	07 c0       	rjmp	.+14     	; 0x3ca <__vector_17+0x38>
	{
		isSecondHalf = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		SPDR0 = temp;
 3c2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <temp>
 3c6:	8e bd       	out	0x2e, r24	; 46
 3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <__vector_17+0x44>
	}
	else
	{
		isSecondHalf = 0;
 3ca:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
		PORTB |= (1<<SPI_SS); // Pull SS high again
 3ce:	2a 9a       	sbi	0x05, 2	; 5
		PORTB &= ~(1<<SPI_LDAC); // Pull LDAC low
 3d0:	28 98       	cbi	0x05, 0	; 5
		startConversion();
 3d2:	0e 94 8d 00 	call	0x11a	; 0x11a <startConversion>
	}
}
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	bf 91       	pop	r27
 3dc:	af 91       	pop	r26
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	7f 91       	pop	r23
 3e4:	6f 91       	pop	r22
 3e6:	5f 91       	pop	r21
 3e8:	4f 91       	pop	r20
 3ea:	3f 91       	pop	r19
 3ec:	2f 91       	pop	r18
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <main>:

int main(void)
{
	InitTimer0();
 3f8:	0e 94 79 00 	call	0xf2	; 0xf2 <InitTimer0>
	UART_Init(MYUBRR);
 3fc:	87 e6       	ldi	r24, 0x67	; 103
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 93 00 	call	0x126	; 0x126 <UART_Init>
	setupADC();
 404:	0e 94 84 00 	call	0x108	; 0x108 <setupADC>
	SPI_MasterInit();
 408:	0e 94 9e 00 	call	0x13c	; 0x13c <SPI_MasterInit>
	sei();
 40c:	78 94       	sei
	while (1)
	{
		if(counter >= 999)
		{
			counter = 0;
			ADMUX = 4;
 40e:	0c e7       	ldi	r16, 0x7C	; 124
 410:	10 e0       	ldi	r17, 0x00	; 0
 412:	c4 e0       	ldi	r28, 0x04	; 4
	SPI_MasterInit();
	sei();
	/* Replace with your application code */
	while (1)
	{
		if(counter >= 999)
 414:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <counter>
 418:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <counter+0x1>
 41c:	87 3e       	cpi	r24, 0xE7	; 231
 41e:	93 40       	sbci	r25, 0x03	; 3
 420:	c8 f3       	brcs	.-14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		{
			counter = 0;
 422:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <counter+0x1>
 426:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <counter>
			ADMUX = 4;
 42a:	f8 01       	movw	r30, r16
 42c:	c0 83       	st	Z, r28
			startConversion();
 42e:	0e 94 8d 00 	call	0x11a	; 0x11a <startConversion>
 432:	f0 cf       	rjmp	.-32     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>

00000434 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 434:	cf 93       	push	r28
 436:	c8 2f       	mov	r28, r24

  if (c == '\a')
 438:	87 30       	cpi	r24, 0x07	; 7
 43a:	69 f4       	brne	.+26     	; 0x456 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 43c:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <__iob+0x4>
 440:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <__iob+0x5>
 444:	47 e0       	ldi	r20, 0x07	; 7
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	8e e2       	ldi	r24, 0x2E	; 46
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 ad 04 	call	0x95a	; 0x95a <fwrite>
      return 0;
 454:	0c c0       	rjmp	.+24     	; 0x46e <uart_putchar+0x3a>
    }

  if (c == '\n')
 456:	8a 30       	cpi	r24, 0x0A	; 10
 458:	19 f4       	brne	.+6      	; 0x460 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 45a:	8d e0       	ldi	r24, 0x0D	; 13
 45c:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 460:	e0 ec       	ldi	r30, 0xC0	; 192
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	85 ff       	sbrs	r24, 5
 468:	fd cf       	rjmp	.-6      	; 0x464 <uart_putchar+0x30>
  UDR0 = c;
 46a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

  return 0;
}
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 476:	6f 92       	push	r6
 478:	7f 92       	push	r7
 47a:	8f 92       	push	r8
 47c:	9f 92       	push	r9
 47e:	af 92       	push	r10
 480:	bf 92       	push	r11
 482:	cf 92       	push	r12
 484:	df 92       	push	r13
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 492:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <rxp.1828>
 496:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <rxp.1828+0x1>
 49a:	23 2b       	or	r18, r19
 49c:	09 f0       	breq	.+2      	; 0x4a0 <uart_getchar+0x2a>
 49e:	da c0       	rjmp	.+436    	; 0x654 <uart_getchar+0x1de>
 4a0:	8c 01       	movw	r16, r24
 4a2:	0f 2e       	mov	r0, r31
 4a4:	f3 e4       	ldi	r31, 0x43	; 67
 4a6:	8f 2e       	mov	r8, r31
 4a8:	f1 e0       	ldi	r31, 0x01	; 1
 4aa:	9f 2e       	mov	r9, r31
 4ac:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 4ae:	c0 ec       	ldi	r28, 0xC0	; 192
 4b0:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 4b2:	0f 2e       	mov	r0, r31
 4b4:	f6 ec       	ldi	r31, 0xC6	; 198
 4b6:	cf 2e       	mov	r12, r31
 4b8:	d1 2c       	mov	r13, r1
 4ba:	f0 2d       	mov	r31, r0
 4bc:	54 01       	movw	r10, r8
 4be:	0f 2e       	mov	r0, r31
 4c0:	f2 e4       	ldi	r31, 0x42	; 66
 4c2:	6f 2e       	mov	r6, r31
 4c4:	f1 e0       	ldi	r31, 0x01	; 1
 4c6:	7f 2e       	mov	r7, r31
 4c8:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 4ca:	88 81       	ld	r24, Y
 4cc:	88 23       	and	r24, r24
 4ce:	ec f7       	brge	.-6      	; 0x4ca <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 4d0:	88 81       	ld	r24, Y
 4d2:	84 fd       	sbrc	r24, 4
 4d4:	d2 c0       	rjmp	.+420    	; 0x67a <uart_getchar+0x204>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 4d6:	88 81       	ld	r24, Y
 4d8:	83 fd       	sbrc	r24, 3
 4da:	d2 c0       	rjmp	.+420    	; 0x680 <uart_getchar+0x20a>
	  return _FDEV_ERR;
	c = UDR0;
 4dc:	f6 01       	movw	r30, r12
 4de:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 4e0:	8d 30       	cpi	r24, 0x0D	; 13
 4e2:	11 f0       	breq	.+4      	; 0x4e8 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 4e4:	8a 30       	cpi	r24, 0x0A	; 10
 4e6:	69 f4       	brne	.+26     	; 0x502 <uart_getchar+0x8c>
	  {
	    *cp = c;
 4e8:	8a e0       	ldi	r24, 0x0A	; 10
 4ea:	f4 01       	movw	r30, r8
 4ec:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 4ee:	b8 01       	movw	r22, r16
 4f0:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
	    rxp = b;
 4f4:	83 e4       	ldi	r24, 0x43	; 67
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <rxp.1828+0x1>
 4fc:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <rxp.1828>
	    break;
 500:	a9 c0       	rjmp	.+338    	; 0x654 <uart_getchar+0x1de>
	  }
	else if (c == '\t')
 502:	89 30       	cpi	r24, 0x09	; 9
 504:	39 f0       	breq	.+14     	; 0x514 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 506:	90 ee       	ldi	r25, 0xE0	; 224
 508:	98 0f       	add	r25, r24
 50a:	9f 35       	cpi	r25, 0x5F	; 95
 50c:	20 f0       	brcs	.+8      	; 0x516 <uart_getchar+0xa0>
 50e:	80 3a       	cpi	r24, 0xA0	; 160
 510:	b8 f0       	brcs	.+46     	; 0x540 <uart_getchar+0xca>
 512:	01 c0       	rjmp	.+2      	; 0x516 <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 514:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 516:	f2 e9       	ldi	r31, 0x92	; 146
 518:	8f 16       	cp	r8, r31
 51a:	f1 e0       	ldi	r31, 0x01	; 1
 51c:	9f 06       	cpc	r9, r31
 51e:	29 f4       	brne	.+10     	; 0x52a <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 520:	b8 01       	movw	r22, r16
 522:	87 e0       	ldi	r24, 0x07	; 7
 524:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
 528:	d0 cf       	rjmp	.-96     	; 0x4ca <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 52a:	74 01       	movw	r14, r8
 52c:	9f ef       	ldi	r25, 0xFF	; 255
 52e:	e9 1a       	sub	r14, r25
 530:	f9 0a       	sbc	r15, r25
 532:	f4 01       	movw	r30, r8
 534:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 536:	b8 01       	movw	r22, r16
 538:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 53c:	47 01       	movw	r8, r14
 53e:	c5 cf       	rjmp	.-118    	; 0x4ca <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 540:	82 31       	cpi	r24, 0x12	; 18
 542:	d1 f1       	breq	.+116    	; 0x5b8 <uart_getchar+0x142>
 544:	30 f4       	brcc	.+12     	; 0x552 <uart_getchar+0xdc>
 546:	83 30       	cpi	r24, 0x03	; 3
 548:	09 f4       	brne	.+2      	; 0x54c <uart_getchar+0xd6>
 54a:	9d c0       	rjmp	.+314    	; 0x686 <uart_getchar+0x210>
 54c:	88 30       	cpi	r24, 0x08	; 8
 54e:	e9 f0       	breq	.+58     	; 0x58a <uart_getchar+0x114>
 550:	bc cf       	rjmp	.-136    	; 0x4ca <uart_getchar+0x54>
 552:	87 31       	cpi	r24, 0x17	; 23
 554:	29 f0       	breq	.+10     	; 0x560 <uart_getchar+0xea>
 556:	8f 37       	cpi	r24, 0x7F	; 127
 558:	c1 f0       	breq	.+48     	; 0x58a <uart_getchar+0x114>
 55a:	85 31       	cpi	r24, 0x15	; 21
 55c:	79 f0       	breq	.+30     	; 0x57c <uart_getchar+0x106>
 55e:	b5 cf       	rjmp	.-150    	; 0x4ca <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 560:	f3 e4       	ldi	r31, 0x43	; 67
 562:	8f 16       	cp	r8, r31
 564:	f1 e0       	ldi	r31, 0x01	; 1
 566:	9f 06       	cpc	r9, r31
 568:	09 f0       	breq	.+2      	; 0x56c <uart_getchar+0xf6>
 56a:	08 f4       	brcc	.+2      	; 0x56e <uart_getchar+0xf8>
 56c:	ae cf       	rjmp	.-164    	; 0x4ca <uart_getchar+0x54>
 56e:	f4 01       	movw	r30, r8
 570:	31 97       	sbiw	r30, 0x01	; 1
 572:	80 81       	ld	r24, Z
 574:	80 32       	cpi	r24, 0x20	; 32
 576:	09 f0       	breq	.+2      	; 0x57a <uart_getchar+0x104>
 578:	52 c0       	rjmp	.+164    	; 0x61e <uart_getchar+0x1a8>
 57a:	a7 cf       	rjmp	.-178    	; 0x4ca <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 57c:	83 e4       	ldi	r24, 0x43	; 67
 57e:	88 16       	cp	r8, r24
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	98 06       	cpc	r9, r24
 584:	09 f0       	breq	.+2      	; 0x588 <uart_getchar+0x112>
 586:	98 f5       	brcc	.+102    	; 0x5ee <uart_getchar+0x178>
 588:	a0 cf       	rjmp	.-192    	; 0x4ca <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 58a:	93 e4       	ldi	r25, 0x43	; 67
 58c:	89 16       	cp	r8, r25
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	99 06       	cpc	r9, r25
 592:	09 f0       	breq	.+2      	; 0x596 <uart_getchar+0x120>
 594:	08 f4       	brcc	.+2      	; 0x598 <uart_getchar+0x122>
 596:	99 cf       	rjmp	.-206    	; 0x4ca <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 598:	b8 01       	movw	r22, r16
 59a:	88 e0       	ldi	r24, 0x08	; 8
 59c:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
		uart_putchar(' ', stream);
 5a0:	b8 01       	movw	r22, r16
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
		uart_putchar('\b', stream);
 5a8:	b8 01       	movw	r22, r16
 5aa:	88 e0       	ldi	r24, 0x08	; 8
 5ac:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
		cp--;
 5b0:	e1 e0       	ldi	r30, 0x01	; 1
 5b2:	8e 1a       	sub	r8, r30
 5b4:	91 08       	sbc	r9, r1
 5b6:	89 cf       	rjmp	.-238    	; 0x4ca <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 5b8:	b8 01       	movw	r22, r16
 5ba:	8d e0       	ldi	r24, 0x0D	; 13
 5bc:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 5c0:	f3 e4       	ldi	r31, 0x43	; 67
 5c2:	8f 16       	cp	r8, r31
 5c4:	f1 e0       	ldi	r31, 0x01	; 1
 5c6:	9f 06       	cpc	r9, r31
 5c8:	09 f0       	breq	.+2      	; 0x5cc <uart_getchar+0x156>
 5ca:	08 f4       	brcc	.+2      	; 0x5ce <uart_getchar+0x158>
 5cc:	7e cf       	rjmp	.-260    	; 0x4ca <uart_getchar+0x54>
 5ce:	0f 2e       	mov	r0, r31
 5d0:	f3 e4       	ldi	r31, 0x43	; 67
 5d2:	ef 2e       	mov	r14, r31
 5d4:	f1 e0       	ldi	r31, 0x01	; 1
 5d6:	ff 2e       	mov	r15, r31
 5d8:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 5da:	b8 01       	movw	r22, r16
 5dc:	f7 01       	movw	r30, r14
 5de:	81 91       	ld	r24, Z+
 5e0:	7f 01       	movw	r14, r30
 5e2:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 5e6:	8e 14       	cp	r8, r14
 5e8:	9f 04       	cpc	r9, r15
 5ea:	b9 f7       	brne	.-18     	; 0x5da <uart_getchar+0x164>
 5ec:	6e cf       	rjmp	.-292    	; 0x4ca <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 5ee:	b8 01       	movw	r22, r16
 5f0:	88 e0       	ldi	r24, 0x08	; 8
 5f2:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
		uart_putchar(' ', stream);
 5f6:	b8 01       	movw	r22, r16
 5f8:	80 e2       	ldi	r24, 0x20	; 32
 5fa:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
		uart_putchar('\b', stream);
 5fe:	b8 01       	movw	r22, r16
 600:	88 e0       	ldi	r24, 0x08	; 8
 602:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
		cp--;
 606:	f1 e0       	ldi	r31, 0x01	; 1
 608:	8f 1a       	sub	r8, r31
 60a:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 60c:	83 e4       	ldi	r24, 0x43	; 67
 60e:	88 16       	cp	r8, r24
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	98 06       	cpc	r9, r24
 614:	61 f7       	brne	.-40     	; 0x5ee <uart_getchar+0x178>
 616:	f3 01       	movw	r30, r6
 618:	31 96       	adiw	r30, 0x01	; 1
 61a:	4f 01       	movw	r8, r30
 61c:	56 cf       	rjmp	.-340    	; 0x4ca <uart_getchar+0x54>
 61e:	74 01       	movw	r14, r8
 620:	f1 e0       	ldi	r31, 0x01	; 1
 622:	ef 1a       	sub	r14, r31
 624:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 626:	b8 01       	movw	r22, r16
 628:	88 e0       	ldi	r24, 0x08	; 8
 62a:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
		uart_putchar(' ', stream);
 62e:	b8 01       	movw	r22, r16
 630:	80 e2       	ldi	r24, 0x20	; 32
 632:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
		uart_putchar('\b', stream);
 636:	b8 01       	movw	r22, r16
 638:	88 e0       	ldi	r24, 0x08	; 8
 63a:	0e 94 1a 02 	call	0x434	; 0x434 <uart_putchar>
		cp--;
 63e:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 640:	ea 14       	cp	r14, r10
 642:	fb 04       	cpc	r15, r11
 644:	09 f4       	brne	.+2      	; 0x648 <uart_getchar+0x1d2>
 646:	41 cf       	rjmp	.-382    	; 0x4ca <uart_getchar+0x54>
 648:	f7 01       	movw	r30, r14
 64a:	82 91       	ld	r24, -Z
 64c:	7f 01       	movw	r14, r30
 64e:	80 32       	cpi	r24, 0x20	; 32
 650:	51 f7       	brne	.-44     	; 0x626 <uart_getchar+0x1b0>
 652:	3b cf       	rjmp	.-394    	; 0x4ca <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 654:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <rxp.1828>
 658:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <rxp.1828+0x1>
 65c:	cf 01       	movw	r24, r30
 65e:	01 96       	adiw	r24, 0x01	; 1
 660:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <rxp.1828+0x1>
 664:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <rxp.1828>
 668:	80 81       	ld	r24, Z
  if (c == '\n')
 66a:	8a 30       	cpi	r24, 0x0A	; 10
 66c:	21 f4       	brne	.+8      	; 0x676 <uart_getchar+0x200>
    rxp = 0;
 66e:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <rxp.1828+0x1>
 672:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <rxp.1828>

  return c;
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	08 c0       	rjmp	.+16     	; 0x68a <uart_getchar+0x214>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 67a:	8e ef       	ldi	r24, 0xFE	; 254
 67c:	9f ef       	ldi	r25, 0xFF	; 255
 67e:	05 c0       	rjmp	.+10     	; 0x68a <uart_getchar+0x214>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	9f ef       	ldi	r25, 0xFF	; 255
 684:	02 c0       	rjmp	.+4      	; 0x68a <uart_getchar+0x214>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 686:	8f ef       	ldi	r24, 0xFF	; 255
 688:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	ff 90       	pop	r15
 694:	ef 90       	pop	r14
 696:	df 90       	pop	r13
 698:	cf 90       	pop	r12
 69a:	bf 90       	pop	r11
 69c:	af 90       	pop	r10
 69e:	9f 90       	pop	r9
 6a0:	8f 90       	pop	r8
 6a2:	7f 90       	pop	r7
 6a4:	6f 90       	pop	r6
 6a6:	08 95       	ret

000006a8 <__fixsfsi>:
 6a8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fixunssfsi>
 6ac:	68 94       	set
 6ae:	b1 11       	cpse	r27, r1
 6b0:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_szero>
 6b4:	08 95       	ret

000006b6 <__fixunssfsi>:
 6b6:	0e 94 cf 03 	call	0x79e	; 0x79e <__fp_splitA>
 6ba:	88 f0       	brcs	.+34     	; 0x6de <__fixunssfsi+0x28>
 6bc:	9f 57       	subi	r25, 0x7F	; 127
 6be:	98 f0       	brcs	.+38     	; 0x6e6 <__fixunssfsi+0x30>
 6c0:	b9 2f       	mov	r27, r25
 6c2:	99 27       	eor	r25, r25
 6c4:	b7 51       	subi	r27, 0x17	; 23
 6c6:	b0 f0       	brcs	.+44     	; 0x6f4 <__fixunssfsi+0x3e>
 6c8:	e1 f0       	breq	.+56     	; 0x702 <__fixunssfsi+0x4c>
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	1a f0       	brmi	.+6      	; 0x6da <__fixunssfsi+0x24>
 6d4:	ba 95       	dec	r27
 6d6:	c9 f7       	brne	.-14     	; 0x6ca <__fixunssfsi+0x14>
 6d8:	14 c0       	rjmp	.+40     	; 0x702 <__fixunssfsi+0x4c>
 6da:	b1 30       	cpi	r27, 0x01	; 1
 6dc:	91 f0       	breq	.+36     	; 0x702 <__fixunssfsi+0x4c>
 6de:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__fp_zero>
 6e2:	b1 e0       	ldi	r27, 0x01	; 1
 6e4:	08 95       	ret
 6e6:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_zero>
 6ea:	67 2f       	mov	r22, r23
 6ec:	78 2f       	mov	r23, r24
 6ee:	88 27       	eor	r24, r24
 6f0:	b8 5f       	subi	r27, 0xF8	; 248
 6f2:	39 f0       	breq	.+14     	; 0x702 <__fixunssfsi+0x4c>
 6f4:	b9 3f       	cpi	r27, 0xF9	; 249
 6f6:	cc f3       	brlt	.-14     	; 0x6ea <__fixunssfsi+0x34>
 6f8:	86 95       	lsr	r24
 6fa:	77 95       	ror	r23
 6fc:	67 95       	ror	r22
 6fe:	b3 95       	inc	r27
 700:	d9 f7       	brne	.-10     	; 0x6f8 <__fixunssfsi+0x42>
 702:	3e f4       	brtc	.+14     	; 0x712 <__fixunssfsi+0x5c>
 704:	90 95       	com	r25
 706:	80 95       	com	r24
 708:	70 95       	com	r23
 70a:	61 95       	neg	r22
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
 70e:	8f 4f       	sbci	r24, 0xFF	; 255
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	08 95       	ret

00000714 <__floatunsisf>:
 714:	e8 94       	clt
 716:	09 c0       	rjmp	.+18     	; 0x72a <__floatsisf+0x12>

00000718 <__floatsisf>:
 718:	97 fb       	bst	r25, 7
 71a:	3e f4       	brtc	.+14     	; 0x72a <__floatsisf+0x12>
 71c:	90 95       	com	r25
 71e:	80 95       	com	r24
 720:	70 95       	com	r23
 722:	61 95       	neg	r22
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	99 23       	and	r25, r25
 72c:	a9 f0       	breq	.+42     	; 0x758 <__floatsisf+0x40>
 72e:	f9 2f       	mov	r31, r25
 730:	96 e9       	ldi	r25, 0x96	; 150
 732:	bb 27       	eor	r27, r27
 734:	93 95       	inc	r25
 736:	f6 95       	lsr	r31
 738:	87 95       	ror	r24
 73a:	77 95       	ror	r23
 73c:	67 95       	ror	r22
 73e:	b7 95       	ror	r27
 740:	f1 11       	cpse	r31, r1
 742:	f8 cf       	rjmp	.-16     	; 0x734 <__floatsisf+0x1c>
 744:	fa f4       	brpl	.+62     	; 0x784 <__floatsisf+0x6c>
 746:	bb 0f       	add	r27, r27
 748:	11 f4       	brne	.+4      	; 0x74e <__floatsisf+0x36>
 74a:	60 ff       	sbrs	r22, 0
 74c:	1b c0       	rjmp	.+54     	; 0x784 <__floatsisf+0x6c>
 74e:	6f 5f       	subi	r22, 0xFF	; 255
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	16 c0       	rjmp	.+44     	; 0x784 <__floatsisf+0x6c>
 758:	88 23       	and	r24, r24
 75a:	11 f0       	breq	.+4      	; 0x760 <__floatsisf+0x48>
 75c:	96 e9       	ldi	r25, 0x96	; 150
 75e:	11 c0       	rjmp	.+34     	; 0x782 <__floatsisf+0x6a>
 760:	77 23       	and	r23, r23
 762:	21 f0       	breq	.+8      	; 0x76c <__floatsisf+0x54>
 764:	9e e8       	ldi	r25, 0x8E	; 142
 766:	87 2f       	mov	r24, r23
 768:	76 2f       	mov	r23, r22
 76a:	05 c0       	rjmp	.+10     	; 0x776 <__floatsisf+0x5e>
 76c:	66 23       	and	r22, r22
 76e:	71 f0       	breq	.+28     	; 0x78c <__floatsisf+0x74>
 770:	96 e8       	ldi	r25, 0x86	; 134
 772:	86 2f       	mov	r24, r22
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	2a f0       	brmi	.+10     	; 0x784 <__floatsisf+0x6c>
 77a:	9a 95       	dec	r25
 77c:	66 0f       	add	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	da f7       	brpl	.-10     	; 0x77a <__floatsisf+0x62>
 784:	88 0f       	add	r24, r24
 786:	96 95       	lsr	r25
 788:	87 95       	ror	r24
 78a:	97 f9       	bld	r25, 7
 78c:	08 95       	ret

0000078e <__fp_split3>:
 78e:	57 fd       	sbrc	r21, 7
 790:	90 58       	subi	r25, 0x80	; 128
 792:	44 0f       	add	r20, r20
 794:	55 1f       	adc	r21, r21
 796:	59 f0       	breq	.+22     	; 0x7ae <__fp_splitA+0x10>
 798:	5f 3f       	cpi	r21, 0xFF	; 255
 79a:	71 f0       	breq	.+28     	; 0x7b8 <__fp_splitA+0x1a>
 79c:	47 95       	ror	r20

0000079e <__fp_splitA>:
 79e:	88 0f       	add	r24, r24
 7a0:	97 fb       	bst	r25, 7
 7a2:	99 1f       	adc	r25, r25
 7a4:	61 f0       	breq	.+24     	; 0x7be <__fp_splitA+0x20>
 7a6:	9f 3f       	cpi	r25, 0xFF	; 255
 7a8:	79 f0       	breq	.+30     	; 0x7c8 <__fp_splitA+0x2a>
 7aa:	87 95       	ror	r24
 7ac:	08 95       	ret
 7ae:	12 16       	cp	r1, r18
 7b0:	13 06       	cpc	r1, r19
 7b2:	14 06       	cpc	r1, r20
 7b4:	55 1f       	adc	r21, r21
 7b6:	f2 cf       	rjmp	.-28     	; 0x79c <__fp_split3+0xe>
 7b8:	46 95       	lsr	r20
 7ba:	f1 df       	rcall	.-30     	; 0x79e <__fp_splitA>
 7bc:	08 c0       	rjmp	.+16     	; 0x7ce <__fp_splitA+0x30>
 7be:	16 16       	cp	r1, r22
 7c0:	17 06       	cpc	r1, r23
 7c2:	18 06       	cpc	r1, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	f1 cf       	rjmp	.-30     	; 0x7aa <__fp_splitA+0xc>
 7c8:	86 95       	lsr	r24
 7ca:	71 05       	cpc	r23, r1
 7cc:	61 05       	cpc	r22, r1
 7ce:	08 94       	sec
 7d0:	08 95       	ret

000007d2 <__fp_zero>:
 7d2:	e8 94       	clt

000007d4 <__fp_szero>:
 7d4:	bb 27       	eor	r27, r27
 7d6:	66 27       	eor	r22, r22
 7d8:	77 27       	eor	r23, r23
 7da:	cb 01       	movw	r24, r22
 7dc:	97 f9       	bld	r25, 7
 7de:	08 95       	ret

000007e0 <__mulsf3>:
 7e0:	0e 94 03 04 	call	0x806	; 0x806 <__mulsf3x>
 7e4:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_round>
 7e8:	0e 94 66 04 	call	0x8cc	; 0x8cc <__fp_pscA>
 7ec:	38 f0       	brcs	.+14     	; 0x7fc <__mulsf3+0x1c>
 7ee:	0e 94 6d 04 	call	0x8da	; 0x8da <__fp_pscB>
 7f2:	20 f0       	brcs	.+8      	; 0x7fc <__mulsf3+0x1c>
 7f4:	95 23       	and	r25, r21
 7f6:	11 f0       	breq	.+4      	; 0x7fc <__mulsf3+0x1c>
 7f8:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_inf>
 7fc:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_nan>
 800:	11 24       	eor	r1, r1
 802:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_szero>

00000806 <__mulsf3x>:
 806:	0e 94 c7 03 	call	0x78e	; 0x78e <__fp_split3>
 80a:	70 f3       	brcs	.-36     	; 0x7e8 <__mulsf3+0x8>

0000080c <__mulsf3_pse>:
 80c:	95 9f       	mul	r25, r21
 80e:	c1 f3       	breq	.-16     	; 0x800 <__mulsf3+0x20>
 810:	95 0f       	add	r25, r21
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	55 1f       	adc	r21, r21
 816:	62 9f       	mul	r22, r18
 818:	f0 01       	movw	r30, r0
 81a:	72 9f       	mul	r23, r18
 81c:	bb 27       	eor	r27, r27
 81e:	f0 0d       	add	r31, r0
 820:	b1 1d       	adc	r27, r1
 822:	63 9f       	mul	r22, r19
 824:	aa 27       	eor	r26, r26
 826:	f0 0d       	add	r31, r0
 828:	b1 1d       	adc	r27, r1
 82a:	aa 1f       	adc	r26, r26
 82c:	64 9f       	mul	r22, r20
 82e:	66 27       	eor	r22, r22
 830:	b0 0d       	add	r27, r0
 832:	a1 1d       	adc	r26, r1
 834:	66 1f       	adc	r22, r22
 836:	82 9f       	mul	r24, r18
 838:	22 27       	eor	r18, r18
 83a:	b0 0d       	add	r27, r0
 83c:	a1 1d       	adc	r26, r1
 83e:	62 1f       	adc	r22, r18
 840:	73 9f       	mul	r23, r19
 842:	b0 0d       	add	r27, r0
 844:	a1 1d       	adc	r26, r1
 846:	62 1f       	adc	r22, r18
 848:	83 9f       	mul	r24, r19
 84a:	a0 0d       	add	r26, r0
 84c:	61 1d       	adc	r22, r1
 84e:	22 1f       	adc	r18, r18
 850:	74 9f       	mul	r23, r20
 852:	33 27       	eor	r19, r19
 854:	a0 0d       	add	r26, r0
 856:	61 1d       	adc	r22, r1
 858:	23 1f       	adc	r18, r19
 85a:	84 9f       	mul	r24, r20
 85c:	60 0d       	add	r22, r0
 85e:	21 1d       	adc	r18, r1
 860:	82 2f       	mov	r24, r18
 862:	76 2f       	mov	r23, r22
 864:	6a 2f       	mov	r22, r26
 866:	11 24       	eor	r1, r1
 868:	9f 57       	subi	r25, 0x7F	; 127
 86a:	50 40       	sbci	r21, 0x00	; 0
 86c:	9a f0       	brmi	.+38     	; 0x894 <__mulsf3_pse+0x88>
 86e:	f1 f0       	breq	.+60     	; 0x8ac <__mulsf3_pse+0xa0>
 870:	88 23       	and	r24, r24
 872:	4a f0       	brmi	.+18     	; 0x886 <__mulsf3_pse+0x7a>
 874:	ee 0f       	add	r30, r30
 876:	ff 1f       	adc	r31, r31
 878:	bb 1f       	adc	r27, r27
 87a:	66 1f       	adc	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	88 1f       	adc	r24, r24
 880:	91 50       	subi	r25, 0x01	; 1
 882:	50 40       	sbci	r21, 0x00	; 0
 884:	a9 f7       	brne	.-22     	; 0x870 <__mulsf3_pse+0x64>
 886:	9e 3f       	cpi	r25, 0xFE	; 254
 888:	51 05       	cpc	r21, r1
 88a:	80 f0       	brcs	.+32     	; 0x8ac <__mulsf3_pse+0xa0>
 88c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_inf>
 890:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_szero>
 894:	5f 3f       	cpi	r21, 0xFF	; 255
 896:	e4 f3       	brlt	.-8      	; 0x890 <__mulsf3_pse+0x84>
 898:	98 3e       	cpi	r25, 0xE8	; 232
 89a:	d4 f3       	brlt	.-12     	; 0x890 <__mulsf3_pse+0x84>
 89c:	86 95       	lsr	r24
 89e:	77 95       	ror	r23
 8a0:	67 95       	ror	r22
 8a2:	b7 95       	ror	r27
 8a4:	f7 95       	ror	r31
 8a6:	e7 95       	ror	r30
 8a8:	9f 5f       	subi	r25, 0xFF	; 255
 8aa:	c1 f7       	brne	.-16     	; 0x89c <__mulsf3_pse+0x90>
 8ac:	fe 2b       	or	r31, r30
 8ae:	88 0f       	add	r24, r24
 8b0:	91 1d       	adc	r25, r1
 8b2:	96 95       	lsr	r25
 8b4:	87 95       	ror	r24
 8b6:	97 f9       	bld	r25, 7
 8b8:	08 95       	ret

000008ba <__fp_inf>:
 8ba:	97 f9       	bld	r25, 7
 8bc:	9f 67       	ori	r25, 0x7F	; 127
 8be:	80 e8       	ldi	r24, 0x80	; 128
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	08 95       	ret

000008c6 <__fp_nan>:
 8c6:	9f ef       	ldi	r25, 0xFF	; 255
 8c8:	80 ec       	ldi	r24, 0xC0	; 192
 8ca:	08 95       	ret

000008cc <__fp_pscA>:
 8cc:	00 24       	eor	r0, r0
 8ce:	0a 94       	dec	r0
 8d0:	16 16       	cp	r1, r22
 8d2:	17 06       	cpc	r1, r23
 8d4:	18 06       	cpc	r1, r24
 8d6:	09 06       	cpc	r0, r25
 8d8:	08 95       	ret

000008da <__fp_pscB>:
 8da:	00 24       	eor	r0, r0
 8dc:	0a 94       	dec	r0
 8de:	12 16       	cp	r1, r18
 8e0:	13 06       	cpc	r1, r19
 8e2:	14 06       	cpc	r1, r20
 8e4:	05 06       	cpc	r0, r21
 8e6:	08 95       	ret

000008e8 <__fp_round>:
 8e8:	09 2e       	mov	r0, r25
 8ea:	03 94       	inc	r0
 8ec:	00 0c       	add	r0, r0
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__fp_round+0xc>
 8f0:	88 23       	and	r24, r24
 8f2:	52 f0       	brmi	.+20     	; 0x908 <__stack+0x9>
 8f4:	bb 0f       	add	r27, r27
 8f6:	40 f4       	brcc	.+16     	; 0x908 <__stack+0x9>
 8f8:	bf 2b       	or	r27, r31
 8fa:	11 f4       	brne	.+4      	; 0x900 <__stack+0x1>
 8fc:	60 ff       	sbrs	r22, 0
 8fe:	04 c0       	rjmp	.+8      	; 0x908 <__stack+0x9>
 900:	6f 5f       	subi	r22, 0xFF	; 255
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	08 95       	ret

0000090a <__divmodhi4>:
 90a:	97 fb       	bst	r25, 7
 90c:	07 2e       	mov	r0, r23
 90e:	16 f4       	brtc	.+4      	; 0x914 <__divmodhi4+0xa>
 910:	00 94       	com	r0
 912:	07 d0       	rcall	.+14     	; 0x922 <__divmodhi4_neg1>
 914:	77 fd       	sbrc	r23, 7
 916:	09 d0       	rcall	.+18     	; 0x92a <__divmodhi4_neg2>
 918:	0e 94 99 04 	call	0x932	; 0x932 <__udivmodhi4>
 91c:	07 fc       	sbrc	r0, 7
 91e:	05 d0       	rcall	.+10     	; 0x92a <__divmodhi4_neg2>
 920:	3e f4       	brtc	.+14     	; 0x930 <__divmodhi4_exit>

00000922 <__divmodhi4_neg1>:
 922:	90 95       	com	r25
 924:	81 95       	neg	r24
 926:	9f 4f       	sbci	r25, 0xFF	; 255
 928:	08 95       	ret

0000092a <__divmodhi4_neg2>:
 92a:	70 95       	com	r23
 92c:	61 95       	neg	r22
 92e:	7f 4f       	sbci	r23, 0xFF	; 255

00000930 <__divmodhi4_exit>:
 930:	08 95       	ret

00000932 <__udivmodhi4>:
 932:	aa 1b       	sub	r26, r26
 934:	bb 1b       	sub	r27, r27
 936:	51 e1       	ldi	r21, 0x11	; 17
 938:	07 c0       	rjmp	.+14     	; 0x948 <__udivmodhi4_ep>

0000093a <__udivmodhi4_loop>:
 93a:	aa 1f       	adc	r26, r26
 93c:	bb 1f       	adc	r27, r27
 93e:	a6 17       	cp	r26, r22
 940:	b7 07       	cpc	r27, r23
 942:	10 f0       	brcs	.+4      	; 0x948 <__udivmodhi4_ep>
 944:	a6 1b       	sub	r26, r22
 946:	b7 0b       	sbc	r27, r23

00000948 <__udivmodhi4_ep>:
 948:	88 1f       	adc	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	5a 95       	dec	r21
 94e:	a9 f7       	brne	.-22     	; 0x93a <__udivmodhi4_loop>
 950:	80 95       	com	r24
 952:	90 95       	com	r25
 954:	bc 01       	movw	r22, r24
 956:	cd 01       	movw	r24, r26
 958:	08 95       	ret

0000095a <fwrite>:
 95a:	a0 e0       	ldi	r26, 0x00	; 0
 95c:	b0 e0       	ldi	r27, 0x00	; 0
 95e:	e3 eb       	ldi	r30, 0xB3	; 179
 960:	f4 e0       	ldi	r31, 0x04	; 4
 962:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__prologue_saves__+0xc>
 966:	5b 01       	movw	r10, r22
 968:	4a 01       	movw	r8, r20
 96a:	79 01       	movw	r14, r18
 96c:	d9 01       	movw	r26, r18
 96e:	13 96       	adiw	r26, 0x03	; 3
 970:	2c 91       	ld	r18, X
 972:	21 ff       	sbrs	r18, 1
 974:	1d c0       	rjmp	.+58     	; 0x9b0 <fwrite+0x56>
 976:	c0 e0       	ldi	r28, 0x00	; 0
 978:	d0 e0       	ldi	r29, 0x00	; 0
 97a:	c8 15       	cp	r28, r8
 97c:	d9 05       	cpc	r29, r9
 97e:	d9 f0       	breq	.+54     	; 0x9b6 <fwrite+0x5c>
 980:	8c 01       	movw	r16, r24
 982:	6c 01       	movw	r12, r24
 984:	ca 0c       	add	r12, r10
 986:	db 1c       	adc	r13, r11
 988:	c8 01       	movw	r24, r16
 98a:	0c 15       	cp	r16, r12
 98c:	1d 05       	cpc	r17, r13
 98e:	71 f0       	breq	.+28     	; 0x9ac <fwrite+0x52>
 990:	0f 5f       	subi	r16, 0xFF	; 255
 992:	1f 4f       	sbci	r17, 0xFF	; 255
 994:	d7 01       	movw	r26, r14
 996:	18 96       	adiw	r26, 0x08	; 8
 998:	ed 91       	ld	r30, X+
 99a:	fc 91       	ld	r31, X
 99c:	19 97       	sbiw	r26, 0x09	; 9
 99e:	b7 01       	movw	r22, r14
 9a0:	dc 01       	movw	r26, r24
 9a2:	8c 91       	ld	r24, X
 9a4:	09 95       	icall
 9a6:	89 2b       	or	r24, r25
 9a8:	79 f3       	breq	.-34     	; 0x988 <fwrite+0x2e>
 9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <fwrite+0x5c>
 9ac:	21 96       	adiw	r28, 0x01	; 1
 9ae:	e5 cf       	rjmp	.-54     	; 0x97a <fwrite+0x20>
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <fwrite+0x5e>
 9b6:	ce 01       	movw	r24, r28
 9b8:	cd b7       	in	r28, 0x3d	; 61
 9ba:	de b7       	in	r29, 0x3e	; 62
 9bc:	ec e0       	ldi	r30, 0x0C	; 12
 9be:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__epilogue_restores__+0xc>

000009c2 <__prologue_saves__>:
 9c2:	2f 92       	push	r2
 9c4:	3f 92       	push	r3
 9c6:	4f 92       	push	r4
 9c8:	5f 92       	push	r5
 9ca:	6f 92       	push	r6
 9cc:	7f 92       	push	r7
 9ce:	8f 92       	push	r8
 9d0:	9f 92       	push	r9
 9d2:	af 92       	push	r10
 9d4:	bf 92       	push	r11
 9d6:	cf 92       	push	r12
 9d8:	df 92       	push	r13
 9da:	ef 92       	push	r14
 9dc:	ff 92       	push	r15
 9de:	0f 93       	push	r16
 9e0:	1f 93       	push	r17
 9e2:	cf 93       	push	r28
 9e4:	df 93       	push	r29
 9e6:	cd b7       	in	r28, 0x3d	; 61
 9e8:	de b7       	in	r29, 0x3e	; 62
 9ea:	ca 1b       	sub	r28, r26
 9ec:	db 0b       	sbc	r29, r27
 9ee:	0f b6       	in	r0, 0x3f	; 63
 9f0:	f8 94       	cli
 9f2:	de bf       	out	0x3e, r29	; 62
 9f4:	0f be       	out	0x3f, r0	; 63
 9f6:	cd bf       	out	0x3d, r28	; 61
 9f8:	09 94       	ijmp

000009fa <__epilogue_restores__>:
 9fa:	2a 88       	ldd	r2, Y+18	; 0x12
 9fc:	39 88       	ldd	r3, Y+17	; 0x11
 9fe:	48 88       	ldd	r4, Y+16	; 0x10
 a00:	5f 84       	ldd	r5, Y+15	; 0x0f
 a02:	6e 84       	ldd	r6, Y+14	; 0x0e
 a04:	7d 84       	ldd	r7, Y+13	; 0x0d
 a06:	8c 84       	ldd	r8, Y+12	; 0x0c
 a08:	9b 84       	ldd	r9, Y+11	; 0x0b
 a0a:	aa 84       	ldd	r10, Y+10	; 0x0a
 a0c:	b9 84       	ldd	r11, Y+9	; 0x09
 a0e:	c8 84       	ldd	r12, Y+8	; 0x08
 a10:	df 80       	ldd	r13, Y+7	; 0x07
 a12:	ee 80       	ldd	r14, Y+6	; 0x06
 a14:	fd 80       	ldd	r15, Y+5	; 0x05
 a16:	0c 81       	ldd	r16, Y+4	; 0x04
 a18:	1b 81       	ldd	r17, Y+3	; 0x03
 a1a:	aa 81       	ldd	r26, Y+2	; 0x02
 a1c:	b9 81       	ldd	r27, Y+1	; 0x01
 a1e:	ce 0f       	add	r28, r30
 a20:	d1 1d       	adc	r29, r1
 a22:	0f b6       	in	r0, 0x3f	; 63
 a24:	f8 94       	cli
 a26:	de bf       	out	0x3e, r29	; 62
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	cd bf       	out	0x3d, r28	; 61
 a2c:	ed 01       	movw	r28, r26
 a2e:	08 95       	ret

00000a30 <_exit>:
 a30:	f8 94       	cli

00000a32 <__stop_program>:
 a32:	ff cf       	rjmp	.-2      	; 0xa32 <__stop_program>
