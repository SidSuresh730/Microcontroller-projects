
ECE3111LabPractice9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000092e  000009c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  000009c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b4d  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000965  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040b  00000000  00000000  00001f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000557  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bb  00000000  00000000  00002ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_12>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_14>
  3c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_15>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_21>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee e2       	ldi	r30, 0x2E	; 46
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 30       	cpi	r26, 0x0E	; 14
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <main>
  ea:	0c 94 95 04 	jmp	0x92a	; 0x92a <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <setupADC>:
volatile int tempDuty = 50;
volatile int brightDuty = 50;
volatile unsigned char secondRead = 0;
void setupADC(void)
{
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1); // ADC enable, interrupt enable
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8e 68       	ori	r24, 0x8E	; 142
  fa:	80 83       	st	Z, r24
	 // prescaler = 64
	 ADMUX = 6;
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 102:	08 95       	ret

00000104 <startConversion>:
}

void startConversion(void)
{
	ADCSRA |= (1<<ADSC);
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <tempDutyConversion>:

void tempDutyConversion(void)
{
	//0.4; // V0degrees
	//0195; //Temperature coefficient
	tempDuty = (int)((tempRead*(5.0/1024.0) - 0.4)/(.0195))%10;
 110:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <tempRead>
 114:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <tempRead+0x1>
 118:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tempRead+0x2>
 11c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tempRead+0x3>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	40 ea       	ldi	r20, 0xA0	; 160
 126:	5b e3       	ldi	r21, 0x3B	; 59
 128:	0e 94 00 04 	call	0x800	; 0x800 <__mulsf3>
 12c:	2d ec       	ldi	r18, 0xCD	; 205
 12e:	3c ec       	ldi	r19, 0xCC	; 204
 130:	4c ec       	ldi	r20, 0xCC	; 204
 132:	5e e3       	ldi	r21, 0x3E	; 62
 134:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__subsf3>
 138:	27 e7       	ldi	r18, 0x77	; 119
 13a:	3e eb       	ldi	r19, 0xBE	; 190
 13c:	4f e9       	ldi	r20, 0x9F	; 159
 13e:	5c e3       	ldi	r21, 0x3C	; 60
 140:	0e 94 ca 02 	call	0x594	; 0x594 <__divsf3>
 144:	0e 94 3c 03 	call	0x678	; 0x678 <__fixsfsi>
 148:	cb 01       	movw	r24, r22
 14a:	6a e0       	ldi	r22, 0x0A	; 10
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 6d 04 	call	0x8da	; 0x8da <__divmodhi4>
 152:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <tempDuty+0x1>
 156:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempDuty>
 15a:	08 95       	ret

0000015c <brightDutyConversion>:
}
void brightDutyConversion(void)
{
	
	brightDuty = ((int)(brightness*(5.0/1024.0)/0.5))*10;
 15c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <brightness>
 160:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <brightness+0x1>
 164:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <brightness+0x2>
 168:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <brightness+0x3>
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 ea       	ldi	r20, 0xA0	; 160
 172:	5b e3       	ldi	r21, 0x3B	; 59
 174:	0e 94 00 04 	call	0x800	; 0x800 <__mulsf3>
 178:	9b 01       	movw	r18, r22
 17a:	ac 01       	movw	r20, r24
 17c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__addsf3>
 180:	0e 94 3c 03 	call	0x678	; 0x678 <__fixsfsi>
 184:	9b 01       	movw	r18, r22
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	62 0f       	add	r22, r18
 198:	73 1f       	adc	r23, r19
 19a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 19e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1a2:	08 95       	ret

000001a4 <InitTimer0>:
void InitTimer0(void)
{
	//2kHz clock
	//WGM0 = 111 (fast PWM w/ top at OCR0A)
	//COM0B = 10;
	TCCR0A |= (1<<WGM00) | (1<<WGM01) | (1<<COM0B1); // Clear on Compare A
 1a4:	84 b5       	in	r24, 0x24	; 36
 1a6:	83 62       	ori	r24, 0x23	; 35
 1a8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
 1aa:	85 b5       	in	r24, 0x25	; 37
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	85 bd       	out	0x25, r24	; 37
	OCR0A = 124; // 2kHz
 1b0:	8c e7       	ldi	r24, 0x7C	; 124
 1b2:	87 bd       	out	0x27, r24	; 39
	OCR0B = 62; 
 1b4:	8e e3       	ldi	r24, 0x3E	; 62
 1b6:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (1<<OCIE0B) | (1<<OCIE0A);  // Enable Timer 0 Compare B, A ISR
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B |= (1<<CS01) | (1<<CS00); // Set Prescaler 64 & Timer 0 starts
 1be:	85 b5       	in	r24, 0x25	; 37
 1c0:	83 60       	ori	r24, 0x03	; 3
 1c2:	85 bd       	out	0x25, r24	; 37
 1c4:	08 95       	ret

000001c6 <InitTimer1>:
{
	//WGM = Fast PWM w/ TOP at OCR1A = 1111
	//COM1B = 10, Clear OC1B on compare match, set on BOTTOM
	//CS1 = 1, prescaler = 1
	
	TCCR1A |= (1<<WGM10) | (1<<WGM11) | (1<<COM1B1);
 1c6:	e0 e8       	ldi	r30, 0x80	; 128
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	83 62       	ori	r24, 0x23	; 35
 1ce:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13);
 1d0:	e1 e8       	ldi	r30, 0x81	; 129
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	88 61       	ori	r24, 0x18	; 24
 1d8:	80 83       	st	Z, r24
	OCR1A = 3199; // 5kHz
 1da:	8f e7       	ldi	r24, 0x7F	; 127
 1dc:	9c e0       	ldi	r25, 0x0C	; 12
 1de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = 1599;
 1e6:	8f e3       	ldi	r24, 0x3F	; 63
 1e8:	96 e0       	ldi	r25, 0x06	; 6
 1ea:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 1ee:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	TIMSK1 |= (1<<OCIE1B); //Enable output compare B match interrupt
 1f2:	af e6       	ldi	r26, 0x6F	; 111
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	8c 91       	ld	r24, X
 1f8:	84 60       	ori	r24, 0x04	; 4
 1fa:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS10); //(1<<CS11) | (1<<CS10); // Start timer
 1fc:	80 81       	ld	r24, Z
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <__vector_21>:
}

ISR(ADC_vect)
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	
	switch (ADMUX)
 226:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 22a:	86 30       	cpi	r24, 0x06	; 6
 22c:	19 f0       	breq	.+6      	; 0x234 <__vector_21+0x30>
 22e:	87 30       	cpi	r24, 0x07	; 7
 230:	b9 f0       	breq	.+46     	; 0x260 <__vector_21+0x5c>
 232:	2b c0       	rjmp	.+86     	; 0x28a <__vector_21+0x86>
	{
		case 6:
			tempRead = ADC;
 234:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 238:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__floatunsisf>
 244:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <tempRead>
 248:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <tempRead+0x1>
 24c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tempRead+0x2>
 250:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tempRead+0x3>
			tempDutyConversion();
 254:	0e 94 88 00 	call	0x110	; 0x110 <tempDutyConversion>
			ADMUX = 7;
 258:	87 e0       	ldi	r24, 0x07	; 7
 25a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			break;
 25e:	15 c0       	rjmp	.+42     	; 0x28a <__vector_21+0x86>
		case 7:
			brightness = ADC;
 260:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 264:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__floatunsisf>
 270:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <brightness>
 274:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <brightness+0x1>
 278:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <brightness+0x2>
 27c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <brightness+0x3>
			brightDutyConversion();
 280:	0e 94 ae 00 	call	0x15c	; 0x15c <brightDutyConversion>
			ADMUX = 6;
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			break;
		default:
			break;
	}
	if(!secondRead)
 28a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 28e:	81 11       	cpse	r24, r1
 290:	06 c0       	rjmp	.+12     	; 0x29e <__vector_21+0x9a>
	{
		secondRead = 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		startConversion();
 298:	0e 94 82 00 	call	0x104	; 0x104 <startConversion>
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__vector_21+0x9e>
	}
	else
		secondRead = 0;
 29e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_15>:

ISR(TIMER0_COMPB_vect)
{
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	cf 92       	push	r12
 2d0:	df 92       	push	r13
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	cf 93       	push	r28
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
	//tempDutyConversion();
	if(tempDuty>0)
 2f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempDuty>
 2f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <tempDuty+0x1>
 2f8:	18 16       	cp	r1, r24
 2fa:	19 06       	cpc	r1, r25
 2fc:	44 f5       	brge	.+80     	; 0x34e <__vector_15+0x8a>
		OCR0B = (int)((tempDuty/100.0)*(OCR0A+1)) - 1;
 2fe:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <tempDuty>
 302:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <tempDuty+0x1>
 306:	c7 b5       	in	r28, 0x27	; 39
 308:	07 2e       	mov	r0, r23
 30a:	00 0c       	add	r0, r0
 30c:	88 0b       	sbc	r24, r24
 30e:	99 0b       	sbc	r25, r25
 310:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__floatsisf>
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	48 ec       	ldi	r20, 0xC8	; 200
 31a:	52 e4       	ldi	r21, 0x42	; 66
 31c:	0e 94 ca 02 	call	0x594	; 0x594 <__divsf3>
 320:	6b 01       	movw	r12, r22
 322:	7c 01       	movw	r14, r24
 324:	6c 2f       	mov	r22, r28
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	6f 5f       	subi	r22, 0xFF	; 255
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	07 2e       	mov	r0, r23
 32e:	00 0c       	add	r0, r0
 330:	88 0b       	sbc	r24, r24
 332:	99 0b       	sbc	r25, r25
 334:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__floatsisf>
 338:	9b 01       	movw	r18, r22
 33a:	ac 01       	movw	r20, r24
 33c:	c7 01       	movw	r24, r14
 33e:	b6 01       	movw	r22, r12
 340:	0e 94 00 04 	call	0x800	; 0x800 <__mulsf3>
 344:	0e 94 3c 03 	call	0x678	; 0x678 <__fixsfsi>
 348:	61 50       	subi	r22, 0x01	; 1
 34a:	68 bd       	out	0x28, r22	; 40
 34c:	01 c0       	rjmp	.+2      	; 0x350 <__vector_15+0x8c>
	else
		OCR0B = 0;
 34e:	18 bc       	out	0x28, r1	; 40
}
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	cf 91       	pop	r28
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	df 90       	pop	r13
 370:	cf 90       	pop	r12
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	cf 92       	push	r12
 388:	df 92       	push	r13
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31
	//brightDutyConversion();
	if(brightDuty>0)
 3aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3b2:	18 16       	cp	r1, r24
 3b4:	19 06       	cpc	r1, r25
 3b6:	64 f5       	brge	.+88     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		OCR1B = (int)((brightDuty/100.0)*(OCR1A+1)) - 1;
 3b8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 3bc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 3c0:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 3c4:	d0 91 89 00 	lds	r29, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 3c8:	07 2e       	mov	r0, r23
 3ca:	00 0c       	add	r0, r0
 3cc:	88 0b       	sbc	r24, r24
 3ce:	99 0b       	sbc	r25, r25
 3d0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__floatsisf>
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	48 ec       	ldi	r20, 0xC8	; 200
 3da:	52 e4       	ldi	r21, 0x42	; 66
 3dc:	0e 94 ca 02 	call	0x594	; 0x594 <__divsf3>
 3e0:	6b 01       	movw	r12, r22
 3e2:	7c 01       	movw	r14, r24
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__floatunsisf>
 3f2:	9b 01       	movw	r18, r22
 3f4:	ac 01       	movw	r20, r24
 3f6:	c7 01       	movw	r24, r14
 3f8:	b6 01       	movw	r22, r12
 3fa:	0e 94 00 04 	call	0x800	; 0x800 <__mulsf3>
 3fe:	0e 94 3c 03 	call	0x678	; 0x678 <__fixsfsi>
 402:	61 50       	subi	r22, 0x01	; 1
 404:	71 09       	sbc	r23, r1
 406:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 40a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 40e:	04 c0       	rjmp	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	else
		OCR1B = 0;
 410:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 414:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
}
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
	if(counter == 79)
 468:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter>
 46c:	8f 34       	cpi	r24, 0x4F	; 79
 46e:	29 f4       	brne	.+10     	; 0x47a <__vector_14+0x34>
	{
		startConversion();
 470:	0e 94 82 00 	call	0x104	; 0x104 <startConversion>
		counter = 0;
 474:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter>
 478:	05 c0       	rjmp	.+10     	; 0x484 <__vector_14+0x3e>
	}
	else
		counter++;
 47a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter>
 47e:	8f 5f       	subi	r24, 0xFF	; 255
 480:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter>
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <main>:
int main(void)
{
    /* Replace with your application code */
	DDRB |= (1<<DDB2); //OC1B // light
 4a6:	22 9a       	sbi	0x04, 2	; 4
	DDRD |= (1<<DDD5); //OC0B // temperature
 4a8:	55 9a       	sbi	0x0a, 5	; 10
	InitTimer0();
 4aa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <InitTimer0>
	InitTimer1();
 4ae:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <InitTimer1>
	setupADC();
 4b2:	0e 94 79 00 	call	0xf2	; 0xf2 <setupADC>
	sei();
 4b6:	78 94       	sei
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <main+0x12>

000004ba <__subsf3>:
 4ba:	50 58       	subi	r21, 0x80	; 128

000004bc <__addsf3>:
 4bc:	bb 27       	eor	r27, r27
 4be:	aa 27       	eor	r26, r26
 4c0:	0e 94 75 02 	call	0x4ea	; 0x4ea <__addsf3x>
 4c4:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_round>
 4c8:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_pscA>
 4cc:	38 f0       	brcs	.+14     	; 0x4dc <__addsf3+0x20>
 4ce:	0e 94 bf 03 	call	0x77e	; 0x77e <__fp_pscB>
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <__addsf3+0x20>
 4d4:	39 f4       	brne	.+14     	; 0x4e4 <__addsf3+0x28>
 4d6:	9f 3f       	cpi	r25, 0xFF	; 255
 4d8:	19 f4       	brne	.+6      	; 0x4e0 <__addsf3+0x24>
 4da:	26 f4       	brtc	.+8      	; 0x4e4 <__addsf3+0x28>
 4dc:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_nan>
 4e0:	0e f4       	brtc	.+2      	; 0x4e4 <__addsf3+0x28>
 4e2:	e0 95       	com	r30
 4e4:	e7 fb       	bst	r30, 7
 4e6:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>

000004ea <__addsf3x>:
 4ea:	e9 2f       	mov	r30, r25
 4ec:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_split3>
 4f0:	58 f3       	brcs	.-42     	; 0x4c8 <__addsf3+0xc>
 4f2:	ba 17       	cp	r27, r26
 4f4:	62 07       	cpc	r22, r18
 4f6:	73 07       	cpc	r23, r19
 4f8:	84 07       	cpc	r24, r20
 4fa:	95 07       	cpc	r25, r21
 4fc:	20 f0       	brcs	.+8      	; 0x506 <__addsf3x+0x1c>
 4fe:	79 f4       	brne	.+30     	; 0x51e <__addsf3x+0x34>
 500:	a6 f5       	brtc	.+104    	; 0x56a <__addsf3x+0x80>
 502:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_zero>
 506:	0e f4       	brtc	.+2      	; 0x50a <__addsf3x+0x20>
 508:	e0 95       	com	r30
 50a:	0b 2e       	mov	r0, r27
 50c:	ba 2f       	mov	r27, r26
 50e:	a0 2d       	mov	r26, r0
 510:	0b 01       	movw	r0, r22
 512:	b9 01       	movw	r22, r18
 514:	90 01       	movw	r18, r0
 516:	0c 01       	movw	r0, r24
 518:	ca 01       	movw	r24, r20
 51a:	a0 01       	movw	r20, r0
 51c:	11 24       	eor	r1, r1
 51e:	ff 27       	eor	r31, r31
 520:	59 1b       	sub	r21, r25
 522:	99 f0       	breq	.+38     	; 0x54a <__addsf3x+0x60>
 524:	59 3f       	cpi	r21, 0xF9	; 249
 526:	50 f4       	brcc	.+20     	; 0x53c <__addsf3x+0x52>
 528:	50 3e       	cpi	r21, 0xE0	; 224
 52a:	68 f1       	brcs	.+90     	; 0x586 <__addsf3x+0x9c>
 52c:	1a 16       	cp	r1, r26
 52e:	f0 40       	sbci	r31, 0x00	; 0
 530:	a2 2f       	mov	r26, r18
 532:	23 2f       	mov	r18, r19
 534:	34 2f       	mov	r19, r20
 536:	44 27       	eor	r20, r20
 538:	58 5f       	subi	r21, 0xF8	; 248
 53a:	f3 cf       	rjmp	.-26     	; 0x522 <__addsf3x+0x38>
 53c:	46 95       	lsr	r20
 53e:	37 95       	ror	r19
 540:	27 95       	ror	r18
 542:	a7 95       	ror	r26
 544:	f0 40       	sbci	r31, 0x00	; 0
 546:	53 95       	inc	r21
 548:	c9 f7       	brne	.-14     	; 0x53c <__addsf3x+0x52>
 54a:	7e f4       	brtc	.+30     	; 0x56a <__addsf3x+0x80>
 54c:	1f 16       	cp	r1, r31
 54e:	ba 0b       	sbc	r27, r26
 550:	62 0b       	sbc	r22, r18
 552:	73 0b       	sbc	r23, r19
 554:	84 0b       	sbc	r24, r20
 556:	ba f0       	brmi	.+46     	; 0x586 <__addsf3x+0x9c>
 558:	91 50       	subi	r25, 0x01	; 1
 55a:	a1 f0       	breq	.+40     	; 0x584 <__addsf3x+0x9a>
 55c:	ff 0f       	add	r31, r31
 55e:	bb 1f       	adc	r27, r27
 560:	66 1f       	adc	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	c2 f7       	brpl	.-16     	; 0x558 <__addsf3x+0x6e>
 568:	0e c0       	rjmp	.+28     	; 0x586 <__addsf3x+0x9c>
 56a:	ba 0f       	add	r27, r26
 56c:	62 1f       	adc	r22, r18
 56e:	73 1f       	adc	r23, r19
 570:	84 1f       	adc	r24, r20
 572:	48 f4       	brcc	.+18     	; 0x586 <__addsf3x+0x9c>
 574:	87 95       	ror	r24
 576:	77 95       	ror	r23
 578:	67 95       	ror	r22
 57a:	b7 95       	ror	r27
 57c:	f7 95       	ror	r31
 57e:	9e 3f       	cpi	r25, 0xFE	; 254
 580:	08 f0       	brcs	.+2      	; 0x584 <__addsf3x+0x9a>
 582:	b0 cf       	rjmp	.-160    	; 0x4e4 <__addsf3+0x28>
 584:	93 95       	inc	r25
 586:	88 0f       	add	r24, r24
 588:	08 f0       	brcs	.+2      	; 0x58c <__addsf3x+0xa2>
 58a:	99 27       	eor	r25, r25
 58c:	ee 0f       	add	r30, r30
 58e:	97 95       	ror	r25
 590:	87 95       	ror	r24
 592:	08 95       	ret

00000594 <__divsf3>:
 594:	0e 94 de 02 	call	0x5bc	; 0x5bc <__divsf3x>
 598:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_round>
 59c:	0e 94 bf 03 	call	0x77e	; 0x77e <__fp_pscB>
 5a0:	58 f0       	brcs	.+22     	; 0x5b8 <__divsf3+0x24>
 5a2:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_pscA>
 5a6:	40 f0       	brcs	.+16     	; 0x5b8 <__divsf3+0x24>
 5a8:	29 f4       	brne	.+10     	; 0x5b4 <__divsf3+0x20>
 5aa:	5f 3f       	cpi	r21, 0xFF	; 255
 5ac:	29 f0       	breq	.+10     	; 0x5b8 <__divsf3+0x24>
 5ae:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>
 5b2:	51 11       	cpse	r21, r1
 5b4:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>
 5b8:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_nan>

000005bc <__divsf3x>:
 5bc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_split3>
 5c0:	68 f3       	brcs	.-38     	; 0x59c <__divsf3+0x8>

000005c2 <__divsf3_pse>:
 5c2:	99 23       	and	r25, r25
 5c4:	b1 f3       	breq	.-20     	; 0x5b2 <__divsf3+0x1e>
 5c6:	55 23       	and	r21, r21
 5c8:	91 f3       	breq	.-28     	; 0x5ae <__divsf3+0x1a>
 5ca:	95 1b       	sub	r25, r21
 5cc:	55 0b       	sbc	r21, r21
 5ce:	bb 27       	eor	r27, r27
 5d0:	aa 27       	eor	r26, r26
 5d2:	62 17       	cp	r22, r18
 5d4:	73 07       	cpc	r23, r19
 5d6:	84 07       	cpc	r24, r20
 5d8:	38 f0       	brcs	.+14     	; 0x5e8 <__divsf3_pse+0x26>
 5da:	9f 5f       	subi	r25, 0xFF	; 255
 5dc:	5f 4f       	sbci	r21, 0xFF	; 255
 5de:	22 0f       	add	r18, r18
 5e0:	33 1f       	adc	r19, r19
 5e2:	44 1f       	adc	r20, r20
 5e4:	aa 1f       	adc	r26, r26
 5e6:	a9 f3       	breq	.-22     	; 0x5d2 <__divsf3_pse+0x10>
 5e8:	35 d0       	rcall	.+106    	; 0x654 <__divsf3_pse+0x92>
 5ea:	0e 2e       	mov	r0, r30
 5ec:	3a f0       	brmi	.+14     	; 0x5fc <__divsf3_pse+0x3a>
 5ee:	e0 e8       	ldi	r30, 0x80	; 128
 5f0:	32 d0       	rcall	.+100    	; 0x656 <__divsf3_pse+0x94>
 5f2:	91 50       	subi	r25, 0x01	; 1
 5f4:	50 40       	sbci	r21, 0x00	; 0
 5f6:	e6 95       	lsr	r30
 5f8:	00 1c       	adc	r0, r0
 5fa:	ca f7       	brpl	.-14     	; 0x5ee <__divsf3_pse+0x2c>
 5fc:	2b d0       	rcall	.+86     	; 0x654 <__divsf3_pse+0x92>
 5fe:	fe 2f       	mov	r31, r30
 600:	29 d0       	rcall	.+82     	; 0x654 <__divsf3_pse+0x92>
 602:	66 0f       	add	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	bb 1f       	adc	r27, r27
 60a:	26 17       	cp	r18, r22
 60c:	37 07       	cpc	r19, r23
 60e:	48 07       	cpc	r20, r24
 610:	ab 07       	cpc	r26, r27
 612:	b0 e8       	ldi	r27, 0x80	; 128
 614:	09 f0       	breq	.+2      	; 0x618 <__divsf3_pse+0x56>
 616:	bb 0b       	sbc	r27, r27
 618:	80 2d       	mov	r24, r0
 61a:	bf 01       	movw	r22, r30
 61c:	ff 27       	eor	r31, r31
 61e:	93 58       	subi	r25, 0x83	; 131
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	3a f0       	brmi	.+14     	; 0x632 <__divsf3_pse+0x70>
 624:	9e 3f       	cpi	r25, 0xFE	; 254
 626:	51 05       	cpc	r21, r1
 628:	78 f0       	brcs	.+30     	; 0x648 <__divsf3_pse+0x86>
 62a:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>
 62e:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>
 632:	5f 3f       	cpi	r21, 0xFF	; 255
 634:	e4 f3       	brlt	.-8      	; 0x62e <__divsf3_pse+0x6c>
 636:	98 3e       	cpi	r25, 0xE8	; 232
 638:	d4 f3       	brlt	.-12     	; 0x62e <__divsf3_pse+0x6c>
 63a:	86 95       	lsr	r24
 63c:	77 95       	ror	r23
 63e:	67 95       	ror	r22
 640:	b7 95       	ror	r27
 642:	f7 95       	ror	r31
 644:	9f 5f       	subi	r25, 0xFF	; 255
 646:	c9 f7       	brne	.-14     	; 0x63a <__divsf3_pse+0x78>
 648:	88 0f       	add	r24, r24
 64a:	91 1d       	adc	r25, r1
 64c:	96 95       	lsr	r25
 64e:	87 95       	ror	r24
 650:	97 f9       	bld	r25, 7
 652:	08 95       	ret
 654:	e1 e0       	ldi	r30, 0x01	; 1
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	bb 1f       	adc	r27, r27
 65e:	62 17       	cp	r22, r18
 660:	73 07       	cpc	r23, r19
 662:	84 07       	cpc	r24, r20
 664:	ba 07       	cpc	r27, r26
 666:	20 f0       	brcs	.+8      	; 0x670 <__divsf3_pse+0xae>
 668:	62 1b       	sub	r22, r18
 66a:	73 0b       	sbc	r23, r19
 66c:	84 0b       	sbc	r24, r20
 66e:	ba 0b       	sbc	r27, r26
 670:	ee 1f       	adc	r30, r30
 672:	88 f7       	brcc	.-30     	; 0x656 <__divsf3_pse+0x94>
 674:	e0 95       	com	r30
 676:	08 95       	ret

00000678 <__fixsfsi>:
 678:	0e 94 43 03 	call	0x686	; 0x686 <__fixunssfsi>
 67c:	68 94       	set
 67e:	b1 11       	cpse	r27, r1
 680:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>
 684:	08 95       	ret

00000686 <__fixunssfsi>:
 686:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_splitA>
 68a:	88 f0       	brcs	.+34     	; 0x6ae <__fixunssfsi+0x28>
 68c:	9f 57       	subi	r25, 0x7F	; 127
 68e:	98 f0       	brcs	.+38     	; 0x6b6 <__fixunssfsi+0x30>
 690:	b9 2f       	mov	r27, r25
 692:	99 27       	eor	r25, r25
 694:	b7 51       	subi	r27, 0x17	; 23
 696:	b0 f0       	brcs	.+44     	; 0x6c4 <__fixunssfsi+0x3e>
 698:	e1 f0       	breq	.+56     	; 0x6d2 <__fixunssfsi+0x4c>
 69a:	66 0f       	add	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	1a f0       	brmi	.+6      	; 0x6aa <__fixunssfsi+0x24>
 6a4:	ba 95       	dec	r27
 6a6:	c9 f7       	brne	.-14     	; 0x69a <__fixunssfsi+0x14>
 6a8:	14 c0       	rjmp	.+40     	; 0x6d2 <__fixunssfsi+0x4c>
 6aa:	b1 30       	cpi	r27, 0x01	; 1
 6ac:	91 f0       	breq	.+36     	; 0x6d2 <__fixunssfsi+0x4c>
 6ae:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_zero>
 6b2:	b1 e0       	ldi	r27, 0x01	; 1
 6b4:	08 95       	ret
 6b6:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_zero>
 6ba:	67 2f       	mov	r22, r23
 6bc:	78 2f       	mov	r23, r24
 6be:	88 27       	eor	r24, r24
 6c0:	b8 5f       	subi	r27, 0xF8	; 248
 6c2:	39 f0       	breq	.+14     	; 0x6d2 <__fixunssfsi+0x4c>
 6c4:	b9 3f       	cpi	r27, 0xF9	; 249
 6c6:	cc f3       	brlt	.-14     	; 0x6ba <__fixunssfsi+0x34>
 6c8:	86 95       	lsr	r24
 6ca:	77 95       	ror	r23
 6cc:	67 95       	ror	r22
 6ce:	b3 95       	inc	r27
 6d0:	d9 f7       	brne	.-10     	; 0x6c8 <__fixunssfsi+0x42>
 6d2:	3e f4       	brtc	.+14     	; 0x6e2 <__fixunssfsi+0x5c>
 6d4:	90 95       	com	r25
 6d6:	80 95       	com	r24
 6d8:	70 95       	com	r23
 6da:	61 95       	neg	r22
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	8f 4f       	sbci	r24, 0xFF	; 255
 6e0:	9f 4f       	sbci	r25, 0xFF	; 255
 6e2:	08 95       	ret

000006e4 <__floatunsisf>:
 6e4:	e8 94       	clt
 6e6:	09 c0       	rjmp	.+18     	; 0x6fa <__floatsisf+0x12>

000006e8 <__floatsisf>:
 6e8:	97 fb       	bst	r25, 7
 6ea:	3e f4       	brtc	.+14     	; 0x6fa <__floatsisf+0x12>
 6ec:	90 95       	com	r25
 6ee:	80 95       	com	r24
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	99 23       	and	r25, r25
 6fc:	a9 f0       	breq	.+42     	; 0x728 <__floatsisf+0x40>
 6fe:	f9 2f       	mov	r31, r25
 700:	96 e9       	ldi	r25, 0x96	; 150
 702:	bb 27       	eor	r27, r27
 704:	93 95       	inc	r25
 706:	f6 95       	lsr	r31
 708:	87 95       	ror	r24
 70a:	77 95       	ror	r23
 70c:	67 95       	ror	r22
 70e:	b7 95       	ror	r27
 710:	f1 11       	cpse	r31, r1
 712:	f8 cf       	rjmp	.-16     	; 0x704 <__floatsisf+0x1c>
 714:	fa f4       	brpl	.+62     	; 0x754 <__floatsisf+0x6c>
 716:	bb 0f       	add	r27, r27
 718:	11 f4       	brne	.+4      	; 0x71e <__floatsisf+0x36>
 71a:	60 ff       	sbrs	r22, 0
 71c:	1b c0       	rjmp	.+54     	; 0x754 <__floatsisf+0x6c>
 71e:	6f 5f       	subi	r22, 0xFF	; 255
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	8f 4f       	sbci	r24, 0xFF	; 255
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	16 c0       	rjmp	.+44     	; 0x754 <__floatsisf+0x6c>
 728:	88 23       	and	r24, r24
 72a:	11 f0       	breq	.+4      	; 0x730 <__floatsisf+0x48>
 72c:	96 e9       	ldi	r25, 0x96	; 150
 72e:	11 c0       	rjmp	.+34     	; 0x752 <__floatsisf+0x6a>
 730:	77 23       	and	r23, r23
 732:	21 f0       	breq	.+8      	; 0x73c <__floatsisf+0x54>
 734:	9e e8       	ldi	r25, 0x8E	; 142
 736:	87 2f       	mov	r24, r23
 738:	76 2f       	mov	r23, r22
 73a:	05 c0       	rjmp	.+10     	; 0x746 <__floatsisf+0x5e>
 73c:	66 23       	and	r22, r22
 73e:	71 f0       	breq	.+28     	; 0x75c <__floatsisf+0x74>
 740:	96 e8       	ldi	r25, 0x86	; 134
 742:	86 2f       	mov	r24, r22
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	2a f0       	brmi	.+10     	; 0x754 <__floatsisf+0x6c>
 74a:	9a 95       	dec	r25
 74c:	66 0f       	add	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	88 1f       	adc	r24, r24
 752:	da f7       	brpl	.-10     	; 0x74a <__floatsisf+0x62>
 754:	88 0f       	add	r24, r24
 756:	96 95       	lsr	r25
 758:	87 95       	ror	r24
 75a:	97 f9       	bld	r25, 7
 75c:	08 95       	ret

0000075e <__fp_inf>:
 75e:	97 f9       	bld	r25, 7
 760:	9f 67       	ori	r25, 0x7F	; 127
 762:	80 e8       	ldi	r24, 0x80	; 128
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	08 95       	ret

0000076a <__fp_nan>:
 76a:	9f ef       	ldi	r25, 0xFF	; 255
 76c:	80 ec       	ldi	r24, 0xC0	; 192
 76e:	08 95       	ret

00000770 <__fp_pscA>:
 770:	00 24       	eor	r0, r0
 772:	0a 94       	dec	r0
 774:	16 16       	cp	r1, r22
 776:	17 06       	cpc	r1, r23
 778:	18 06       	cpc	r1, r24
 77a:	09 06       	cpc	r0, r25
 77c:	08 95       	ret

0000077e <__fp_pscB>:
 77e:	00 24       	eor	r0, r0
 780:	0a 94       	dec	r0
 782:	12 16       	cp	r1, r18
 784:	13 06       	cpc	r1, r19
 786:	14 06       	cpc	r1, r20
 788:	05 06       	cpc	r0, r21
 78a:	08 95       	ret

0000078c <__fp_round>:
 78c:	09 2e       	mov	r0, r25
 78e:	03 94       	inc	r0
 790:	00 0c       	add	r0, r0
 792:	11 f4       	brne	.+4      	; 0x798 <__fp_round+0xc>
 794:	88 23       	and	r24, r24
 796:	52 f0       	brmi	.+20     	; 0x7ac <__fp_round+0x20>
 798:	bb 0f       	add	r27, r27
 79a:	40 f4       	brcc	.+16     	; 0x7ac <__fp_round+0x20>
 79c:	bf 2b       	or	r27, r31
 79e:	11 f4       	brne	.+4      	; 0x7a4 <__fp_round+0x18>
 7a0:	60 ff       	sbrs	r22, 0
 7a2:	04 c0       	rjmp	.+8      	; 0x7ac <__fp_round+0x20>
 7a4:	6f 5f       	subi	r22, 0xFF	; 255
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	08 95       	ret

000007ae <__fp_split3>:
 7ae:	57 fd       	sbrc	r21, 7
 7b0:	90 58       	subi	r25, 0x80	; 128
 7b2:	44 0f       	add	r20, r20
 7b4:	55 1f       	adc	r21, r21
 7b6:	59 f0       	breq	.+22     	; 0x7ce <__fp_splitA+0x10>
 7b8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ba:	71 f0       	breq	.+28     	; 0x7d8 <__fp_splitA+0x1a>
 7bc:	47 95       	ror	r20

000007be <__fp_splitA>:
 7be:	88 0f       	add	r24, r24
 7c0:	97 fb       	bst	r25, 7
 7c2:	99 1f       	adc	r25, r25
 7c4:	61 f0       	breq	.+24     	; 0x7de <__fp_splitA+0x20>
 7c6:	9f 3f       	cpi	r25, 0xFF	; 255
 7c8:	79 f0       	breq	.+30     	; 0x7e8 <__fp_splitA+0x2a>
 7ca:	87 95       	ror	r24
 7cc:	08 95       	ret
 7ce:	12 16       	cp	r1, r18
 7d0:	13 06       	cpc	r1, r19
 7d2:	14 06       	cpc	r1, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	f2 cf       	rjmp	.-28     	; 0x7bc <__fp_split3+0xe>
 7d8:	46 95       	lsr	r20
 7da:	f1 df       	rcall	.-30     	; 0x7be <__fp_splitA>
 7dc:	08 c0       	rjmp	.+16     	; 0x7ee <__fp_splitA+0x30>
 7de:	16 16       	cp	r1, r22
 7e0:	17 06       	cpc	r1, r23
 7e2:	18 06       	cpc	r1, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	f1 cf       	rjmp	.-30     	; 0x7ca <__fp_splitA+0xc>
 7e8:	86 95       	lsr	r24
 7ea:	71 05       	cpc	r23, r1
 7ec:	61 05       	cpc	r22, r1
 7ee:	08 94       	sec
 7f0:	08 95       	ret

000007f2 <__fp_zero>:
 7f2:	e8 94       	clt

000007f4 <__fp_szero>:
 7f4:	bb 27       	eor	r27, r27
 7f6:	66 27       	eor	r22, r22
 7f8:	77 27       	eor	r23, r23
 7fa:	cb 01       	movw	r24, r22
 7fc:	97 f9       	bld	r25, 7
 7fe:	08 95       	ret

00000800 <__mulsf3>:
 800:	0e 94 13 04 	call	0x826	; 0x826 <__mulsf3x>
 804:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_round>
 808:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_pscA>
 80c:	38 f0       	brcs	.+14     	; 0x81c <__mulsf3+0x1c>
 80e:	0e 94 bf 03 	call	0x77e	; 0x77e <__fp_pscB>
 812:	20 f0       	brcs	.+8      	; 0x81c <__mulsf3+0x1c>
 814:	95 23       	and	r25, r21
 816:	11 f0       	breq	.+4      	; 0x81c <__mulsf3+0x1c>
 818:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>
 81c:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_nan>
 820:	11 24       	eor	r1, r1
 822:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>

00000826 <__mulsf3x>:
 826:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_split3>
 82a:	70 f3       	brcs	.-36     	; 0x808 <__mulsf3+0x8>

0000082c <__mulsf3_pse>:
 82c:	95 9f       	mul	r25, r21
 82e:	c1 f3       	breq	.-16     	; 0x820 <__mulsf3+0x20>
 830:	95 0f       	add	r25, r21
 832:	50 e0       	ldi	r21, 0x00	; 0
 834:	55 1f       	adc	r21, r21
 836:	62 9f       	mul	r22, r18
 838:	f0 01       	movw	r30, r0
 83a:	72 9f       	mul	r23, r18
 83c:	bb 27       	eor	r27, r27
 83e:	f0 0d       	add	r31, r0
 840:	b1 1d       	adc	r27, r1
 842:	63 9f       	mul	r22, r19
 844:	aa 27       	eor	r26, r26
 846:	f0 0d       	add	r31, r0
 848:	b1 1d       	adc	r27, r1
 84a:	aa 1f       	adc	r26, r26
 84c:	64 9f       	mul	r22, r20
 84e:	66 27       	eor	r22, r22
 850:	b0 0d       	add	r27, r0
 852:	a1 1d       	adc	r26, r1
 854:	66 1f       	adc	r22, r22
 856:	82 9f       	mul	r24, r18
 858:	22 27       	eor	r18, r18
 85a:	b0 0d       	add	r27, r0
 85c:	a1 1d       	adc	r26, r1
 85e:	62 1f       	adc	r22, r18
 860:	73 9f       	mul	r23, r19
 862:	b0 0d       	add	r27, r0
 864:	a1 1d       	adc	r26, r1
 866:	62 1f       	adc	r22, r18
 868:	83 9f       	mul	r24, r19
 86a:	a0 0d       	add	r26, r0
 86c:	61 1d       	adc	r22, r1
 86e:	22 1f       	adc	r18, r18
 870:	74 9f       	mul	r23, r20
 872:	33 27       	eor	r19, r19
 874:	a0 0d       	add	r26, r0
 876:	61 1d       	adc	r22, r1
 878:	23 1f       	adc	r18, r19
 87a:	84 9f       	mul	r24, r20
 87c:	60 0d       	add	r22, r0
 87e:	21 1d       	adc	r18, r1
 880:	82 2f       	mov	r24, r18
 882:	76 2f       	mov	r23, r22
 884:	6a 2f       	mov	r22, r26
 886:	11 24       	eor	r1, r1
 888:	9f 57       	subi	r25, 0x7F	; 127
 88a:	50 40       	sbci	r21, 0x00	; 0
 88c:	9a f0       	brmi	.+38     	; 0x8b4 <__mulsf3_pse+0x88>
 88e:	f1 f0       	breq	.+60     	; 0x8cc <__mulsf3_pse+0xa0>
 890:	88 23       	and	r24, r24
 892:	4a f0       	brmi	.+18     	; 0x8a6 <__mulsf3_pse+0x7a>
 894:	ee 0f       	add	r30, r30
 896:	ff 1f       	adc	r31, r31
 898:	bb 1f       	adc	r27, r27
 89a:	66 1f       	adc	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	91 50       	subi	r25, 0x01	; 1
 8a2:	50 40       	sbci	r21, 0x00	; 0
 8a4:	a9 f7       	brne	.-22     	; 0x890 <__mulsf3_pse+0x64>
 8a6:	9e 3f       	cpi	r25, 0xFE	; 254
 8a8:	51 05       	cpc	r21, r1
 8aa:	80 f0       	brcs	.+32     	; 0x8cc <__mulsf3_pse+0xa0>
 8ac:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>
 8b0:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>
 8b4:	5f 3f       	cpi	r21, 0xFF	; 255
 8b6:	e4 f3       	brlt	.-8      	; 0x8b0 <__mulsf3_pse+0x84>
 8b8:	98 3e       	cpi	r25, 0xE8	; 232
 8ba:	d4 f3       	brlt	.-12     	; 0x8b0 <__mulsf3_pse+0x84>
 8bc:	86 95       	lsr	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	b7 95       	ror	r27
 8c4:	f7 95       	ror	r31
 8c6:	e7 95       	ror	r30
 8c8:	9f 5f       	subi	r25, 0xFF	; 255
 8ca:	c1 f7       	brne	.-16     	; 0x8bc <__mulsf3_pse+0x90>
 8cc:	fe 2b       	or	r31, r30
 8ce:	88 0f       	add	r24, r24
 8d0:	91 1d       	adc	r25, r1
 8d2:	96 95       	lsr	r25
 8d4:	87 95       	ror	r24
 8d6:	97 f9       	bld	r25, 7
 8d8:	08 95       	ret

000008da <__divmodhi4>:
 8da:	97 fb       	bst	r25, 7
 8dc:	07 2e       	mov	r0, r23
 8de:	16 f4       	brtc	.+4      	; 0x8e4 <__divmodhi4+0xa>
 8e0:	00 94       	com	r0
 8e2:	07 d0       	rcall	.+14     	; 0x8f2 <__divmodhi4_neg1>
 8e4:	77 fd       	sbrc	r23, 7
 8e6:	09 d0       	rcall	.+18     	; 0x8fa <__divmodhi4_neg2>
 8e8:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodhi4>
 8ec:	07 fc       	sbrc	r0, 7
 8ee:	05 d0       	rcall	.+10     	; 0x8fa <__divmodhi4_neg2>
 8f0:	3e f4       	brtc	.+14     	; 0x900 <__divmodhi4_exit>

000008f2 <__divmodhi4_neg1>:
 8f2:	90 95       	com	r25
 8f4:	81 95       	neg	r24
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	08 95       	ret

000008fa <__divmodhi4_neg2>:
 8fa:	70 95       	com	r23
 8fc:	61 95       	neg	r22
 8fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000900 <__divmodhi4_exit>:
 900:	08 95       	ret

00000902 <__udivmodhi4>:
 902:	aa 1b       	sub	r26, r26
 904:	bb 1b       	sub	r27, r27
 906:	51 e1       	ldi	r21, 0x11	; 17
 908:	07 c0       	rjmp	.+14     	; 0x918 <__udivmodhi4_ep>

0000090a <__udivmodhi4_loop>:
 90a:	aa 1f       	adc	r26, r26
 90c:	bb 1f       	adc	r27, r27
 90e:	a6 17       	cp	r26, r22
 910:	b7 07       	cpc	r27, r23
 912:	10 f0       	brcs	.+4      	; 0x918 <__udivmodhi4_ep>
 914:	a6 1b       	sub	r26, r22
 916:	b7 0b       	sbc	r27, r23

00000918 <__udivmodhi4_ep>:
 918:	88 1f       	adc	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	5a 95       	dec	r21
 91e:	a9 f7       	brne	.-22     	; 0x90a <__udivmodhi4_loop>
 920:	80 95       	com	r24
 922:	90 95       	com	r25
 924:	bc 01       	movw	r22, r24
 926:	cd 01       	movw	r24, r26
 928:	08 95       	ret

0000092a <_exit>:
 92a:	f8 94       	cli

0000092c <__stop_program>:
 92c:	ff cf       	rjmp	.-2      	; 0x92c <__stop_program>
