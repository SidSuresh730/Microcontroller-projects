
ECE3411LabTest5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00000f24  00000fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00800172  00800172  0000102a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000105c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001680  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9a  00000000  00000000  00002814  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac0  00000000  00000000  000035ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00004070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000694  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab7  00000000  00000000  000049dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005493  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_18>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e2       	ldi	r30, 0x24	; 36
  c8:	ff e0       	ldi	r31, 0x0F	; 15
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 37       	cpi	r26, 0x72	; 114
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	a2 e7       	ldi	r26, 0x72	; 114
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 32       	cpi	r26, 0x26	; 38
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 3e 03 	call	0x67c	; 0x67c <main>
  ea:	0c 94 90 07 	jmp	0xf20	; 0xf20 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR1 = (uint8_t)TWBR_val;
  f2:	88 e4       	ldi	r24, 0x48	; 72
  f4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
  f8:	08 95       	ret

000000fa <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR1 = 0;
  fa:	ec ed       	ldi	r30, 0xDC	; 220
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
	// transmit START condition
	TWCR1 = (1<<TWINT1) | (1<<TWSTA1) | (1<<TWEN1);
 100:	94 ea       	ldi	r25, 0xA4	; 164
 102:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 104:	90 81       	ld	r25, Z
 106:	99 23       	and	r25, r25
 108:	ec f7       	brge	.-6      	; 0x104 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR1 & 0xF8) != TW_START){ return 1; }
 10a:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
 10e:	98 7f       	andi	r25, 0xF8	; 248
 110:	98 30       	cpi	r25, 0x08	; 8
 112:	61 f4       	brne	.+24     	; 0x12c <i2c_start+0x32>
	
	// load slave address into data register
	TWDR1 = address;
 114:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	// start transmission of address
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 11e:	ec ed       	ldi	r30, 0xDC	; 220
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <i2c_start+0x28>
/*	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
*/
	return 0;
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
	TWCR1 = (1<<TWINT1) | (1<<TWSTA1) | (1<<TWEN1);
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR1 & 0xF8) != TW_START){ return 1; }
 12c:	81 e0       	ldi	r24, 0x01	; 1
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
*/
	return 0;
}
 12e:	08 95       	ret

00000130 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR1 = data;
 130:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	// start transmission of data
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
 134:	84 e8       	ldi	r24, 0x84	; 132
 136:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 13a:	ec ed       	ldi	r30, 0xDC	; 220
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	ec f7       	brge	.-6      	; 0x13e <i2c_write+0xe>
	
	if( (TWSR1 & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 144:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
 148:	98 7f       	andi	r25, 0xF8	; 248
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	98 32       	cpi	r25, 0x28	; 40
 14e:	09 f4       	brne	.+2      	; 0x152 <i2c_write+0x22>
 150:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 152:	08 95       	ret

00000154 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWEA1);
 154:	84 ec       	ldi	r24, 0xC4	; 196
 156:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 15a:	ec ed       	ldi	r30, 0xDC	; 220
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	ec f7       	brge	.-6      	; 0x15e <i2c_read_ack+0xa>
	// return received data from TWDR
	return TWDR1;
 164:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
 168:	08 95       	ret

0000016a <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 170:	ec ed       	ldi	r30, 0xDC	; 220
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 23       	and	r24, r24
 178:	ec f7       	brge	.-6      	; 0x174 <i2c_read_nack+0xa>
	// return received data from TWDR
	return TWDR1;
 17a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
 17e:	08 95       	ret

00000180 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	6b 01       	movw	r12, r22
 190:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 192:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
 196:	f8 2e       	mov	r15, r24
 198:	81 11       	cpse	r24, r1
 19a:	12 c0       	rjmp	.+36     	; 0x1c0 <i2c_transmit+0x40>
	
	for (uint16_t i = 0; i < length; i++)
 19c:	01 15       	cp	r16, r1
 19e:	11 05       	cpc	r17, r1
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <i2c_transmit+0x38>
 1a2:	e6 01       	movw	r28, r12
 1a4:	0c 0d       	add	r16, r12
 1a6:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 1a8:	89 91       	ld	r24, Y+
 1aa:	0e 94 98 00 	call	0x130	; 0x130 <i2c_write>
 1ae:	81 11       	cpse	r24, r1
 1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <i2c_transmit+0x46>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
 1b2:	0c 17       	cp	r16, r28
 1b4:	1d 07       	cpc	r17, r29
 1b6:	c1 f7       	brne	.-16     	; 0x1a8 <i2c_transmit+0x28>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWSTO1);
 1b8:	84 e9       	ldi	r24, 0x94	; 148
 1ba:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <i2c_transmit+0x4a>
	return TWDR1;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 1c0:	ff 24       	eor	r15, r15
 1c2:	f3 94       	inc	r15
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <i2c_transmit+0x4a>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 1c6:	ff 24       	eor	r15, r15
 1c8:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
 1ca:	8f 2d       	mov	r24, r15
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

000001dc <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
 1dc:	af 92       	push	r10
 1de:	bf 92       	push	r11
 1e0:	df 92       	push	r13
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	5b 01       	movw	r10, r22
 1f0:	7a 01       	movw	r14, r20
	if (i2c_start(address | I2C_READ)) return 1;
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
 1f8:	d8 2e       	mov	r13, r24
 1fa:	81 11       	cpse	r24, r1
 1fc:	18 c0       	rjmp	.+48     	; 0x22e <i2c_receive+0x52>
	
	for (uint16_t i = 0; i < (length-1); i++)
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	e8 1a       	sub	r14, r24
 202:	f1 08       	sbc	r15, r1
 204:	51 f0       	breq	.+20     	; 0x21a <i2c_receive+0x3e>
 206:	e5 01       	movw	r28, r10
 208:	85 01       	movw	r16, r10
 20a:	0e 0d       	add	r16, r14
 20c:	1f 1d       	adc	r17, r15
	{
		data[i] = i2c_read_ack();
 20e:	0e 94 aa 00 	call	0x154	; 0x154 <i2c_read_ack>
 212:	89 93       	st	Y+, r24

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
 214:	0c 17       	cp	r16, r28
 216:	1d 07       	cpc	r17, r29
 218:	d1 f7       	brne	.-12     	; 0x20e <i2c_receive+0x32>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 21a:	e5 01       	movw	r28, r10
 21c:	ce 0d       	add	r28, r14
 21e:	df 1d       	adc	r29, r15
 220:	0e 94 b5 00 	call	0x16a	; 0x16a <i2c_read_nack>
 224:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWSTO1);
 226:	84 e9       	ldi	r24, 0x94	; 148
 228:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
 22c:	02 c0       	rjmp	.+4      	; 0x232 <i2c_receive+0x56>
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
 22e:	dd 24       	eor	r13, r13
 230:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 232:	8d 2d       	mov	r24, r13
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	bf 90       	pop	r11
 244:	af 90       	pop	r10
 246:	08 95       	ret

00000248 <InitTimer0>:
}

double celc_to_far(uint8_t celcius)
{
	return celcius*9.0/5.0 + 32;
}
 248:	84 b5       	in	r24, 0x24	; 36
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	84 bd       	out	0x24, r24	; 36
 24e:	89 ef       	ldi	r24, 0xF9	; 249
 250:	87 bd       	out	0x27, r24	; 39
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	85 bd       	out	0x25, r24	; 37
 25c:	08 95       	ret

0000025e <UART_Init>:
 25e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 262:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 26c:	8e e0       	ldi	r24, 0x0E	; 14
 26e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 272:	08 95       	ret

00000274 <getstr>:
 274:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <r_ready>
 278:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <r_index+0x1>
 27c:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <r_index>
 280:	e1 ec       	ldi	r30, 0xC1	; 193
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	80 68       	ori	r24, 0x80	; 128
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret

0000028c <writeDouble>:

void writeDouble(double number) // writes a double (XX.XX) to the buffer
{
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	6b 01       	movw	r12, r22
 29c:	7c 01       	movw	r14, r24
	uart_putchar((int)number / 10 + 48, &UART_Stream);
 29e:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fixsfsi>
 2a2:	ca e0       	ldi	r28, 0x0A	; 10
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
 2a6:	cb 01       	movw	r24, r22
 2a8:	be 01       	movw	r22, r28
 2aa:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodhi4>
 2ae:	96 2f       	mov	r25, r22
 2b0:	18 2f       	mov	r17, r24
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	71 e0       	ldi	r23, 0x01	; 1
 2b6:	80 e3       	ldi	r24, 0x30	; 48
 2b8:	89 0f       	add	r24, r25
 2ba:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	uart_putchar((int)number % 10 + 48, &UART_Stream); // + 48 converts the integer to the corresponding character in ASCII
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	71 e0       	ldi	r23, 0x01	; 1
 2c2:	80 e3       	ldi	r24, 0x30	; 48
 2c4:	81 0f       	add	r24, r17
 2c6:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	uart_putchar('.', &UART_Stream);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	71 e0       	ldi	r23, 0x01	; 1
 2ce:	8e e2       	ldi	r24, 0x2E	; 46
 2d0:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	uart_putchar((int)(number * 10) % 10 + 48, &UART_Stream);
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	40 e2       	ldi	r20, 0x20	; 32
 2da:	51 e4       	ldi	r21, 0x41	; 65
 2dc:	c7 01       	movw	r24, r14
 2de:	b6 01       	movw	r22, r12
 2e0:	0e 94 90 06 	call	0xd20	; 0xd20 <__mulsf3>
 2e4:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fixsfsi>
 2e8:	cb 01       	movw	r24, r22
 2ea:	be 01       	movw	r22, r28
 2ec:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodhi4>
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	80 5d       	subi	r24, 0xD0	; 208
 2f6:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	uart_putchar((int)(number * 100) % 10 + 48, &UART_Stream);
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	48 ec       	ldi	r20, 0xC8	; 200
 300:	52 e4       	ldi	r21, 0x42	; 66
 302:	c7 01       	movw	r24, r14
 304:	b6 01       	movw	r22, r12
 306:	0e 94 90 06 	call	0xd20	; 0xd20 <__mulsf3>
 30a:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fixsfsi>
 30e:	cb 01       	movw	r24, r22
 310:	be 01       	movw	r22, r28
 312:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodhi4>
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	71 e0       	ldi	r23, 0x01	; 1
 31a:	80 5d       	subi	r24, 0xD0	; 208
 31c:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	//uart_putchar('\n', &UART_Stream);
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	cf 90       	pop	r12
 32e:	08 95       	ret

00000330 <writeMSG>:

void writeMSG(void)
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
	for(int i=0; i<strlen(preamble_msg); i++)
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d0 e0       	ldi	r29, 0x00	; 0
 338:	08 c0       	rjmp	.+16     	; 0x34a <writeMSG+0x1a>
	{
		uart_putchar(preamble_msg[i], &UART_Stream);
 33a:	ac 0f       	add	r26, r28
 33c:	bd 1f       	adc	r27, r29
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	71 e0       	ldi	r23, 0x01	; 1
 342:	8c 91       	ld	r24, X
 344:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	//uart_putchar('\n', &UART_Stream);
}

void writeMSG(void)
{
	for(int i=0; i<strlen(preamble_msg); i++)
 348:	21 96       	adiw	r28, 0x01	; 1
 34a:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <preamble_msg>
 34e:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <preamble_msg+0x1>
 352:	fd 01       	movw	r30, r26
 354:	01 90       	ld	r0, Z+
 356:	00 20       	and	r0, r0
 358:	e9 f7       	brne	.-6      	; 0x354 <writeMSG+0x24>
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	ea 1b       	sub	r30, r26
 35e:	fb 0b       	sbc	r31, r27
 360:	ce 17       	cp	r28, r30
 362:	df 07       	cpc	r29, r31
 364:	50 f3       	brcs	.-44     	; 0x33a <writeMSG+0xa>
	{
		uart_putchar(preamble_msg[i], &UART_Stream);
	}
	if(!(PINB & (1<<PINB7)))
 366:	1f 99       	sbic	0x03, 7	; 3
 368:	24 c0       	rjmp	.+72     	; 0x3b2 <writeMSG+0x82>
	{
		writeDouble(temperature);
 36a:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <temperature>
 36e:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <temperature+0x1>
 372:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <temperature+0x2>
 376:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <temperature+0x3>
 37a:	0e 94 46 01 	call	0x28c	; 0x28c <writeDouble>
		for(int i=0; i<strlen(celc_msg); i++)
 37e:	c0 e0       	ldi	r28, 0x00	; 0
 380:	d0 e0       	ldi	r29, 0x00	; 0
 382:	08 c0       	rjmp	.+16     	; 0x394 <writeMSG+0x64>
		{
			uart_putchar(celc_msg[i], &UART_Stream);
 384:	ac 0f       	add	r26, r28
 386:	bd 1f       	adc	r27, r29
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	71 e0       	ldi	r23, 0x01	; 1
 38c:	8c 91       	ld	r24, X
 38e:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		uart_putchar(preamble_msg[i], &UART_Stream);
	}
	if(!(PINB & (1<<PINB7)))
	{
		writeDouble(temperature);
		for(int i=0; i<strlen(celc_msg); i++)
 392:	21 96       	adiw	r28, 0x01	; 1
 394:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <celc_msg>
 398:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <celc_msg+0x1>
 39c:	fd 01       	movw	r30, r26
 39e:	01 90       	ld	r0, Z+
 3a0:	00 20       	and	r0, r0
 3a2:	e9 f7       	brne	.-6      	; 0x39e <writeMSG+0x6e>
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	ea 1b       	sub	r30, r26
 3a8:	fb 0b       	sbc	r31, r27
 3aa:	ce 17       	cp	r28, r30
 3ac:	df 07       	cpc	r29, r31
 3ae:	50 f3       	brcs	.-44     	; 0x384 <writeMSG+0x54>
 3b0:	3c c0       	rjmp	.+120    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			uart_putchar(celc_msg[i], &UART_Stream);
		}
		return;
	}
	writeDouble(celc_to_far(temperature));
 3b2:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <temperature>
 3b6:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <temperature+0x1>
 3ba:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <temperature+0x2>
 3be:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <temperature+0x3>
 3c2:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fixunssfsi>
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 04 06 	call	0xc08	; 0xc08 <__floatsisf>
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	40 e1       	ldi	r20, 0x10	; 16
 3d6:	51 e4       	ldi	r21, 0x41	; 65
 3d8:	0e 94 90 06 	call	0xd20	; 0xd20 <__mulsf3>
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	40 ea       	ldi	r20, 0xA0	; 160
 3e2:	50 e4       	ldi	r21, 0x40	; 64
 3e4:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divsf3>
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	52 e4       	ldi	r21, 0x42	; 66
 3f0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3>
 3f4:	0e 94 46 01 	call	0x28c	; 0x28c <writeDouble>
	for(int i=0; i<strlen(faren_msg); i++)
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
 3fa:	d0 e0       	ldi	r29, 0x00	; 0
 3fc:	08 c0       	rjmp	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		uart_putchar(faren_msg[i], &UART_Stream);
 3fe:	ac 0f       	add	r26, r28
 400:	bd 1f       	adc	r27, r29
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	71 e0       	ldi	r23, 0x01	; 1
 406:	8c 91       	ld	r24, X
 408:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
			uart_putchar(celc_msg[i], &UART_Stream);
		}
		return;
	}
	writeDouble(celc_to_far(temperature));
	for(int i=0; i<strlen(faren_msg); i++)
 40c:	21 96       	adiw	r28, 0x01	; 1
 40e:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <faren_msg>
 412:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <faren_msg+0x1>
 416:	fd 01       	movw	r30, r26
 418:	01 90       	ld	r0, Z+
 41a:	00 20       	and	r0, r0
 41c:	e9 f7       	brne	.-6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	ea 1b       	sub	r30, r26
 422:	fb 0b       	sbc	r31, r27
 424:	ce 17       	cp	r28, r30
 426:	df 07       	cpc	r29, r31
 428:	50 f3       	brcs	.-44     	; 0x3fe <writeMSG+0xce>
	{
		uart_putchar(faren_msg[i], &UART_Stream);
	}
	
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <writeErrMSG>:

void writeErrMSG(void)
{
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
		for(int i=0; i<strlen(error_msg); i++)
 434:	c0 e0       	ldi	r28, 0x00	; 0
 436:	d0 e0       	ldi	r29, 0x00	; 0
 438:	08 c0       	rjmp	.+16     	; 0x44a <writeErrMSG+0x1a>
		{
			uart_putchar(error_msg[i], &UART_Stream);
 43a:	ac 0f       	add	r26, r28
 43c:	bd 1f       	adc	r27, r29
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	71 e0       	ldi	r23, 0x01	; 1
 442:	8c 91       	ld	r24, X
 444:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	
}

void writeErrMSG(void)
{
		for(int i=0; i<strlen(error_msg); i++)
 448:	21 96       	adiw	r28, 0x01	; 1
 44a:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <error_msg>
 44e:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <error_msg+0x1>
 452:	fd 01       	movw	r30, r26
 454:	01 90       	ld	r0, Z+
 456:	00 20       	and	r0, r0
 458:	e9 f7       	brne	.-6      	; 0x454 <writeErrMSG+0x24>
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	ea 1b       	sub	r30, r26
 45e:	fb 0b       	sbc	r31, r27
 460:	ce 17       	cp	r28, r30
 462:	df 07       	cpc	r29, r31
 464:	50 f3       	brcs	.-44     	; 0x43a <writeErrMSG+0xa>
		{
			uart_putchar(error_msg[i], &UART_Stream);
		}
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <getMSG>:
int getMSG(void)
{
	int i;
	int freq = 0;

	for(i=0; i<strlen(correct_msg); i++)
 46c:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <correct_msg>
 470:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <correct_msg+0x1>
 474:	df 01       	movw	r26, r30
 476:	0d 90       	ld	r0, X+
 478:	00 20       	and	r0, r0
 47a:	e9 f7       	brne	.-6      	; 0x476 <getMSG+0xa>
 47c:	11 97       	sbiw	r26, 0x01	; 1
 47e:	bd 01       	movw	r22, r26
 480:	6e 1b       	sub	r22, r30
 482:	7f 0b       	sbc	r23, r31
 484:	cb 01       	movw	r24, r22
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	0f c0       	rjmp	.+30     	; 0x4aa <getMSG+0x3e>
	{
		if(r_buffer[i]!=correct_msg[i])
 48c:	d9 01       	movw	r26, r18
 48e:	a0 53       	subi	r26, 0x30	; 48
 490:	be 4f       	sbci	r27, 0xFE	; 254
 492:	5c 91       	ld	r21, X
 494:	41 91       	ld	r20, Z+
 496:	54 17       	cp	r21, r20
 498:	31 f0       	breq	.+12     	; 0x4a6 <getMSG+0x3a>
		{
			invalid_msg_flag = 1;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <invalid_msg_flag>
			return -1;
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	9f ef       	ldi	r25, 0xFF	; 255
 4a4:	08 95       	ret
int getMSG(void)
{
	int i;
	int freq = 0;

	for(i=0; i<strlen(correct_msg); i++)
 4a6:	2f 5f       	subi	r18, 0xFF	; 255
 4a8:	3f 4f       	sbci	r19, 0xFF	; 255
 4aa:	28 17       	cp	r18, r24
 4ac:	39 07       	cpc	r19, r25
 4ae:	71 f7       	brne	.-36     	; 0x48c <getMSG+0x20>
		{
			invalid_msg_flag = 1;
			return -1;
		}
	}
	while(i<RX_BUFSIZE)
 4b0:	80 35       	cpi	r24, 0x50	; 80
 4b2:	91 05       	cpc	r25, r1
 4b4:	c4 f1       	brlt	.+112    	; 0x526 <getMSG+0xba>
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	08 95       	ret
	{
		if(r_buffer[i]>47 && r_buffer[i]<58)
 4bc:	fc 01       	movw	r30, r24
 4be:	e0 53       	subi	r30, 0x30	; 48
 4c0:	fe 4f       	sbci	r31, 0xFE	; 254
 4c2:	40 81       	ld	r20, Z
 4c4:	40 33       	cpi	r20, 0x30	; 48
 4c6:	30 f1       	brcs	.+76     	; 0x514 <getMSG+0xa8>
 4c8:	fc 01       	movw	r30, r24
 4ca:	e0 53       	subi	r30, 0x30	; 48
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	40 81       	ld	r20, Z
 4d0:	4a 33       	cpi	r20, 0x3A	; 58
 4d2:	18 f0       	brcs	.+6      	; 0x4da <getMSG+0x6e>
 4d4:	1f c0       	rjmp	.+62     	; 0x514 <getMSG+0xa8>
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
		{
			freq*=10;
 4da:	a9 01       	movw	r20, r18
 4dc:	44 0f       	add	r20, r20
 4de:	55 1f       	adc	r21, r21
 4e0:	22 0f       	add	r18, r18
 4e2:	33 1f       	adc	r19, r19
 4e4:	22 0f       	add	r18, r18
 4e6:	33 1f       	adc	r19, r19
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	24 0f       	add	r18, r20
 4ee:	35 1f       	adc	r19, r21
			freq+=(r_buffer[i]-48);
 4f0:	fc 01       	movw	r30, r24
 4f2:	e0 53       	subi	r30, 0x30	; 48
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	40 81       	ld	r20, Z
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	40 53       	subi	r20, 0x30	; 48
 4fc:	51 09       	sbc	r21, r1
 4fe:	24 0f       	add	r18, r20
 500:	35 1f       	adc	r19, r21
		}
		else if(r_buffer[i]==0)
			return freq;
		else
			return -1;
		i++;
 502:	01 96       	adiw	r24, 0x01	; 1
		{
			invalid_msg_flag = 1;
			return -1;
		}
	}
	while(i<RX_BUFSIZE)
 504:	80 35       	cpi	r24, 0x50	; 80
 506:	91 05       	cpc	r25, r1
 508:	c9 f6       	brne	.-78     	; 0x4bc <getMSG+0x50>
	{
		if(r_buffer[i]>47 && r_buffer[i]<58)
		{
			freq*=10;
			freq+=(r_buffer[i]-48);
 50a:	82 2f       	mov	r24, r18
 50c:	93 2f       	mov	r25, r19
 50e:	08 95       	ret
			return -1;
		}
	}
	while(i<RX_BUFSIZE)
	{
		if(r_buffer[i]>47 && r_buffer[i]<58)
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
		{
			freq*=10;
			freq+=(r_buffer[i]-48);
		}
		else if(r_buffer[i]==0)
 514:	fc 01       	movw	r30, r24
 516:	e0 53       	subi	r30, 0x30	; 48
 518:	fe 4f       	sbci	r31, 0xFE	; 254
 51a:	80 81       	ld	r24, Z
 51c:	81 11       	cpse	r24, r1
 51e:	0f c0       	rjmp	.+30     	; 0x53e <getMSG+0xd2>
 520:	82 2f       	mov	r24, r18
 522:	93 2f       	mov	r25, r19
 524:	08 95       	ret
			return -1;
		}
	}
	while(i<RX_BUFSIZE)
	{
		if(r_buffer[i]>47 && r_buffer[i]<58)
 526:	fb 01       	movw	r30, r22
 528:	e0 53       	subi	r30, 0x30	; 48
 52a:	fe 4f       	sbci	r31, 0xFE	; 254
 52c:	20 81       	ld	r18, Z
 52e:	20 33       	cpi	r18, 0x30	; 48
 530:	78 f3       	brcs	.-34     	; 0x510 <getMSG+0xa4>
 532:	20 81       	ld	r18, Z
 534:	2a 33       	cpi	r18, 0x3A	; 58
 536:	78 f2       	brcs	.-98     	; 0x4d6 <getMSG+0x6a>
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	eb cf       	rjmp	.-42     	; 0x514 <getMSG+0xa8>
			freq+=(r_buffer[i]-48);
		}
		else if(r_buffer[i]==0)
			return freq;
		else
			return -1;
 53e:	8f ef       	ldi	r24, 0xFF	; 255
 540:	9f ef       	ldi	r25, 0xFF	; 255
		i++;
	}
	return freq;
}
 542:	08 95       	ret

00000544 <__vector_14>:


ISR(TIMER0_COMPA_vect)
{
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
	counter++;
 552:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <counter>
 556:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <counter+0x1>
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <counter+0x1>
 560:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <counter>
}
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <__vector_18>:

ISR(USART0_RX_vect)
{
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	char r_char = UDR0;
 594:	e6 ec       	ldi	r30, 0xC6	; 198
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
	//Echo character back so that human  user can see
	UDR0 = r_char;
 59a:	80 83       	st	Z, r24
	
	if(r_char != '\r' && r_char != 0) // Enter NOT pressed
 59c:	8d 30       	cpi	r24, 0x0D	; 13
 59e:	09 f4       	brne	.+2      	; 0x5a2 <__vector_18+0x30>
 5a0:	48 c0       	rjmp	.+144    	; 0x632 <__vector_18+0xc0>
 5a2:	88 23       	and	r24, r24
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <__vector_18+0x36>
 5a6:	45 c0       	rjmp	.+138    	; 0x632 <__vector_18+0xc0>
	{
		if(r_char == 8) // Backspace pressed 
 5a8:	88 30       	cpi	r24, 0x08	; 8
 5aa:	b1 f4       	brne	.+44     	; 0x5d8 <__vector_18+0x66>
		{
			if(r_index != 0)
 5ac:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <r_index>
 5b0:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <r_index+0x1>
 5b4:	00 97       	sbiw	r24, 0x00	; 0
 5b6:	29 f0       	breq	.+10     	; 0x5c2 <__vector_18+0x50>
				--r_index; //move index back
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <r_index+0x1>
 5be:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <r_index>
			uart_putchar(' ', &UART_Stream); //erase character on screen
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	71 e0       	ldi	r23, 0x01	; 1
 5c6:	80 e2       	ldi	r24, 0x20	; 32
 5c8:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
			uart_putchar('\b', &UART_Stream); // backspace
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	71 e0       	ldi	r23, 0x01	; 1
 5d0:	88 e0       	ldi	r24, 0x08	; 8
 5d2:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
 5d6:	41 c0       	rjmp	.+130    	; 0x65a <__vector_18+0xe8>
			
		}
		else if(r_char == 127) // sent by pressing Ctrl + Backspace
 5d8:	8f 37       	cpi	r24, 0x7F	; 127
 5da:	a1 f4       	brne	.+40     	; 0x604 <__vector_18+0x92>
		{
			r_buffer[r_index] = 0; //terminate string with null character
 5dc:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <r_index>
 5e0:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <r_index+0x1>
 5e4:	e0 53       	subi	r30, 0x30	; 48
 5e6:	fe 4f       	sbci	r31, 0xFE	; 254
 5e8:	10 82       	st	Z, r1
			r_ready = 1;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <r_ready>
			listen_state = 1;		// raise listen flag
 5f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <listen_state>
			delete_flag = 1;		// raise delete flag
 5f4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
			UCSR0B ^= (1<<RXCIE0); // disable receive interrupt
 5f8:	e1 ec       	ldi	r30, 0xC1	; 193
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	80 58       	subi	r24, 0x80	; 128
 600:	80 83       	st	Z, r24
 602:	2b c0       	rjmp	.+86     	; 0x65a <__vector_18+0xe8>
		}
		else
		{
			r_buffer[r_index] = r_char;
 604:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <r_index>
 608:	30 91 ce 01 	lds	r19, 0x01CE	; 0x8001ce <r_index+0x1>
 60c:	f9 01       	movw	r30, r18
 60e:	e0 53       	subi	r30, 0x30	; 48
 610:	fe 4f       	sbci	r31, 0xFE	; 254
 612:	80 83       	st	Z, r24
			if(r_index < RX_BUFSIZE-1) 
 614:	2f 34       	cpi	r18, 0x4F	; 79
 616:	31 05       	cpc	r19, r1
 618:	3c f4       	brge	.+14     	; 0x628 <__vector_18+0xb6>
			{
				r_index++;
 61a:	2f 5f       	subi	r18, 0xFF	; 255
 61c:	3f 4f       	sbci	r19, 0xFF	; 255
 61e:	30 93 ce 01 	sts	0x01CE, r19	; 0x8001ce <r_index+0x1>
 622:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <r_index>
 626:	19 c0       	rjmp	.+50     	; 0x65a <__vector_18+0xe8>
			}
			else {r_index = 0;}
 628:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <r_index+0x1>
 62c:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <r_index>
 630:	14 c0       	rjmp	.+40     	; 0x65a <__vector_18+0xe8>
		}
	}
	else
	{
		uart_putchar('\n', &UART_Stream); // newline
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	71 e0       	ldi	r23, 0x01	; 1
 636:	8a e0       	ldi	r24, 0x0A	; 10
 638:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		r_buffer[r_index] = 0; //terminate string with null character
 63c:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <r_index>
 640:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <r_index+0x1>
 644:	e0 53       	subi	r30, 0x30	; 48
 646:	fe 4f       	sbci	r31, 0xFE	; 254
 648:	10 82       	st	Z, r1
		r_ready = 1;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <r_ready>
		UCSR0B ^= (1<<RXCIE0); // disable receive interrupt
 650:	e1 ec       	ldi	r30, 0xC1	; 193
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	80 81       	ld	r24, Z
 656:	80 58       	subi	r24, 0x80	; 128
 658:	80 83       	st	Z, r24
	}
}
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <main>:


int main(void)
{
	DDRB &= ~(1<<DDB7); //PB7, on-board button
 67c:	27 98       	cbi	0x04, 7	; 4
	i2c_init();
 67e:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_init>
	UART_Init(MYUBRR);
 682:	87 e6       	ldi	r24, 0x67	; 103
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 2f 01 	call	0x25e	; 0x25e <UART_Init>
	InitTimer0();
 68a:	0e 94 24 01 	call	0x248	; 0x248 <InitTimer0>
	sei();
 68e:	78 94       	sei
	getstr();
 690:	0e 94 3a 01 	call	0x274	; 0x274 <getstr>
				}
				else
					listen_state = 0;
			}
		}
		if(counter>=1000*freq && !listen_state) //freq seconds
 694:	c8 ee       	ldi	r28, 0xE8	; 232
 696:	d3 e0       	ldi	r29, 0x03	; 3
	sei();
	getstr();
	/* Replace with your application code */
	while (1)
	{
		if(listen_state)
 698:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <listen_state>
 69c:	88 23       	and	r24, r24
 69e:	09 f4       	brne	.+2      	; 0x6a2 <main+0x26>
 6a0:	45 c0       	rjmp	.+138    	; 0x72c <main+0xb0>
		{
			//getstr();
			if(r_ready)
 6a2:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <r_ready>
 6a6:	88 23       	and	r24, r24
 6a8:	09 f4       	brne	.+2      	; 0x6ac <main+0x30>
 6aa:	54 c0       	rjmp	.+168    	; 0x754 <main+0xd8>
			{
				freq = getMSG();
 6ac:	0e 94 36 02 	call	0x46c	; 0x46c <getMSG>
 6b0:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <freq+0x1>
 6b4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <freq>
				if(freq == -1)		//INVALID COMMAND
 6b8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <freq>
 6bc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <freq+0x1>
 6c0:	01 96       	adiw	r24, 0x01	; 1
 6c2:	59 f4       	brne	.+22     	; 0x6da <main+0x5e>
				{
					if(!delete_flag)
 6c4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
 6c8:	81 11       	cpse	r24, r1
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <main+0x54>
					{
						writeErrMSG();
 6cc:	0e 94 18 02 	call	0x430	; 0x430 <writeErrMSG>
					}
					getstr();
 6d0:	0e 94 3a 01 	call	0x274	; 0x274 <getstr>
					delete_flag = 0;
 6d4:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
					continue;
 6d8:	df cf       	rjmp	.-66     	; 0x698 <main+0x1c>
				}
				else
					listen_state = 0;
 6da:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <listen_state>
 6de:	26 c0       	rjmp	.+76     	; 0x72c <main+0xb0>
			}
		}
		if(counter>=1000*freq && !listen_state) //freq seconds
		{
			counter = 0;
 6e0:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <counter+0x1>
 6e4:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <counter>
			i2c_transmit(slave_addr, 0x00, 8);
 6e8:	48 e0       	ldi	r20, 0x08	; 8
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	80 e9       	ldi	r24, 0x90	; 144
 6f2:	0e 94 c0 00 	call	0x180	; 0x180 <i2c_transmit>
			i2c_receive(slave_addr, &receive, 8);
 6f6:	48 e0       	ldi	r20, 0x08	; 8
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	6f ec       	ldi	r22, 0xCF	; 207
 6fc:	71 e0       	ldi	r23, 0x01	; 1
 6fe:	80 e9       	ldi	r24, 0x90	; 144
 700:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_receive>
			temperature = receive;
 704:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <receive>
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 02 06 	call	0xc04	; 0xc04 <__floatunsisf>
 712:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <temperature>
 716:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <temperature+0x1>
 71a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <temperature+0x2>
 71e:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <temperature+0x3>
			writeMSG();
 722:	0e 94 98 01 	call	0x330	; 0x330 <writeMSG>
			getstr();
 726:	0e 94 3a 01 	call	0x274	; 0x274 <getstr>
 72a:	b6 cf       	rjmp	.-148    	; 0x698 <main+0x1c>
				}
				else
					listen_state = 0;
			}
		}
		if(counter>=1000*freq && !listen_state) //freq seconds
 72c:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <freq>
 730:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <freq+0x1>
 734:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <counter>
 738:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <counter+0x1>
 73c:	4c 9f       	mul	r20, r28
 73e:	90 01       	movw	r18, r0
 740:	4d 9f       	mul	r20, r29
 742:	30 0d       	add	r19, r0
 744:	5c 9f       	mul	r21, r28
 746:	30 0d       	add	r19, r0
 748:	11 24       	eor	r1, r1
 74a:	82 17       	cp	r24, r18
 74c:	93 07       	cpc	r25, r19
 74e:	0c f4       	brge	.+2      	; 0x752 <main+0xd6>
 750:	a3 cf       	rjmp	.-186    	; 0x698 <main+0x1c>
 752:	c6 cf       	rjmp	.-116    	; 0x6e0 <main+0x64>
 754:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <freq>
 758:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <freq+0x1>
 75c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <counter>
 760:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <counter+0x1>
 764:	99 cf       	rjmp	.-206    	; 0x698 <main+0x1c>

00000766 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 766:	cf 93       	push	r28
 768:	c8 2f       	mov	r28, r24

  if (c == '\a')
 76a:	87 30       	cpi	r24, 0x07	; 7
 76c:	69 f4       	brne	.+26     	; 0x788 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 76e:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__iob+0x4>
 772:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__iob+0x5>
 776:	47 e0       	ldi	r20, 0x07	; 7
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	8a e6       	ldi	r24, 0x6A	; 106
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	0e 94 25 07 	call	0xe4a	; 0xe4a <fwrite>
      return 0;
 786:	0c c0       	rjmp	.+24     	; 0x7a0 <uart_putchar+0x3a>
    }

  if (c == '\n')
 788:	8a 30       	cpi	r24, 0x0A	; 10
 78a:	19 f4       	brne	.+6      	; 0x792 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 78c:	8d e0       	ldi	r24, 0x0D	; 13
 78e:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 792:	e0 ec       	ldi	r30, 0xC0	; 192
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	85 ff       	sbrs	r24, 5
 79a:	fd cf       	rjmp	.-6      	; 0x796 <uart_putchar+0x30>
  UDR0 = c;
 79c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

  return 0;
}
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

000007a8 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 7a8:	6f 92       	push	r6
 7aa:	7f 92       	push	r7
 7ac:	8f 92       	push	r8
 7ae:	9f 92       	push	r9
 7b0:	af 92       	push	r10
 7b2:	bf 92       	push	r11
 7b4:	cf 92       	push	r12
 7b6:	df 92       	push	r13
 7b8:	ef 92       	push	r14
 7ba:	ff 92       	push	r15
 7bc:	0f 93       	push	r16
 7be:	1f 93       	push	r17
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 7c4:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <rxp.1828>
 7c8:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <rxp.1828+0x1>
 7cc:	23 2b       	or	r18, r19
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <uart_getchar+0x2a>
 7d0:	da c0       	rjmp	.+436    	; 0x986 <__stack+0x87>
 7d2:	8c 01       	movw	r16, r24
 7d4:	0f 2e       	mov	r0, r31
 7d6:	fa e7       	ldi	r31, 0x7A	; 122
 7d8:	8f 2e       	mov	r8, r31
 7da:	f1 e0       	ldi	r31, 0x01	; 1
 7dc:	9f 2e       	mov	r9, r31
 7de:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 7e0:	c0 ec       	ldi	r28, 0xC0	; 192
 7e2:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 7e4:	0f 2e       	mov	r0, r31
 7e6:	f6 ec       	ldi	r31, 0xC6	; 198
 7e8:	cf 2e       	mov	r12, r31
 7ea:	d1 2c       	mov	r13, r1
 7ec:	f0 2d       	mov	r31, r0
 7ee:	54 01       	movw	r10, r8
 7f0:	0f 2e       	mov	r0, r31
 7f2:	f9 e7       	ldi	r31, 0x79	; 121
 7f4:	6f 2e       	mov	r6, r31
 7f6:	f1 e0       	ldi	r31, 0x01	; 1
 7f8:	7f 2e       	mov	r7, r31
 7fa:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 7fc:	88 81       	ld	r24, Y
 7fe:	88 23       	and	r24, r24
 800:	ec f7       	brge	.-6      	; 0x7fc <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 802:	88 81       	ld	r24, Y
 804:	84 fd       	sbrc	r24, 4
 806:	d2 c0       	rjmp	.+420    	; 0x9ac <__stack+0xad>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 808:	88 81       	ld	r24, Y
 80a:	83 fd       	sbrc	r24, 3
 80c:	d2 c0       	rjmp	.+420    	; 0x9b2 <__stack+0xb3>
	  return _FDEV_ERR;
	c = UDR0;
 80e:	f6 01       	movw	r30, r12
 810:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 812:	8d 30       	cpi	r24, 0x0D	; 13
 814:	11 f0       	breq	.+4      	; 0x81a <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 816:	8a 30       	cpi	r24, 0x0A	; 10
 818:	69 f4       	brne	.+26     	; 0x834 <uart_getchar+0x8c>
	  {
	    *cp = c;
 81a:	8a e0       	ldi	r24, 0x0A	; 10
 81c:	f4 01       	movw	r30, r8
 81e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 820:	b8 01       	movw	r22, r16
 822:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	    rxp = b;
 826:	8a e7       	ldi	r24, 0x7A	; 122
 828:	91 e0       	ldi	r25, 0x01	; 1
 82a:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <rxp.1828+0x1>
 82e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <rxp.1828>
	    break;
 832:	a9 c0       	rjmp	.+338    	; 0x986 <__stack+0x87>
	  }
	else if (c == '\t')
 834:	89 30       	cpi	r24, 0x09	; 9
 836:	39 f0       	breq	.+14     	; 0x846 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 838:	90 ee       	ldi	r25, 0xE0	; 224
 83a:	98 0f       	add	r25, r24
 83c:	9f 35       	cpi	r25, 0x5F	; 95
 83e:	20 f0       	brcs	.+8      	; 0x848 <uart_getchar+0xa0>
 840:	80 3a       	cpi	r24, 0xA0	; 160
 842:	b8 f0       	brcs	.+46     	; 0x872 <uart_getchar+0xca>
 844:	01 c0       	rjmp	.+2      	; 0x848 <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 846:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 848:	f9 ec       	ldi	r31, 0xC9	; 201
 84a:	8f 16       	cp	r8, r31
 84c:	f1 e0       	ldi	r31, 0x01	; 1
 84e:	9f 06       	cpc	r9, r31
 850:	29 f4       	brne	.+10     	; 0x85c <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 852:	b8 01       	movw	r22, r16
 854:	87 e0       	ldi	r24, 0x07	; 7
 856:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
 85a:	d0 cf       	rjmp	.-96     	; 0x7fc <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 85c:	74 01       	movw	r14, r8
 85e:	9f ef       	ldi	r25, 0xFF	; 255
 860:	e9 1a       	sub	r14, r25
 862:	f9 0a       	sbc	r15, r25
 864:	f4 01       	movw	r30, r8
 866:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 868:	b8 01       	movw	r22, r16
 86a:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 86e:	47 01       	movw	r8, r14
 870:	c5 cf       	rjmp	.-118    	; 0x7fc <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 872:	82 31       	cpi	r24, 0x12	; 18
 874:	d1 f1       	breq	.+116    	; 0x8ea <uart_getchar+0x142>
 876:	30 f4       	brcc	.+12     	; 0x884 <uart_getchar+0xdc>
 878:	83 30       	cpi	r24, 0x03	; 3
 87a:	09 f4       	brne	.+2      	; 0x87e <uart_getchar+0xd6>
 87c:	9d c0       	rjmp	.+314    	; 0x9b8 <__stack+0xb9>
 87e:	88 30       	cpi	r24, 0x08	; 8
 880:	e9 f0       	breq	.+58     	; 0x8bc <uart_getchar+0x114>
 882:	bc cf       	rjmp	.-136    	; 0x7fc <uart_getchar+0x54>
 884:	87 31       	cpi	r24, 0x17	; 23
 886:	29 f0       	breq	.+10     	; 0x892 <uart_getchar+0xea>
 888:	8f 37       	cpi	r24, 0x7F	; 127
 88a:	c1 f0       	breq	.+48     	; 0x8bc <uart_getchar+0x114>
 88c:	85 31       	cpi	r24, 0x15	; 21
 88e:	79 f0       	breq	.+30     	; 0x8ae <uart_getchar+0x106>
 890:	b5 cf       	rjmp	.-150    	; 0x7fc <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 892:	fa e7       	ldi	r31, 0x7A	; 122
 894:	8f 16       	cp	r8, r31
 896:	f1 e0       	ldi	r31, 0x01	; 1
 898:	9f 06       	cpc	r9, r31
 89a:	09 f0       	breq	.+2      	; 0x89e <uart_getchar+0xf6>
 89c:	08 f4       	brcc	.+2      	; 0x8a0 <uart_getchar+0xf8>
 89e:	ae cf       	rjmp	.-164    	; 0x7fc <uart_getchar+0x54>
 8a0:	f4 01       	movw	r30, r8
 8a2:	31 97       	sbiw	r30, 0x01	; 1
 8a4:	80 81       	ld	r24, Z
 8a6:	80 32       	cpi	r24, 0x20	; 32
 8a8:	09 f0       	breq	.+2      	; 0x8ac <uart_getchar+0x104>
 8aa:	52 c0       	rjmp	.+164    	; 0x950 <__stack+0x51>
 8ac:	a7 cf       	rjmp	.-178    	; 0x7fc <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 8ae:	8a e7       	ldi	r24, 0x7A	; 122
 8b0:	88 16       	cp	r8, r24
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	98 06       	cpc	r9, r24
 8b6:	09 f0       	breq	.+2      	; 0x8ba <uart_getchar+0x112>
 8b8:	98 f5       	brcc	.+102    	; 0x920 <__stack+0x21>
 8ba:	a0 cf       	rjmp	.-192    	; 0x7fc <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 8bc:	9a e7       	ldi	r25, 0x7A	; 122
 8be:	89 16       	cp	r8, r25
 8c0:	91 e0       	ldi	r25, 0x01	; 1
 8c2:	99 06       	cpc	r9, r25
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <uart_getchar+0x120>
 8c6:	08 f4       	brcc	.+2      	; 0x8ca <uart_getchar+0x122>
 8c8:	99 cf       	rjmp	.-206    	; 0x7fc <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 8ca:	b8 01       	movw	r22, r16
 8cc:	88 e0       	ldi	r24, 0x08	; 8
 8ce:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		uart_putchar(' ', stream);
 8d2:	b8 01       	movw	r22, r16
 8d4:	80 e2       	ldi	r24, 0x20	; 32
 8d6:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		uart_putchar('\b', stream);
 8da:	b8 01       	movw	r22, r16
 8dc:	88 e0       	ldi	r24, 0x08	; 8
 8de:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		cp--;
 8e2:	e1 e0       	ldi	r30, 0x01	; 1
 8e4:	8e 1a       	sub	r8, r30
 8e6:	91 08       	sbc	r9, r1
 8e8:	89 cf       	rjmp	.-238    	; 0x7fc <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 8ea:	b8 01       	movw	r22, r16
 8ec:	8d e0       	ldi	r24, 0x0D	; 13
 8ee:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 8f2:	fa e7       	ldi	r31, 0x7A	; 122
 8f4:	8f 16       	cp	r8, r31
 8f6:	f1 e0       	ldi	r31, 0x01	; 1
 8f8:	9f 06       	cpc	r9, r31
 8fa:	09 f0       	breq	.+2      	; 0x8fe <uart_getchar+0x156>
 8fc:	08 f4       	brcc	.+2      	; 0x900 <__stack+0x1>
 8fe:	7e cf       	rjmp	.-260    	; 0x7fc <uart_getchar+0x54>
 900:	0f 2e       	mov	r0, r31
 902:	fa e7       	ldi	r31, 0x7A	; 122
 904:	ef 2e       	mov	r14, r31
 906:	f1 e0       	ldi	r31, 0x01	; 1
 908:	ff 2e       	mov	r15, r31
 90a:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 90c:	b8 01       	movw	r22, r16
 90e:	f7 01       	movw	r30, r14
 910:	81 91       	ld	r24, Z+
 912:	7f 01       	movw	r14, r30
 914:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 918:	8e 14       	cp	r8, r14
 91a:	9f 04       	cpc	r9, r15
 91c:	b9 f7       	brne	.-18     	; 0x90c <__stack+0xd>
 91e:	6e cf       	rjmp	.-292    	; 0x7fc <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 920:	b8 01       	movw	r22, r16
 922:	88 e0       	ldi	r24, 0x08	; 8
 924:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		uart_putchar(' ', stream);
 928:	b8 01       	movw	r22, r16
 92a:	80 e2       	ldi	r24, 0x20	; 32
 92c:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		uart_putchar('\b', stream);
 930:	b8 01       	movw	r22, r16
 932:	88 e0       	ldi	r24, 0x08	; 8
 934:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		cp--;
 938:	f1 e0       	ldi	r31, 0x01	; 1
 93a:	8f 1a       	sub	r8, r31
 93c:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 93e:	8a e7       	ldi	r24, 0x7A	; 122
 940:	88 16       	cp	r8, r24
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	98 06       	cpc	r9, r24
 946:	61 f7       	brne	.-40     	; 0x920 <__stack+0x21>
 948:	f3 01       	movw	r30, r6
 94a:	31 96       	adiw	r30, 0x01	; 1
 94c:	4f 01       	movw	r8, r30
 94e:	56 cf       	rjmp	.-340    	; 0x7fc <uart_getchar+0x54>
 950:	74 01       	movw	r14, r8
 952:	f1 e0       	ldi	r31, 0x01	; 1
 954:	ef 1a       	sub	r14, r31
 956:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 958:	b8 01       	movw	r22, r16
 95a:	88 e0       	ldi	r24, 0x08	; 8
 95c:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		uart_putchar(' ', stream);
 960:	b8 01       	movw	r22, r16
 962:	80 e2       	ldi	r24, 0x20	; 32
 964:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		uart_putchar('\b', stream);
 968:	b8 01       	movw	r22, r16
 96a:	88 e0       	ldi	r24, 0x08	; 8
 96c:	0e 94 b3 03 	call	0x766	; 0x766 <uart_putchar>
		cp--;
 970:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 972:	ea 14       	cp	r14, r10
 974:	fb 04       	cpc	r15, r11
 976:	09 f4       	brne	.+2      	; 0x97a <__stack+0x7b>
 978:	41 cf       	rjmp	.-382    	; 0x7fc <uart_getchar+0x54>
 97a:	f7 01       	movw	r30, r14
 97c:	82 91       	ld	r24, -Z
 97e:	7f 01       	movw	r14, r30
 980:	80 32       	cpi	r24, 0x20	; 32
 982:	51 f7       	brne	.-44     	; 0x958 <__stack+0x59>
 984:	3b cf       	rjmp	.-394    	; 0x7fc <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 986:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <rxp.1828>
 98a:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <rxp.1828+0x1>
 98e:	cf 01       	movw	r24, r30
 990:	01 96       	adiw	r24, 0x01	; 1
 992:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <rxp.1828+0x1>
 996:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <rxp.1828>
 99a:	80 81       	ld	r24, Z
  if (c == '\n')
 99c:	8a 30       	cpi	r24, 0x0A	; 10
 99e:	21 f4       	brne	.+8      	; 0x9a8 <__stack+0xa9>
    rxp = 0;
 9a0:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <rxp.1828+0x1>
 9a4:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <rxp.1828>

  return c;
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	08 c0       	rjmp	.+16     	; 0x9bc <__stack+0xbd>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 9ac:	8e ef       	ldi	r24, 0xFE	; 254
 9ae:	9f ef       	ldi	r25, 0xFF	; 255
 9b0:	05 c0       	rjmp	.+10     	; 0x9bc <__stack+0xbd>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 9b2:	8f ef       	ldi	r24, 0xFF	; 255
 9b4:	9f ef       	ldi	r25, 0xFF	; 255
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <__stack+0xbd>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 9b8:	8f ef       	ldi	r24, 0xFF	; 255
 9ba:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	df 90       	pop	r13
 9ca:	cf 90       	pop	r12
 9cc:	bf 90       	pop	r11
 9ce:	af 90       	pop	r10
 9d0:	9f 90       	pop	r9
 9d2:	8f 90       	pop	r8
 9d4:	7f 90       	pop	r7
 9d6:	6f 90       	pop	r6
 9d8:	08 95       	ret

000009da <__subsf3>:
 9da:	50 58       	subi	r21, 0x80	; 128

000009dc <__addsf3>:
 9dc:	bb 27       	eor	r27, r27
 9de:	aa 27       	eor	r26, r26
 9e0:	0e 94 05 05 	call	0xa0a	; 0xa0a <__addsf3x>
 9e4:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_round>
 9e8:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_pscA>
 9ec:	38 f0       	brcs	.+14     	; 0x9fc <__addsf3+0x20>
 9ee:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_pscB>
 9f2:	20 f0       	brcs	.+8      	; 0x9fc <__addsf3+0x20>
 9f4:	39 f4       	brne	.+14     	; 0xa04 <__addsf3+0x28>
 9f6:	9f 3f       	cpi	r25, 0xFF	; 255
 9f8:	19 f4       	brne	.+6      	; 0xa00 <__addsf3+0x24>
 9fa:	26 f4       	brtc	.+8      	; 0xa04 <__addsf3+0x28>
 9fc:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__fp_nan>
 a00:	0e f4       	brtc	.+2      	; 0xa04 <__addsf3+0x28>
 a02:	e0 95       	com	r30
 a04:	e7 fb       	bst	r30, 7
 a06:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_inf>

00000a0a <__addsf3x>:
 a0a:	e9 2f       	mov	r30, r25
 a0c:	0e 94 67 06 	call	0xcce	; 0xcce <__fp_split3>
 a10:	58 f3       	brcs	.-42     	; 0x9e8 <__addsf3+0xc>
 a12:	ba 17       	cp	r27, r26
 a14:	62 07       	cpc	r22, r18
 a16:	73 07       	cpc	r23, r19
 a18:	84 07       	cpc	r24, r20
 a1a:	95 07       	cpc	r25, r21
 a1c:	20 f0       	brcs	.+8      	; 0xa26 <__addsf3x+0x1c>
 a1e:	79 f4       	brne	.+30     	; 0xa3e <__addsf3x+0x34>
 a20:	a6 f5       	brtc	.+104    	; 0xa8a <__addsf3x+0x80>
 a22:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_zero>
 a26:	0e f4       	brtc	.+2      	; 0xa2a <__addsf3x+0x20>
 a28:	e0 95       	com	r30
 a2a:	0b 2e       	mov	r0, r27
 a2c:	ba 2f       	mov	r27, r26
 a2e:	a0 2d       	mov	r26, r0
 a30:	0b 01       	movw	r0, r22
 a32:	b9 01       	movw	r22, r18
 a34:	90 01       	movw	r18, r0
 a36:	0c 01       	movw	r0, r24
 a38:	ca 01       	movw	r24, r20
 a3a:	a0 01       	movw	r20, r0
 a3c:	11 24       	eor	r1, r1
 a3e:	ff 27       	eor	r31, r31
 a40:	59 1b       	sub	r21, r25
 a42:	99 f0       	breq	.+38     	; 0xa6a <__addsf3x+0x60>
 a44:	59 3f       	cpi	r21, 0xF9	; 249
 a46:	50 f4       	brcc	.+20     	; 0xa5c <__addsf3x+0x52>
 a48:	50 3e       	cpi	r21, 0xE0	; 224
 a4a:	68 f1       	brcs	.+90     	; 0xaa6 <__addsf3x+0x9c>
 a4c:	1a 16       	cp	r1, r26
 a4e:	f0 40       	sbci	r31, 0x00	; 0
 a50:	a2 2f       	mov	r26, r18
 a52:	23 2f       	mov	r18, r19
 a54:	34 2f       	mov	r19, r20
 a56:	44 27       	eor	r20, r20
 a58:	58 5f       	subi	r21, 0xF8	; 248
 a5a:	f3 cf       	rjmp	.-26     	; 0xa42 <__addsf3x+0x38>
 a5c:	46 95       	lsr	r20
 a5e:	37 95       	ror	r19
 a60:	27 95       	ror	r18
 a62:	a7 95       	ror	r26
 a64:	f0 40       	sbci	r31, 0x00	; 0
 a66:	53 95       	inc	r21
 a68:	c9 f7       	brne	.-14     	; 0xa5c <__addsf3x+0x52>
 a6a:	7e f4       	brtc	.+30     	; 0xa8a <__addsf3x+0x80>
 a6c:	1f 16       	cp	r1, r31
 a6e:	ba 0b       	sbc	r27, r26
 a70:	62 0b       	sbc	r22, r18
 a72:	73 0b       	sbc	r23, r19
 a74:	84 0b       	sbc	r24, r20
 a76:	ba f0       	brmi	.+46     	; 0xaa6 <__addsf3x+0x9c>
 a78:	91 50       	subi	r25, 0x01	; 1
 a7a:	a1 f0       	breq	.+40     	; 0xaa4 <__addsf3x+0x9a>
 a7c:	ff 0f       	add	r31, r31
 a7e:	bb 1f       	adc	r27, r27
 a80:	66 1f       	adc	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	c2 f7       	brpl	.-16     	; 0xa78 <__addsf3x+0x6e>
 a88:	0e c0       	rjmp	.+28     	; 0xaa6 <__addsf3x+0x9c>
 a8a:	ba 0f       	add	r27, r26
 a8c:	62 1f       	adc	r22, r18
 a8e:	73 1f       	adc	r23, r19
 a90:	84 1f       	adc	r24, r20
 a92:	48 f4       	brcc	.+18     	; 0xaa6 <__addsf3x+0x9c>
 a94:	87 95       	ror	r24
 a96:	77 95       	ror	r23
 a98:	67 95       	ror	r22
 a9a:	b7 95       	ror	r27
 a9c:	f7 95       	ror	r31
 a9e:	9e 3f       	cpi	r25, 0xFE	; 254
 aa0:	08 f0       	brcs	.+2      	; 0xaa4 <__addsf3x+0x9a>
 aa2:	b0 cf       	rjmp	.-160    	; 0xa04 <__addsf3+0x28>
 aa4:	93 95       	inc	r25
 aa6:	88 0f       	add	r24, r24
 aa8:	08 f0       	brcs	.+2      	; 0xaac <__addsf3x+0xa2>
 aaa:	99 27       	eor	r25, r25
 aac:	ee 0f       	add	r30, r30
 aae:	97 95       	ror	r25
 ab0:	87 95       	ror	r24
 ab2:	08 95       	ret

00000ab4 <__divsf3>:
 ab4:	0e 94 6e 05 	call	0xadc	; 0xadc <__divsf3x>
 ab8:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_round>
 abc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_pscB>
 ac0:	58 f0       	brcs	.+22     	; 0xad8 <__divsf3+0x24>
 ac2:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_pscA>
 ac6:	40 f0       	brcs	.+16     	; 0xad8 <__divsf3+0x24>
 ac8:	29 f4       	brne	.+10     	; 0xad4 <__divsf3+0x20>
 aca:	5f 3f       	cpi	r21, 0xFF	; 255
 acc:	29 f0       	breq	.+10     	; 0xad8 <__divsf3+0x24>
 ace:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_inf>
 ad2:	51 11       	cpse	r21, r1
 ad4:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_szero>
 ad8:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__fp_nan>

00000adc <__divsf3x>:
 adc:	0e 94 67 06 	call	0xcce	; 0xcce <__fp_split3>
 ae0:	68 f3       	brcs	.-38     	; 0xabc <__divsf3+0x8>

00000ae2 <__divsf3_pse>:
 ae2:	99 23       	and	r25, r25
 ae4:	b1 f3       	breq	.-20     	; 0xad2 <__divsf3+0x1e>
 ae6:	55 23       	and	r21, r21
 ae8:	91 f3       	breq	.-28     	; 0xace <__divsf3+0x1a>
 aea:	95 1b       	sub	r25, r21
 aec:	55 0b       	sbc	r21, r21
 aee:	bb 27       	eor	r27, r27
 af0:	aa 27       	eor	r26, r26
 af2:	62 17       	cp	r22, r18
 af4:	73 07       	cpc	r23, r19
 af6:	84 07       	cpc	r24, r20
 af8:	38 f0       	brcs	.+14     	; 0xb08 <__divsf3_pse+0x26>
 afa:	9f 5f       	subi	r25, 0xFF	; 255
 afc:	5f 4f       	sbci	r21, 0xFF	; 255
 afe:	22 0f       	add	r18, r18
 b00:	33 1f       	adc	r19, r19
 b02:	44 1f       	adc	r20, r20
 b04:	aa 1f       	adc	r26, r26
 b06:	a9 f3       	breq	.-22     	; 0xaf2 <__divsf3_pse+0x10>
 b08:	35 d0       	rcall	.+106    	; 0xb74 <__divsf3_pse+0x92>
 b0a:	0e 2e       	mov	r0, r30
 b0c:	3a f0       	brmi	.+14     	; 0xb1c <__divsf3_pse+0x3a>
 b0e:	e0 e8       	ldi	r30, 0x80	; 128
 b10:	32 d0       	rcall	.+100    	; 0xb76 <__divsf3_pse+0x94>
 b12:	91 50       	subi	r25, 0x01	; 1
 b14:	50 40       	sbci	r21, 0x00	; 0
 b16:	e6 95       	lsr	r30
 b18:	00 1c       	adc	r0, r0
 b1a:	ca f7       	brpl	.-14     	; 0xb0e <__divsf3_pse+0x2c>
 b1c:	2b d0       	rcall	.+86     	; 0xb74 <__divsf3_pse+0x92>
 b1e:	fe 2f       	mov	r31, r30
 b20:	29 d0       	rcall	.+82     	; 0xb74 <__divsf3_pse+0x92>
 b22:	66 0f       	add	r22, r22
 b24:	77 1f       	adc	r23, r23
 b26:	88 1f       	adc	r24, r24
 b28:	bb 1f       	adc	r27, r27
 b2a:	26 17       	cp	r18, r22
 b2c:	37 07       	cpc	r19, r23
 b2e:	48 07       	cpc	r20, r24
 b30:	ab 07       	cpc	r26, r27
 b32:	b0 e8       	ldi	r27, 0x80	; 128
 b34:	09 f0       	breq	.+2      	; 0xb38 <__divsf3_pse+0x56>
 b36:	bb 0b       	sbc	r27, r27
 b38:	80 2d       	mov	r24, r0
 b3a:	bf 01       	movw	r22, r30
 b3c:	ff 27       	eor	r31, r31
 b3e:	93 58       	subi	r25, 0x83	; 131
 b40:	5f 4f       	sbci	r21, 0xFF	; 255
 b42:	3a f0       	brmi	.+14     	; 0xb52 <__divsf3_pse+0x70>
 b44:	9e 3f       	cpi	r25, 0xFE	; 254
 b46:	51 05       	cpc	r21, r1
 b48:	78 f0       	brcs	.+30     	; 0xb68 <__divsf3_pse+0x86>
 b4a:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_inf>
 b4e:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_szero>
 b52:	5f 3f       	cpi	r21, 0xFF	; 255
 b54:	e4 f3       	brlt	.-8      	; 0xb4e <__divsf3_pse+0x6c>
 b56:	98 3e       	cpi	r25, 0xE8	; 232
 b58:	d4 f3       	brlt	.-12     	; 0xb4e <__divsf3_pse+0x6c>
 b5a:	86 95       	lsr	r24
 b5c:	77 95       	ror	r23
 b5e:	67 95       	ror	r22
 b60:	b7 95       	ror	r27
 b62:	f7 95       	ror	r31
 b64:	9f 5f       	subi	r25, 0xFF	; 255
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__divsf3_pse+0x78>
 b68:	88 0f       	add	r24, r24
 b6a:	91 1d       	adc	r25, r1
 b6c:	96 95       	lsr	r25
 b6e:	87 95       	ror	r24
 b70:	97 f9       	bld	r25, 7
 b72:	08 95       	ret
 b74:	e1 e0       	ldi	r30, 0x01	; 1
 b76:	66 0f       	add	r22, r22
 b78:	77 1f       	adc	r23, r23
 b7a:	88 1f       	adc	r24, r24
 b7c:	bb 1f       	adc	r27, r27
 b7e:	62 17       	cp	r22, r18
 b80:	73 07       	cpc	r23, r19
 b82:	84 07       	cpc	r24, r20
 b84:	ba 07       	cpc	r27, r26
 b86:	20 f0       	brcs	.+8      	; 0xb90 <__divsf3_pse+0xae>
 b88:	62 1b       	sub	r22, r18
 b8a:	73 0b       	sbc	r23, r19
 b8c:	84 0b       	sbc	r24, r20
 b8e:	ba 0b       	sbc	r27, r26
 b90:	ee 1f       	adc	r30, r30
 b92:	88 f7       	brcc	.-30     	; 0xb76 <__divsf3_pse+0x94>
 b94:	e0 95       	com	r30
 b96:	08 95       	ret

00000b98 <__fixsfsi>:
 b98:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fixunssfsi>
 b9c:	68 94       	set
 b9e:	b1 11       	cpse	r27, r1
 ba0:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_szero>
 ba4:	08 95       	ret

00000ba6 <__fixunssfsi>:
 ba6:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_splitA>
 baa:	88 f0       	brcs	.+34     	; 0xbce <__fixunssfsi+0x28>
 bac:	9f 57       	subi	r25, 0x7F	; 127
 bae:	98 f0       	brcs	.+38     	; 0xbd6 <__fixunssfsi+0x30>
 bb0:	b9 2f       	mov	r27, r25
 bb2:	99 27       	eor	r25, r25
 bb4:	b7 51       	subi	r27, 0x17	; 23
 bb6:	b0 f0       	brcs	.+44     	; 0xbe4 <__fixunssfsi+0x3e>
 bb8:	e1 f0       	breq	.+56     	; 0xbf2 <__fixunssfsi+0x4c>
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	99 1f       	adc	r25, r25
 bc2:	1a f0       	brmi	.+6      	; 0xbca <__fixunssfsi+0x24>
 bc4:	ba 95       	dec	r27
 bc6:	c9 f7       	brne	.-14     	; 0xbba <__fixunssfsi+0x14>
 bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <__fixunssfsi+0x4c>
 bca:	b1 30       	cpi	r27, 0x01	; 1
 bcc:	91 f0       	breq	.+36     	; 0xbf2 <__fixunssfsi+0x4c>
 bce:	0e 94 89 06 	call	0xd12	; 0xd12 <__fp_zero>
 bd2:	b1 e0       	ldi	r27, 0x01	; 1
 bd4:	08 95       	ret
 bd6:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_zero>
 bda:	67 2f       	mov	r22, r23
 bdc:	78 2f       	mov	r23, r24
 bde:	88 27       	eor	r24, r24
 be0:	b8 5f       	subi	r27, 0xF8	; 248
 be2:	39 f0       	breq	.+14     	; 0xbf2 <__fixunssfsi+0x4c>
 be4:	b9 3f       	cpi	r27, 0xF9	; 249
 be6:	cc f3       	brlt	.-14     	; 0xbda <__fixunssfsi+0x34>
 be8:	86 95       	lsr	r24
 bea:	77 95       	ror	r23
 bec:	67 95       	ror	r22
 bee:	b3 95       	inc	r27
 bf0:	d9 f7       	brne	.-10     	; 0xbe8 <__fixunssfsi+0x42>
 bf2:	3e f4       	brtc	.+14     	; 0xc02 <__fixunssfsi+0x5c>
 bf4:	90 95       	com	r25
 bf6:	80 95       	com	r24
 bf8:	70 95       	com	r23
 bfa:	61 95       	neg	r22
 bfc:	7f 4f       	sbci	r23, 0xFF	; 255
 bfe:	8f 4f       	sbci	r24, 0xFF	; 255
 c00:	9f 4f       	sbci	r25, 0xFF	; 255
 c02:	08 95       	ret

00000c04 <__floatunsisf>:
 c04:	e8 94       	clt
 c06:	09 c0       	rjmp	.+18     	; 0xc1a <__floatsisf+0x12>

00000c08 <__floatsisf>:
 c08:	97 fb       	bst	r25, 7
 c0a:	3e f4       	brtc	.+14     	; 0xc1a <__floatsisf+0x12>
 c0c:	90 95       	com	r25
 c0e:	80 95       	com	r24
 c10:	70 95       	com	r23
 c12:	61 95       	neg	r22
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	99 23       	and	r25, r25
 c1c:	a9 f0       	breq	.+42     	; 0xc48 <__floatsisf+0x40>
 c1e:	f9 2f       	mov	r31, r25
 c20:	96 e9       	ldi	r25, 0x96	; 150
 c22:	bb 27       	eor	r27, r27
 c24:	93 95       	inc	r25
 c26:	f6 95       	lsr	r31
 c28:	87 95       	ror	r24
 c2a:	77 95       	ror	r23
 c2c:	67 95       	ror	r22
 c2e:	b7 95       	ror	r27
 c30:	f1 11       	cpse	r31, r1
 c32:	f8 cf       	rjmp	.-16     	; 0xc24 <__floatsisf+0x1c>
 c34:	fa f4       	brpl	.+62     	; 0xc74 <__floatsisf+0x6c>
 c36:	bb 0f       	add	r27, r27
 c38:	11 f4       	brne	.+4      	; 0xc3e <__floatsisf+0x36>
 c3a:	60 ff       	sbrs	r22, 0
 c3c:	1b c0       	rjmp	.+54     	; 0xc74 <__floatsisf+0x6c>
 c3e:	6f 5f       	subi	r22, 0xFF	; 255
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	16 c0       	rjmp	.+44     	; 0xc74 <__floatsisf+0x6c>
 c48:	88 23       	and	r24, r24
 c4a:	11 f0       	breq	.+4      	; 0xc50 <__floatsisf+0x48>
 c4c:	96 e9       	ldi	r25, 0x96	; 150
 c4e:	11 c0       	rjmp	.+34     	; 0xc72 <__floatsisf+0x6a>
 c50:	77 23       	and	r23, r23
 c52:	21 f0       	breq	.+8      	; 0xc5c <__floatsisf+0x54>
 c54:	9e e8       	ldi	r25, 0x8E	; 142
 c56:	87 2f       	mov	r24, r23
 c58:	76 2f       	mov	r23, r22
 c5a:	05 c0       	rjmp	.+10     	; 0xc66 <__floatsisf+0x5e>
 c5c:	66 23       	and	r22, r22
 c5e:	71 f0       	breq	.+28     	; 0xc7c <__floatsisf+0x74>
 c60:	96 e8       	ldi	r25, 0x86	; 134
 c62:	86 2f       	mov	r24, r22
 c64:	70 e0       	ldi	r23, 0x00	; 0
 c66:	60 e0       	ldi	r22, 0x00	; 0
 c68:	2a f0       	brmi	.+10     	; 0xc74 <__floatsisf+0x6c>
 c6a:	9a 95       	dec	r25
 c6c:	66 0f       	add	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	88 1f       	adc	r24, r24
 c72:	da f7       	brpl	.-10     	; 0xc6a <__floatsisf+0x62>
 c74:	88 0f       	add	r24, r24
 c76:	96 95       	lsr	r25
 c78:	87 95       	ror	r24
 c7a:	97 f9       	bld	r25, 7
 c7c:	08 95       	ret

00000c7e <__fp_inf>:
 c7e:	97 f9       	bld	r25, 7
 c80:	9f 67       	ori	r25, 0x7F	; 127
 c82:	80 e8       	ldi	r24, 0x80	; 128
 c84:	70 e0       	ldi	r23, 0x00	; 0
 c86:	60 e0       	ldi	r22, 0x00	; 0
 c88:	08 95       	ret

00000c8a <__fp_nan>:
 c8a:	9f ef       	ldi	r25, 0xFF	; 255
 c8c:	80 ec       	ldi	r24, 0xC0	; 192
 c8e:	08 95       	ret

00000c90 <__fp_pscA>:
 c90:	00 24       	eor	r0, r0
 c92:	0a 94       	dec	r0
 c94:	16 16       	cp	r1, r22
 c96:	17 06       	cpc	r1, r23
 c98:	18 06       	cpc	r1, r24
 c9a:	09 06       	cpc	r0, r25
 c9c:	08 95       	ret

00000c9e <__fp_pscB>:
 c9e:	00 24       	eor	r0, r0
 ca0:	0a 94       	dec	r0
 ca2:	12 16       	cp	r1, r18
 ca4:	13 06       	cpc	r1, r19
 ca6:	14 06       	cpc	r1, r20
 ca8:	05 06       	cpc	r0, r21
 caa:	08 95       	ret

00000cac <__fp_round>:
 cac:	09 2e       	mov	r0, r25
 cae:	03 94       	inc	r0
 cb0:	00 0c       	add	r0, r0
 cb2:	11 f4       	brne	.+4      	; 0xcb8 <__fp_round+0xc>
 cb4:	88 23       	and	r24, r24
 cb6:	52 f0       	brmi	.+20     	; 0xccc <__fp_round+0x20>
 cb8:	bb 0f       	add	r27, r27
 cba:	40 f4       	brcc	.+16     	; 0xccc <__fp_round+0x20>
 cbc:	bf 2b       	or	r27, r31
 cbe:	11 f4       	brne	.+4      	; 0xcc4 <__fp_round+0x18>
 cc0:	60 ff       	sbrs	r22, 0
 cc2:	04 c0       	rjmp	.+8      	; 0xccc <__fp_round+0x20>
 cc4:	6f 5f       	subi	r22, 0xFF	; 255
 cc6:	7f 4f       	sbci	r23, 0xFF	; 255
 cc8:	8f 4f       	sbci	r24, 0xFF	; 255
 cca:	9f 4f       	sbci	r25, 0xFF	; 255
 ccc:	08 95       	ret

00000cce <__fp_split3>:
 cce:	57 fd       	sbrc	r21, 7
 cd0:	90 58       	subi	r25, 0x80	; 128
 cd2:	44 0f       	add	r20, r20
 cd4:	55 1f       	adc	r21, r21
 cd6:	59 f0       	breq	.+22     	; 0xcee <__fp_splitA+0x10>
 cd8:	5f 3f       	cpi	r21, 0xFF	; 255
 cda:	71 f0       	breq	.+28     	; 0xcf8 <__fp_splitA+0x1a>
 cdc:	47 95       	ror	r20

00000cde <__fp_splitA>:
 cde:	88 0f       	add	r24, r24
 ce0:	97 fb       	bst	r25, 7
 ce2:	99 1f       	adc	r25, r25
 ce4:	61 f0       	breq	.+24     	; 0xcfe <__fp_splitA+0x20>
 ce6:	9f 3f       	cpi	r25, 0xFF	; 255
 ce8:	79 f0       	breq	.+30     	; 0xd08 <__fp_splitA+0x2a>
 cea:	87 95       	ror	r24
 cec:	08 95       	ret
 cee:	12 16       	cp	r1, r18
 cf0:	13 06       	cpc	r1, r19
 cf2:	14 06       	cpc	r1, r20
 cf4:	55 1f       	adc	r21, r21
 cf6:	f2 cf       	rjmp	.-28     	; 0xcdc <__fp_split3+0xe>
 cf8:	46 95       	lsr	r20
 cfa:	f1 df       	rcall	.-30     	; 0xcde <__fp_splitA>
 cfc:	08 c0       	rjmp	.+16     	; 0xd0e <__fp_splitA+0x30>
 cfe:	16 16       	cp	r1, r22
 d00:	17 06       	cpc	r1, r23
 d02:	18 06       	cpc	r1, r24
 d04:	99 1f       	adc	r25, r25
 d06:	f1 cf       	rjmp	.-30     	; 0xcea <__fp_splitA+0xc>
 d08:	86 95       	lsr	r24
 d0a:	71 05       	cpc	r23, r1
 d0c:	61 05       	cpc	r22, r1
 d0e:	08 94       	sec
 d10:	08 95       	ret

00000d12 <__fp_zero>:
 d12:	e8 94       	clt

00000d14 <__fp_szero>:
 d14:	bb 27       	eor	r27, r27
 d16:	66 27       	eor	r22, r22
 d18:	77 27       	eor	r23, r23
 d1a:	cb 01       	movw	r24, r22
 d1c:	97 f9       	bld	r25, 7
 d1e:	08 95       	ret

00000d20 <__mulsf3>:
 d20:	0e 94 a3 06 	call	0xd46	; 0xd46 <__mulsf3x>
 d24:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_round>
 d28:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_pscA>
 d2c:	38 f0       	brcs	.+14     	; 0xd3c <__mulsf3+0x1c>
 d2e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_pscB>
 d32:	20 f0       	brcs	.+8      	; 0xd3c <__mulsf3+0x1c>
 d34:	95 23       	and	r25, r21
 d36:	11 f0       	breq	.+4      	; 0xd3c <__mulsf3+0x1c>
 d38:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_inf>
 d3c:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__fp_nan>
 d40:	11 24       	eor	r1, r1
 d42:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_szero>

00000d46 <__mulsf3x>:
 d46:	0e 94 67 06 	call	0xcce	; 0xcce <__fp_split3>
 d4a:	70 f3       	brcs	.-36     	; 0xd28 <__mulsf3+0x8>

00000d4c <__mulsf3_pse>:
 d4c:	95 9f       	mul	r25, r21
 d4e:	c1 f3       	breq	.-16     	; 0xd40 <__mulsf3+0x20>
 d50:	95 0f       	add	r25, r21
 d52:	50 e0       	ldi	r21, 0x00	; 0
 d54:	55 1f       	adc	r21, r21
 d56:	62 9f       	mul	r22, r18
 d58:	f0 01       	movw	r30, r0
 d5a:	72 9f       	mul	r23, r18
 d5c:	bb 27       	eor	r27, r27
 d5e:	f0 0d       	add	r31, r0
 d60:	b1 1d       	adc	r27, r1
 d62:	63 9f       	mul	r22, r19
 d64:	aa 27       	eor	r26, r26
 d66:	f0 0d       	add	r31, r0
 d68:	b1 1d       	adc	r27, r1
 d6a:	aa 1f       	adc	r26, r26
 d6c:	64 9f       	mul	r22, r20
 d6e:	66 27       	eor	r22, r22
 d70:	b0 0d       	add	r27, r0
 d72:	a1 1d       	adc	r26, r1
 d74:	66 1f       	adc	r22, r22
 d76:	82 9f       	mul	r24, r18
 d78:	22 27       	eor	r18, r18
 d7a:	b0 0d       	add	r27, r0
 d7c:	a1 1d       	adc	r26, r1
 d7e:	62 1f       	adc	r22, r18
 d80:	73 9f       	mul	r23, r19
 d82:	b0 0d       	add	r27, r0
 d84:	a1 1d       	adc	r26, r1
 d86:	62 1f       	adc	r22, r18
 d88:	83 9f       	mul	r24, r19
 d8a:	a0 0d       	add	r26, r0
 d8c:	61 1d       	adc	r22, r1
 d8e:	22 1f       	adc	r18, r18
 d90:	74 9f       	mul	r23, r20
 d92:	33 27       	eor	r19, r19
 d94:	a0 0d       	add	r26, r0
 d96:	61 1d       	adc	r22, r1
 d98:	23 1f       	adc	r18, r19
 d9a:	84 9f       	mul	r24, r20
 d9c:	60 0d       	add	r22, r0
 d9e:	21 1d       	adc	r18, r1
 da0:	82 2f       	mov	r24, r18
 da2:	76 2f       	mov	r23, r22
 da4:	6a 2f       	mov	r22, r26
 da6:	11 24       	eor	r1, r1
 da8:	9f 57       	subi	r25, 0x7F	; 127
 daa:	50 40       	sbci	r21, 0x00	; 0
 dac:	9a f0       	brmi	.+38     	; 0xdd4 <__mulsf3_pse+0x88>
 dae:	f1 f0       	breq	.+60     	; 0xdec <__mulsf3_pse+0xa0>
 db0:	88 23       	and	r24, r24
 db2:	4a f0       	brmi	.+18     	; 0xdc6 <__mulsf3_pse+0x7a>
 db4:	ee 0f       	add	r30, r30
 db6:	ff 1f       	adc	r31, r31
 db8:	bb 1f       	adc	r27, r27
 dba:	66 1f       	adc	r22, r22
 dbc:	77 1f       	adc	r23, r23
 dbe:	88 1f       	adc	r24, r24
 dc0:	91 50       	subi	r25, 0x01	; 1
 dc2:	50 40       	sbci	r21, 0x00	; 0
 dc4:	a9 f7       	brne	.-22     	; 0xdb0 <__mulsf3_pse+0x64>
 dc6:	9e 3f       	cpi	r25, 0xFE	; 254
 dc8:	51 05       	cpc	r21, r1
 dca:	80 f0       	brcs	.+32     	; 0xdec <__mulsf3_pse+0xa0>
 dcc:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_inf>
 dd0:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_szero>
 dd4:	5f 3f       	cpi	r21, 0xFF	; 255
 dd6:	e4 f3       	brlt	.-8      	; 0xdd0 <__mulsf3_pse+0x84>
 dd8:	98 3e       	cpi	r25, 0xE8	; 232
 dda:	d4 f3       	brlt	.-12     	; 0xdd0 <__mulsf3_pse+0x84>
 ddc:	86 95       	lsr	r24
 dde:	77 95       	ror	r23
 de0:	67 95       	ror	r22
 de2:	b7 95       	ror	r27
 de4:	f7 95       	ror	r31
 de6:	e7 95       	ror	r30
 de8:	9f 5f       	subi	r25, 0xFF	; 255
 dea:	c1 f7       	brne	.-16     	; 0xddc <__mulsf3_pse+0x90>
 dec:	fe 2b       	or	r31, r30
 dee:	88 0f       	add	r24, r24
 df0:	91 1d       	adc	r25, r1
 df2:	96 95       	lsr	r25
 df4:	87 95       	ror	r24
 df6:	97 f9       	bld	r25, 7
 df8:	08 95       	ret

00000dfa <__divmodhi4>:
 dfa:	97 fb       	bst	r25, 7
 dfc:	07 2e       	mov	r0, r23
 dfe:	16 f4       	brtc	.+4      	; 0xe04 <__divmodhi4+0xa>
 e00:	00 94       	com	r0
 e02:	07 d0       	rcall	.+14     	; 0xe12 <__divmodhi4_neg1>
 e04:	77 fd       	sbrc	r23, 7
 e06:	09 d0       	rcall	.+18     	; 0xe1a <__divmodhi4_neg2>
 e08:	0e 94 11 07 	call	0xe22	; 0xe22 <__udivmodhi4>
 e0c:	07 fc       	sbrc	r0, 7
 e0e:	05 d0       	rcall	.+10     	; 0xe1a <__divmodhi4_neg2>
 e10:	3e f4       	brtc	.+14     	; 0xe20 <__divmodhi4_exit>

00000e12 <__divmodhi4_neg1>:
 e12:	90 95       	com	r25
 e14:	81 95       	neg	r24
 e16:	9f 4f       	sbci	r25, 0xFF	; 255
 e18:	08 95       	ret

00000e1a <__divmodhi4_neg2>:
 e1a:	70 95       	com	r23
 e1c:	61 95       	neg	r22
 e1e:	7f 4f       	sbci	r23, 0xFF	; 255

00000e20 <__divmodhi4_exit>:
 e20:	08 95       	ret

00000e22 <__udivmodhi4>:
 e22:	aa 1b       	sub	r26, r26
 e24:	bb 1b       	sub	r27, r27
 e26:	51 e1       	ldi	r21, 0x11	; 17
 e28:	07 c0       	rjmp	.+14     	; 0xe38 <__udivmodhi4_ep>

00000e2a <__udivmodhi4_loop>:
 e2a:	aa 1f       	adc	r26, r26
 e2c:	bb 1f       	adc	r27, r27
 e2e:	a6 17       	cp	r26, r22
 e30:	b7 07       	cpc	r27, r23
 e32:	10 f0       	brcs	.+4      	; 0xe38 <__udivmodhi4_ep>
 e34:	a6 1b       	sub	r26, r22
 e36:	b7 0b       	sbc	r27, r23

00000e38 <__udivmodhi4_ep>:
 e38:	88 1f       	adc	r24, r24
 e3a:	99 1f       	adc	r25, r25
 e3c:	5a 95       	dec	r21
 e3e:	a9 f7       	brne	.-22     	; 0xe2a <__udivmodhi4_loop>
 e40:	80 95       	com	r24
 e42:	90 95       	com	r25
 e44:	bc 01       	movw	r22, r24
 e46:	cd 01       	movw	r24, r26
 e48:	08 95       	ret

00000e4a <fwrite>:
 e4a:	a0 e0       	ldi	r26, 0x00	; 0
 e4c:	b0 e0       	ldi	r27, 0x00	; 0
 e4e:	eb e2       	ldi	r30, 0x2B	; 43
 e50:	f7 e0       	ldi	r31, 0x07	; 7
 e52:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__prologue_saves__+0xc>
 e56:	5b 01       	movw	r10, r22
 e58:	4a 01       	movw	r8, r20
 e5a:	79 01       	movw	r14, r18
 e5c:	d9 01       	movw	r26, r18
 e5e:	13 96       	adiw	r26, 0x03	; 3
 e60:	2c 91       	ld	r18, X
 e62:	21 ff       	sbrs	r18, 1
 e64:	1d c0       	rjmp	.+58     	; 0xea0 <fwrite+0x56>
 e66:	c0 e0       	ldi	r28, 0x00	; 0
 e68:	d0 e0       	ldi	r29, 0x00	; 0
 e6a:	c8 15       	cp	r28, r8
 e6c:	d9 05       	cpc	r29, r9
 e6e:	d9 f0       	breq	.+54     	; 0xea6 <fwrite+0x5c>
 e70:	8c 01       	movw	r16, r24
 e72:	6c 01       	movw	r12, r24
 e74:	ca 0c       	add	r12, r10
 e76:	db 1c       	adc	r13, r11
 e78:	c8 01       	movw	r24, r16
 e7a:	0c 15       	cp	r16, r12
 e7c:	1d 05       	cpc	r17, r13
 e7e:	71 f0       	breq	.+28     	; 0xe9c <fwrite+0x52>
 e80:	0f 5f       	subi	r16, 0xFF	; 255
 e82:	1f 4f       	sbci	r17, 0xFF	; 255
 e84:	d7 01       	movw	r26, r14
 e86:	18 96       	adiw	r26, 0x08	; 8
 e88:	ed 91       	ld	r30, X+
 e8a:	fc 91       	ld	r31, X
 e8c:	19 97       	sbiw	r26, 0x09	; 9
 e8e:	b7 01       	movw	r22, r14
 e90:	dc 01       	movw	r26, r24
 e92:	8c 91       	ld	r24, X
 e94:	09 95       	icall
 e96:	89 2b       	or	r24, r25
 e98:	79 f3       	breq	.-34     	; 0xe78 <fwrite+0x2e>
 e9a:	05 c0       	rjmp	.+10     	; 0xea6 <fwrite+0x5c>
 e9c:	21 96       	adiw	r28, 0x01	; 1
 e9e:	e5 cf       	rjmp	.-54     	; 0xe6a <fwrite+0x20>
 ea0:	80 e0       	ldi	r24, 0x00	; 0
 ea2:	90 e0       	ldi	r25, 0x00	; 0
 ea4:	01 c0       	rjmp	.+2      	; 0xea8 <fwrite+0x5e>
 ea6:	ce 01       	movw	r24, r28
 ea8:	cd b7       	in	r28, 0x3d	; 61
 eaa:	de b7       	in	r29, 0x3e	; 62
 eac:	ec e0       	ldi	r30, 0x0C	; 12
 eae:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__epilogue_restores__+0xc>

00000eb2 <__prologue_saves__>:
 eb2:	2f 92       	push	r2
 eb4:	3f 92       	push	r3
 eb6:	4f 92       	push	r4
 eb8:	5f 92       	push	r5
 eba:	6f 92       	push	r6
 ebc:	7f 92       	push	r7
 ebe:	8f 92       	push	r8
 ec0:	9f 92       	push	r9
 ec2:	af 92       	push	r10
 ec4:	bf 92       	push	r11
 ec6:	cf 92       	push	r12
 ec8:	df 92       	push	r13
 eca:	ef 92       	push	r14
 ecc:	ff 92       	push	r15
 ece:	0f 93       	push	r16
 ed0:	1f 93       	push	r17
 ed2:	cf 93       	push	r28
 ed4:	df 93       	push	r29
 ed6:	cd b7       	in	r28, 0x3d	; 61
 ed8:	de b7       	in	r29, 0x3e	; 62
 eda:	ca 1b       	sub	r28, r26
 edc:	db 0b       	sbc	r29, r27
 ede:	0f b6       	in	r0, 0x3f	; 63
 ee0:	f8 94       	cli
 ee2:	de bf       	out	0x3e, r29	; 62
 ee4:	0f be       	out	0x3f, r0	; 63
 ee6:	cd bf       	out	0x3d, r28	; 61
 ee8:	09 94       	ijmp

00000eea <__epilogue_restores__>:
 eea:	2a 88       	ldd	r2, Y+18	; 0x12
 eec:	39 88       	ldd	r3, Y+17	; 0x11
 eee:	48 88       	ldd	r4, Y+16	; 0x10
 ef0:	5f 84       	ldd	r5, Y+15	; 0x0f
 ef2:	6e 84       	ldd	r6, Y+14	; 0x0e
 ef4:	7d 84       	ldd	r7, Y+13	; 0x0d
 ef6:	8c 84       	ldd	r8, Y+12	; 0x0c
 ef8:	9b 84       	ldd	r9, Y+11	; 0x0b
 efa:	aa 84       	ldd	r10, Y+10	; 0x0a
 efc:	b9 84       	ldd	r11, Y+9	; 0x09
 efe:	c8 84       	ldd	r12, Y+8	; 0x08
 f00:	df 80       	ldd	r13, Y+7	; 0x07
 f02:	ee 80       	ldd	r14, Y+6	; 0x06
 f04:	fd 80       	ldd	r15, Y+5	; 0x05
 f06:	0c 81       	ldd	r16, Y+4	; 0x04
 f08:	1b 81       	ldd	r17, Y+3	; 0x03
 f0a:	aa 81       	ldd	r26, Y+2	; 0x02
 f0c:	b9 81       	ldd	r27, Y+1	; 0x01
 f0e:	ce 0f       	add	r28, r30
 f10:	d1 1d       	adc	r29, r1
 f12:	0f b6       	in	r0, 0x3f	; 63
 f14:	f8 94       	cli
 f16:	de bf       	out	0x3e, r29	; 62
 f18:	0f be       	out	0x3f, r0	; 63
 f1a:	cd bf       	out	0x3d, r28	; 61
 f1c:	ed 01       	movw	r28, r26
 f1e:	08 95       	ret

00000f20 <_exit>:
 f20:	f8 94       	cli

00000f22 <__stop_program>:
 f22:	ff cf       	rjmp	.-2      	; 0xf22 <__stop_program>
