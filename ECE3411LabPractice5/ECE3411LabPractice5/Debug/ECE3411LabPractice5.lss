
ECE3411LabPractice5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003ce  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b34  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000933  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040d  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000539  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020e  00000000  00000000  00002435  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002643  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee ec       	ldi	r30, 0xCE	; 206
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e0       	ldi	r26, 0x02	; 2
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 30       	cpi	r26, 0x0C	; 12
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
  ea:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <toggle_LED1>:
	}
}
*/
void toggle_LED1(void)
{
	if(led1_on) //set current_led high
  f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <led1_on>
  f6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <led1_on+0x1>
  fa:	89 2b       	or	r24, r25
  fc:	31 f0       	breq	.+12     	; 0x10a <toggle_LED1+0x18>
	{
		//PORTD = 0; // Guarantees that when current_led changes, an LED won't be left on
		PORTD &= ~(1<<LED1); //set LED1 low
  fe:	58 98       	cbi	0x0b, 0	; 11
		led1_on = 0;
 100:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <led1_on+0x1>
 104:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <led1_on>
 108:	08 95       	ret
	}
	else
	{
		PORTD |= (1<<LED1); //set LED1 high
 10a:	58 9a       	sbi	0x0b, 0	; 11
		led1_on = 1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <led1_on+0x1>
 114:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <led1_on>
 118:	08 95       	ret

0000011a <toggle_LED2>:
	}
}
void toggle_LED2(void)
{
	if(led2_on) //set current_led high
 11a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <led2_on>
 11e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <led2_on+0x1>
 122:	89 2b       	or	r24, r25
 124:	31 f0       	breq	.+12     	; 0x132 <toggle_LED2+0x18>
	{
		//PORTD = 0; // Guarantees that when LED changes, an LED won't be left on
		PORTD &= ~(1<<LED2); //set LED2 low
 126:	5f 98       	cbi	0x0b, 7	; 11
		led2_on = 0;
 128:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <led2_on+0x1>
 12c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <led2_on>
 130:	08 95       	ret
	}
	else
	{
		PORTD |= (1<<LED2); //set LED2 high
 132:	5f 9a       	sbi	0x0b, 7	; 11
		led2_on = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <led2_on+0x1>
 13c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <led2_on>
 140:	08 95       	ret

00000142 <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect) // controls LED1
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	2f 93       	push	r18
 14e:	3f 93       	push	r19
 150:	4f 93       	push	r20
 152:	5f 93       	push	r21
 154:	6f 93       	push	r22
 156:	7f 93       	push	r23
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	if(pause_count==0)
 164:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pause_count>
 168:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pause_count+0x1>
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	a9 f4       	brne	.+42     	; 0x19a <__vector_14+0x58>
	{
		if(fifty_ms_count == 0)
 170:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 174:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 178:	00 97       	sbiw	r24, 0x00	; 0
 17a:	49 f4       	brne	.+18     	; 0x18e <__vector_14+0x4c>
		{
			toggle_LED1();
 17c:	0e 94 79 00 	call	0xf2	; 0xf2 <toggle_LED1>
			fifty_ms_count = 25;
 180:	89 e1       	ldi	r24, 0x19	; 25
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 188:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 18c:	0b c0       	rjmp	.+22     	; 0x1a4 <__vector_14+0x62>
		}
		else
			fifty_ms_count--;
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 194:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <__vector_14+0x62>
	}
	else
		pause_count--;
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pause_count+0x1>
 1a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pause_count>
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_11>:

ISR(TIMER1_COMPA_vect) // controls LED2
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	toggle_LED2();
 1e8:	0e 94 8d 00 	call	0x11a	; 0x11a <toggle_LED2>
}
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_3>:

ISR(PCINT0_vect) // turns off LED1
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
	//Turn off LED1 for 5 seconds;
	if(!(PINB & (1<<PINB3)))
 21c:	1b 99       	sbic	0x03, 3	; 3
 21e:	07 c0       	rjmp	.+14     	; 0x22e <__vector_3+0x20>
			if(releaseCount > 500)
			{
				releaseCount = 0;
			}
		}*/
		PORTD &= ~(1<<LED1);
 220:	58 98       	cbi	0x0b, 0	; 11
		pause_count = 5000;
 222:	88 e8       	ldi	r24, 0x88	; 136
 224:	93 e1       	ldi	r25, 0x13	; 19
 226:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pause_count+0x1>
 22a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pause_count>
	}
}
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <InitPCINT3>:

void InitPCINT3(void)
{
	PCMSK0 |= (1<<PCINT3); //Enable PB[3] as PCInterrupt PCINT3
 23c:	eb e6       	ldi	r30, 0x6B	; 107
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	88 60       	ori	r24, 0x08	; 8
 244:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0); //Enables Pin Change Interrupt 0, PCI0 Interrupt Vector
 246:	e8 e6       	ldi	r30, 0x68	; 104
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <InitTimer1>:

}

void InitTimer1(void)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
	TCCR1B |= (1<<WGM12); //CLear on Compare A
 256:	c1 e8       	ldi	r28, 0x81	; 129
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	88 81       	ld	r24, Y
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	88 83       	st	Y, r24
	OCR1A = (int)(62500/(2*freq)) - 1;
 260:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	03 2e       	mov	r0, r19
 26c:	00 0c       	add	r0, r0
 26e:	44 0b       	sbc	r20, r20
 270:	55 0b       	sbc	r21, r21
 272:	64 e2       	ldi	r22, 0x24	; 36
 274:	74 ef       	ldi	r23, 0xF4	; 244
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 a4 01 	call	0x348	; 0x348 <__divmodsi4>
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	31 09       	sbc	r19, r1
 282:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 286:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 = (1<<OCIE1A); //Enable Timer 1 Compare A ISR
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B |= (1<<CS12); //Set prescaler 256 & Timer 1 starts
 290:	88 81       	ld	r24, Y
 292:	84 60       	ori	r24, 0x04	; 4
 294:	88 83       	st	Y, r24
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <InitTimer0>:

// 20 Hz ISR for Timer 0
void InitTimer0(void)
{
	//1ms clock
	TCCR0A |= (1<<WGM01); // Clear on Compare A
 29c:	84 b5       	in	r24, 0x24	; 36
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249; // Set number of ticks for Compare A
 2a2:	89 ef       	ldi	r24, 0xF9	; 249
 2a4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);  // Enable Timer 0 Compare A ISR
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = 3; // Set Prescaler 64 & Timer 0 starts
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	85 bd       	out	0x25, r24	; 37
 2b0:	08 95       	ret

000002b2 <main>:
}

int main(void)
{
	DDRD = 0b10000001; // set direction of DDRD0 and 1k to output
 2b2:	81 e8       	ldi	r24, 0x81	; 129
 2b4:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1<<DDB7); // set PORTB 7 to input (SW1) // Already debounced
 2b6:	27 98       	cbi	0x04, 7	; 4
	DDRB &= ~(1<<DDB3); // set PORTB 3 to input (SW2) // need to debounce
 2b8:	23 98       	cbi	0x04, 3	; 4
	//int SW1_pressed = 0;
	//int SW2_pressed = 0;
	InitPCINT3();
 2ba:	0e 94 1e 01 	call	0x23c	; 0x23c <InitPCINT3>
	InitTimer0();
 2be:	0e 94 4e 01 	call	0x29c	; 0x29c <InitTimer0>
	InitTimer1();
 2c2:	0e 94 29 01 	call	0x252	; 0x252 <InitTimer1>
	sei();
 2c6:	78 94       	sei
				if(freq == 1)
					freq = 2;
				else if (freq == 2)
					freq = 1;
				SW1_pressed = 0;
				OCR1A = (int)(62500/(2*freq)) - 1;
 2c8:	0f 2e       	mov	r0, r31
 2ca:	f4 e2       	ldi	r31, 0x24	; 36
 2cc:	cf 2e       	mov	r12, r31
 2ce:	f4 ef       	ldi	r31, 0xF4	; 244
 2d0:	df 2e       	mov	r13, r31
 2d2:	e1 2c       	mov	r14, r1
 2d4:	f1 2c       	mov	r15, r1
 2d6:	f0 2d       	mov	r31, r0
 2d8:	08 e8       	ldi	r16, 0x88	; 136
 2da:	10 e0       	ldi	r17, 0x00	; 0
			if (SW1_pressed)
			{
				if(freq == 1)
					freq = 2;
				else if (freq == 2)
					freq = 1;
 2dc:	aa 24       	eor	r10, r10
 2de:	a3 94       	inc	r10
		else
		{
			if (SW1_pressed)
			{
				if(freq == 1)
					freq = 2;
 2e0:	68 94       	set
 2e2:	bb 24       	eor	r11, r11
 2e4:	b1 f8       	bld	r11, 1
	while (1)
	{
		
		if(!(PINB & (1<<PINB7))) // SW1 Pressed
		{
			SW1_pressed = 1;
 2e6:	c1 e0       	ldi	r28, 0x01	; 1
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
	InitTimer1();
	sei();
	while (1)
	{
		
		if(!(PINB & (1<<PINB7))) // SW1 Pressed
 2ea:	1f 99       	sbic	0x03, 7	; 3
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <main+0x46>
		{
			SW1_pressed = 1;
 2ee:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <SW1_pressed+0x1>
 2f2:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <SW1_pressed>
 2f6:	f9 cf       	rjmp	.-14     	; 0x2ea <main+0x38>
		}
		else
		{
			if (SW1_pressed)
 2f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <SW1_pressed>
 2fc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <SW1_pressed+0x1>
 300:	89 2b       	or	r24, r25
 302:	99 f3       	breq	.-26     	; 0x2ea <main+0x38>
			{
				if(freq == 1)
 304:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	19 f4       	brne	.+6      	; 0x312 <main+0x60>
					freq = 2;
 30c:	b0 92 00 01 	sts	0x0100, r11	; 0x800100 <__data_start>
 310:	04 c0       	rjmp	.+8      	; 0x31a <main+0x68>
				else if (freq == 2)
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	11 f4       	brne	.+4      	; 0x31a <main+0x68>
					freq = 1;
 316:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
				SW1_pressed = 0;
 31a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <SW1_pressed+0x1>
 31e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <SW1_pressed>
				OCR1A = (int)(62500/(2*freq)) - 1;
 322:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	03 2e       	mov	r0, r19
 32e:	00 0c       	add	r0, r0
 330:	44 0b       	sbc	r20, r20
 332:	55 0b       	sbc	r21, r21
 334:	c7 01       	movw	r24, r14
 336:	b6 01       	movw	r22, r12
 338:	0e 94 a4 01 	call	0x348	; 0x348 <__divmodsi4>
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	31 09       	sbc	r19, r1
 340:	f8 01       	movw	r30, r16
 342:	31 83       	std	Z+1, r19	; 0x01
 344:	20 83       	st	Z, r18
 346:	d1 cf       	rjmp	.-94     	; 0x2ea <main+0x38>

00000348 <__divmodsi4>:
 348:	05 2e       	mov	r0, r21
 34a:	97 fb       	bst	r25, 7
 34c:	1e f4       	brtc	.+6      	; 0x354 <__divmodsi4+0xc>
 34e:	00 94       	com	r0
 350:	0e 94 bb 01 	call	0x376	; 0x376 <__negsi2>
 354:	57 fd       	sbrc	r21, 7
 356:	07 d0       	rcall	.+14     	; 0x366 <__divmodsi4_neg2>
 358:	0e 94 c3 01 	call	0x386	; 0x386 <__udivmodsi4>
 35c:	07 fc       	sbrc	r0, 7
 35e:	03 d0       	rcall	.+6      	; 0x366 <__divmodsi4_neg2>
 360:	4e f4       	brtc	.+18     	; 0x374 <__divmodsi4_exit>
 362:	0c 94 bb 01 	jmp	0x376	; 0x376 <__negsi2>

00000366 <__divmodsi4_neg2>:
 366:	50 95       	com	r21
 368:	40 95       	com	r20
 36a:	30 95       	com	r19
 36c:	21 95       	neg	r18
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
 370:	4f 4f       	sbci	r20, 0xFF	; 255
 372:	5f 4f       	sbci	r21, 0xFF	; 255

00000374 <__divmodsi4_exit>:
 374:	08 95       	ret

00000376 <__negsi2>:
 376:	90 95       	com	r25
 378:	80 95       	com	r24
 37a:	70 95       	com	r23
 37c:	61 95       	neg	r22
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	8f 4f       	sbci	r24, 0xFF	; 255
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	08 95       	ret

00000386 <__udivmodsi4>:
 386:	a1 e2       	ldi	r26, 0x21	; 33
 388:	1a 2e       	mov	r1, r26
 38a:	aa 1b       	sub	r26, r26
 38c:	bb 1b       	sub	r27, r27
 38e:	fd 01       	movw	r30, r26
 390:	0d c0       	rjmp	.+26     	; 0x3ac <__udivmodsi4_ep>

00000392 <__udivmodsi4_loop>:
 392:	aa 1f       	adc	r26, r26
 394:	bb 1f       	adc	r27, r27
 396:	ee 1f       	adc	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	a2 17       	cp	r26, r18
 39c:	b3 07       	cpc	r27, r19
 39e:	e4 07       	cpc	r30, r20
 3a0:	f5 07       	cpc	r31, r21
 3a2:	20 f0       	brcs	.+8      	; 0x3ac <__udivmodsi4_ep>
 3a4:	a2 1b       	sub	r26, r18
 3a6:	b3 0b       	sbc	r27, r19
 3a8:	e4 0b       	sbc	r30, r20
 3aa:	f5 0b       	sbc	r31, r21

000003ac <__udivmodsi4_ep>:
 3ac:	66 1f       	adc	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	88 1f       	adc	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	1a 94       	dec	r1
 3b6:	69 f7       	brne	.-38     	; 0x392 <__udivmodsi4_loop>
 3b8:	60 95       	com	r22
 3ba:	70 95       	com	r23
 3bc:	80 95       	com	r24
 3be:	90 95       	com	r25
 3c0:	9b 01       	movw	r18, r22
 3c2:	ac 01       	movw	r20, r24
 3c4:	bd 01       	movw	r22, r26
 3c6:	cf 01       	movw	r24, r30
 3c8:	08 95       	ret

000003ca <_exit>:
 3ca:	f8 94       	cli

000003cc <__stop_program>:
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <__stop_program>
