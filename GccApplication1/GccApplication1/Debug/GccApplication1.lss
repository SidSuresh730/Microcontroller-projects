
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b97  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000968  00000000  00000000  00000e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000514  00000000  00000000  000017df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007773  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022c  00000000  00000000  0000948b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000096b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002a60  00000000  00000000  000096c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
   6:	00 00       	nop
   8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
   a:	00 00       	nop
   c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
   e:	00 00       	nop
  10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
  12:	00 00       	nop
  14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
  16:	00 00       	nop
  18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
  22:	00 00       	nop
  24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
  26:	00 00       	nop
  28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4b c0       	rjmp	.+150    	; 0xc4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	49 c0       	rjmp	.+146    	; 0xc4 <__bad_interrupt>
  32:	00 00       	nop
  34:	47 c0       	rjmp	.+142    	; 0xc4 <__bad_interrupt>
  36:	00 00       	nop
  38:	45 c0       	rjmp	.+138    	; 0xc4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
  42:	00 00       	nop
  44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
  46:	00 00       	nop
  48:	3d c0       	rjmp	.+122    	; 0xc4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3b c0       	rjmp	.+118    	; 0xc4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
  52:	00 00       	nop
  54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
  56:	00 00       	nop
  58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
  62:	00 00       	nop
  64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
  66:	00 00       	nop
  68:	2d c0       	rjmp	.+90     	; 0xc4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2b c0       	rjmp	.+86     	; 0xc4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	29 c0       	rjmp	.+82     	; 0xc4 <__bad_interrupt>
  72:	00 00       	nop
  74:	27 c0       	rjmp	.+78     	; 0xc4 <__bad_interrupt>
  76:	00 00       	nop
  78:	25 c0       	rjmp	.+74     	; 0xc4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	23 c0       	rjmp	.+70     	; 0xc4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	21 c0       	rjmp	.+66     	; 0xc4 <__bad_interrupt>
  82:	00 00       	nop
  84:	1f c0       	rjmp	.+62     	; 0xc4 <__bad_interrupt>
  86:	00 00       	nop
  88:	1d c0       	rjmp	.+58     	; 0xc4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1b c0       	rjmp	.+54     	; 0xc4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	19 c0       	rjmp	.+50     	; 0xc4 <__bad_interrupt>
  92:	00 00       	nop
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__bad_interrupt>
  96:	00 00       	nop
  98:	15 c0       	rjmp	.+42     	; 0xc4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	13 c0       	rjmp	.+38     	; 0xc4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	11 c0       	rjmp	.+34     	; 0xc4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	0f c0       	rjmp	.+30     	; 0xc4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	0d c0       	rjmp	.+26     	; 0xc4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	0b c0       	rjmp	.+22     	; 0xc4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	02 d0       	rcall	.+4      	; 0xc6 <main>
  c2:	99 c0       	rjmp	.+306    	; 0x1f6 <_exit>

000000c4 <__bad_interrupt>:
  c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <main>:
#define REG_SIZE 8;

int main(void)
{
	int current_led = DDD0;
	DDRD |= (1<<current_led); //Set PORTD 0 to output (1 is output, 0 is input)
  c6:	50 9a       	sbi	0x0a, 0	; 10
	DDRB &= ~(1<<DDB7); //Set PORTB 7 to input (BTN 1) 
  c8:	27 98       	cbi	0x04, 7	; 4
	DDRB &= ~(1<<DDB1); //Set PORTB 1 to input (BTN 2)
  ca:	21 98       	cbi	0x04, 1	; 4
#define LED_TOGGLE PINB |= (1<<PINB5)
#define REG_SIZE 8;

int main(void)
{
	int current_led = DDD0;
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	50 e0       	ldi	r21, 0x00	; 0
			PORTD &= ~(1<<current_led); //set current_led low
			_delay_ms(62.5); //Delay 125 ms
		}
		else{
			//LED_OFF;
				PORTD |= (1<<current_led); //set current_led high 
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	70 e0       	ldi	r23, 0x00	; 0
		/*PORTD |= (1<<PORTD5); //Set PB5 to 1 which is high (LED On)
		_delay_ms(1000); //Delay for 1000ms 
		PORTD &= ~(1<<PORTD5); //Set PB5 to 0 which is low (LED off)
		_delay_ms(1000); //Delay for 1000ms 		
		*/
		if(!(PINB & (1<<PINB1))){ //If PINB1 is low (BTN2)
  d4:	19 99       	sbic	0x03, 1	; 3
  d6:	4a c0       	rjmp	.+148    	; 0x16c <main+0xa6>
			current_led = (current_led+1)%REG_SIZE;
  d8:	ca 01       	movw	r24, r20
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	87 70       	andi	r24, 0x07	; 7
  de:	90 78       	andi	r25, 0x80	; 128
  e0:	99 23       	and	r25, r25
  e2:	24 f4       	brge	.+8      	; 0xec <main+0x26>
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	88 6f       	ori	r24, 0xF8	; 248
  e8:	9f 6f       	ori	r25, 0xFF	; 255
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	ac 01       	movw	r20, r24
			DDRD |= (1<<current_led);
  ee:	9a b1       	in	r25, 0x0a	; 10
  f0:	9b 01       	movw	r18, r22
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x32>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	8a 95       	dec	r24
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <main+0x2e>
  fc:	92 2b       	or	r25, r18
  fe:	9a b9       	out	0x0a, r25	; 10
			if(!(PINB & (1<<PINB7))){ //If PINB7 is low as well
 100:	1f 99       	sbic	0x03, 7	; 3
 102:	1a c0       	rjmp	.+52     	; 0x138 <main+0x72>
				PORTD |= (1<<current_led); //set current_led high
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	82 2b       	or	r24, r18
 108:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	9d e0       	ldi	r25, 0x0D	; 13
 10e:	e3 e0       	ldi	r30, 0x03	; 3
 110:	81 50       	subi	r24, 0x01	; 1
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e0 40       	sbci	r30, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x4a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x54>
 11a:	00 00       	nop
				_delay_ms(62.5); //Delay 125 ms
				PORTD &= ~(1<<current_led); //set current_led low
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	20 95       	com	r18
 120:	28 23       	and	r18, r24
 122:	2b b9       	out	0x0b, r18	; 11
 124:	2f e3       	ldi	r18, 0x3F	; 63
 126:	3d e0       	ldi	r19, 0x0D	; 13
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x64>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x6e>
 134:	00 00       	nop
 136:	ce cf       	rjmp	.-100    	; 0xd4 <main+0xe>
				_delay_ms(62.5); //Delay 125 ms
				//(current_led++)%REG_SIZE;
			}
			else{
				PORTD |= (1<<current_led); //set current_led high
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	82 2b       	or	r24, r18
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	e4 e3       	ldi	r30, 0x34	; 52
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	91 50       	subi	r25, 0x01	; 1
 146:	e0 40       	sbci	r30, 0x00	; 0
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x7e>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x88>
 14e:	00 00       	nop
				_delay_ms(250); //Delay 500 ms
				PORTD &= ~(1<<current_led); //set current_led low
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	20 95       	com	r18
 154:	28 23       	and	r18, r24
 156:	2b b9       	out	0x0b, r18	; 11
 158:	9f ef       	ldi	r25, 0xFF	; 255
 15a:	e4 e3       	ldi	r30, 0x34	; 52
 15c:	2c e0       	ldi	r18, 0x0C	; 12
 15e:	91 50       	subi	r25, 0x01	; 1
 160:	e0 40       	sbci	r30, 0x00	; 0
 162:	20 40       	sbci	r18, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x98>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xa2>
 168:	00 00       	nop
 16a:	b4 cf       	rjmp	.-152    	; 0xd4 <main+0xe>
				//(current_led++)%REG_SIZE;
			}
			
			
		}
		else if(!(PINB & (1<<PINB7))) //If PINB7 is low
 16c:	1f 99       	sbic	0x03, 7	; 3
 16e:	21 c0       	rjmp	.+66     	; 0x1b2 <main+0xec>
		{
			//LED_ON;
			PORTD |= (1<<current_led); //set current_led high 
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	9b 01       	movw	r18, r22
 174:	04 2e       	mov	r0, r20
 176:	02 c0       	rjmp	.+4      	; 0x17c <main+0xb6>
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <main+0xb2>
 180:	82 2b       	or	r24, r18
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	9d e0       	ldi	r25, 0x0D	; 13
 188:	e3 e0       	ldi	r30, 0x03	; 3
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e0 40       	sbci	r30, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0xc4>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0xce>
 194:	00 00       	nop
			_delay_ms(62.5); //delay 125 ms
			PORTD &= ~(1<<current_led); //set current_led low
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	20 95       	com	r18
 19a:	28 23       	and	r18, r24
 19c:	2b b9       	out	0x0b, r18	; 11
 19e:	2f e3       	ldi	r18, 0x3F	; 63
 1a0:	3d e0       	ldi	r19, 0x0D	; 13
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	30 40       	sbci	r19, 0x00	; 0
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0xde>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0xe8>
 1ae:	00 00       	nop
 1b0:	91 cf       	rjmp	.-222    	; 0xd4 <main+0xe>
			_delay_ms(62.5); //Delay 125 ms
		}
		else{
			//LED_OFF;
				PORTD |= (1<<current_led); //set current_led high 
 1b2:	2b b1       	in	r18, 0x0b	; 11
 1b4:	cb 01       	movw	r24, r22
 1b6:	04 2e       	mov	r0, r20
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <main+0xf8>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <main+0xf4>
 1c2:	92 2f       	mov	r25, r18
 1c4:	98 2b       	or	r25, r24
 1c6:	9b b9       	out	0x0b, r25	; 11
 1c8:	ef ef       	ldi	r30, 0xFF	; 255
 1ca:	24 e3       	ldi	r18, 0x34	; 52
 1cc:	3c e0       	ldi	r19, 0x0C	; 12
 1ce:	e1 50       	subi	r30, 0x01	; 1
 1d0:	20 40       	sbci	r18, 0x00	; 0
 1d2:	30 40       	sbci	r19, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x108>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x112>
 1d8:	00 00       	nop
				_delay_ms(250); //Delay 500 ms
				PORTD &= ~(1<<current_led); //set current_led low
 1da:	9b b1       	in	r25, 0x0b	; 11
 1dc:	80 95       	com	r24
 1de:	89 23       	and	r24, r25
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	94 e3       	ldi	r25, 0x34	; 52
 1e6:	ec e0       	ldi	r30, 0x0C	; 12
 1e8:	81 50       	subi	r24, 0x01	; 1
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e0 40       	sbci	r30, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x122>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x12c>
 1f2:	00 00       	nop
 1f4:	6f cf       	rjmp	.-290    	; 0xd4 <main+0xe>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
