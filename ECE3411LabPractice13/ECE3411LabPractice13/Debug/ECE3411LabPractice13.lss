
ECE3411LabPractice13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000e80  00000f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800140  00800140  00000f54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001594  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6c  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099f  00000000  00000000  000033c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00003d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006be  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d0  00000000  00000000  0000474a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000511a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_21>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_40>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e8       	ldi	r30, 0x80	; 128
  c8:	fe e0       	ldi	r31, 0x0E	; 14
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 34       	cpi	r26, 0x40	; 64
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e4       	ldi	r26, 0x40	; 64
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 3a       	cpi	r26, 0xA5	; 165
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
  ea:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR1 = (uint8_t)TWBR_val;
  f2:	88 e4       	ldi	r24, 0x48	; 72
  f4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
  f8:	08 95       	ret

000000fa <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR1 = 0;
  fa:	ec ed       	ldi	r30, 0xDC	; 220
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
	// transmit START condition
	TWCR1 = (1<<TWINT1) | (1<<TWSTA1) | (1<<TWEN1); 
 100:	94 ea       	ldi	r25, 0xA4	; 164
 102:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 104:	90 81       	ld	r25, Z
 106:	99 23       	and	r25, r25
 108:	ec f7       	brge	.-6      	; 0x104 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR1 & 0xF8) != TW_START){ return 1; }
 10a:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
 10e:	98 7f       	andi	r25, 0xF8	; 248
 110:	98 30       	cpi	r25, 0x08	; 8
 112:	61 f4       	brne	.+24     	; 0x12c <i2c_start+0x32>
	
	// load slave address into data register
	TWDR1 = address;
 114:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	// start transmission of address
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 11e:	ec ed       	ldi	r30, 0xDC	; 220
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <i2c_start+0x28>
/*	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
*/
	return 0;
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
	TWCR1 = (1<<TWINT1) | (1<<TWSTA1) | (1<<TWEN1); 
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR1 & 0xF8) != TW_START){ return 1; }
 12c:	81 e0       	ldi	r24, 0x01	; 1
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
*/
	return 0;
}
 12e:	08 95       	ret

00000130 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR1 = data;
 130:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	// start transmission of data
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
 134:	84 e8       	ldi	r24, 0x84	; 132
 136:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 13a:	ec ed       	ldi	r30, 0xDC	; 220
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	ec f7       	brge	.-6      	; 0x13e <i2c_write+0xe>
	
	if( (TWSR1 & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 144:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
 148:	98 7f       	andi	r25, 0xF8	; 248
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	98 32       	cpi	r25, 0x28	; 40
 14e:	09 f4       	brne	.+2      	; 0x152 <i2c_write+0x22>
 150:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 152:	08 95       	ret

00000154 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWEA1);
 154:	84 ec       	ldi	r24, 0xC4	; 196
 156:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 15a:	ec ed       	ldi	r30, 0xDC	; 220
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	ec f7       	brge	.-6      	; 0x15e <i2c_read_ack+0xa>
	// return received data from TWDR
	return TWDR1;
 164:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
 168:	08 95       	ret

0000016a <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
 170:	ec ed       	ldi	r30, 0xDC	; 220
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 23       	and	r24, r24
 178:	ec f7       	brge	.-6      	; 0x174 <i2c_read_nack+0xa>
	// return received data from TWDR
	return TWDR1;
 17a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
 17e:	08 95       	ret

00000180 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	6b 01       	movw	r12, r22
 190:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 192:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
 196:	f8 2e       	mov	r15, r24
 198:	81 11       	cpse	r24, r1
 19a:	12 c0       	rjmp	.+36     	; 0x1c0 <i2c_transmit+0x40>
	
	for (uint16_t i = 0; i < length; i++)
 19c:	01 15       	cp	r16, r1
 19e:	11 05       	cpc	r17, r1
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <i2c_transmit+0x38>
 1a2:	e6 01       	movw	r28, r12
 1a4:	0c 0d       	add	r16, r12
 1a6:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 1a8:	89 91       	ld	r24, Y+
 1aa:	0e 94 98 00 	call	0x130	; 0x130 <i2c_write>
 1ae:	81 11       	cpse	r24, r1
 1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <i2c_transmit+0x46>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
 1b2:	0c 17       	cp	r16, r28
 1b4:	1d 07       	cpc	r17, r29
 1b6:	c1 f7       	brne	.-16     	; 0x1a8 <i2c_transmit+0x28>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWSTO1);
 1b8:	84 e9       	ldi	r24, 0x94	; 148
 1ba:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <i2c_transmit+0x4a>
	return TWDR1;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 1c0:	ff 24       	eor	r15, r15
 1c2:	f3 94       	inc	r15
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <i2c_transmit+0x4a>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 1c6:	ff 24       	eor	r15, r15
 1c8:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
 1ca:	8f 2d       	mov	r24, r15
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

000001dc <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
 1dc:	af 92       	push	r10
 1de:	bf 92       	push	r11
 1e0:	df 92       	push	r13
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	5b 01       	movw	r10, r22
 1f0:	7a 01       	movw	r14, r20
	if (i2c_start(address | I2C_READ)) return 1;
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
 1f8:	d8 2e       	mov	r13, r24
 1fa:	81 11       	cpse	r24, r1
 1fc:	18 c0       	rjmp	.+48     	; 0x22e <i2c_receive+0x52>
	
	for (uint16_t i = 0; i < (length-1); i++)
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	e8 1a       	sub	r14, r24
 202:	f1 08       	sbc	r15, r1
 204:	51 f0       	breq	.+20     	; 0x21a <i2c_receive+0x3e>
 206:	e5 01       	movw	r28, r10
 208:	85 01       	movw	r16, r10
 20a:	0e 0d       	add	r16, r14
 20c:	1f 1d       	adc	r17, r15
	{
		data[i] = i2c_read_ack();
 20e:	0e 94 aa 00 	call	0x154	; 0x154 <i2c_read_ack>
 212:	89 93       	st	Y+, r24

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
 214:	0c 17       	cp	r16, r28
 216:	1d 07       	cpc	r17, r29
 218:	d1 f7       	brne	.-12     	; 0x20e <i2c_receive+0x32>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 21a:	e5 01       	movw	r28, r10
 21c:	ce 0d       	add	r28, r14
 21e:	df 1d       	adc	r29, r15
 220:	0e 94 b5 00 	call	0x16a	; 0x16a <i2c_read_nack>
 224:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWSTO1);
 226:	84 e9       	ldi	r24, 0x94	; 148
 228:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
 22c:	02 c0       	rjmp	.+4      	; 0x232 <i2c_receive+0x56>
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
 22e:	dd 24       	eor	r13, r13
 230:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 232:	8d 2d       	mov	r24, r13
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	bf 90       	pop	r11
 244:	af 90       	pop	r10
 246:	08 95       	ret

00000248 <InitTimer0>:
}

double celc_to_far(double celcius)
{
	return celcius*9.0/5.0 + 32;
}
 248:	84 b5       	in	r24, 0x24	; 36
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	84 bd       	out	0x24, r24	; 36
 24e:	89 ef       	ldi	r24, 0xF9	; 249
 250:	87 bd       	out	0x27, r24	; 39
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	85 bd       	out	0x25, r24	; 37
 25c:	08 95       	ret

0000025e <UART_Init>:
 25e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 262:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 26c:	8e e0       	ldi	r24, 0x0E	; 14
 26e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 272:	08 95       	ret

00000274 <setupADC>:

void setupADC(void)
{
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1); // ADC enable, interrupt enable
 274:	ea e7       	ldi	r30, 0x7A	; 122
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8e 68       	ori	r24, 0x8E	; 142
 27c:	80 83       	st	Z, r24
	// prescaler = 64
	ADMUX = 7;
 27e:	87 e0       	ldi	r24, 0x07	; 7
 280:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 284:	08 95       	ret

00000286 <startConversion>:
}

void startConversion(void)
{
	ADCSRA |= (1<<ADSC);
 286:	ea e7       	ldi	r30, 0x7A	; 122
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	80 83       	st	Z, r24
 290:	08 95       	ret

00000292 <tempDutyConversion>:

void tempDutyConversion(void)
{
	//0.4; // V0degrees
	//0195; //Temperature coefficient
	adc_temp = (tempRead*5.0/1024.0 - 0.4)/(.0195);
 292:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <__data_end>
 296:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <__data_end+0x1>
 29a:	07 2e       	mov	r0, r23
 29c:	00 0c       	add	r0, r0
 29e:	88 0b       	sbc	r24, r24
 2a0:	99 0b       	sbc	r25, r25
 2a2:	0e 94 89 05 	call	0xb12	; 0xb12 <__floatsisf>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 ea       	ldi	r20, 0xA0	; 160
 2ac:	50 e4       	ldi	r21, 0x40	; 64
 2ae:	0e 94 1a 06 	call	0xc34	; 0xc34 <__mulsf3>
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	40 e8       	ldi	r20, 0x80	; 128
 2b8:	5a e3       	ldi	r21, 0x3A	; 58
 2ba:	0e 94 1a 06 	call	0xc34	; 0xc34 <__mulsf3>
 2be:	2d ec       	ldi	r18, 0xCD	; 205
 2c0:	3c ec       	ldi	r19, 0xCC	; 204
 2c2:	4c ec       	ldi	r20, 0xCC	; 204
 2c4:	5e e3       	ldi	r21, 0x3E	; 62
 2c6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__subsf3>
 2ca:	27 e7       	ldi	r18, 0x77	; 119
 2cc:	3e eb       	ldi	r19, 0xBE	; 190
 2ce:	4f e9       	ldi	r20, 0x9F	; 159
 2d0:	5c e3       	ldi	r21, 0x3C	; 60
 2d2:	0e 94 df 04 	call	0x9be	; 0x9be <__divsf3>
 2d6:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <adc_temp>
 2da:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <adc_temp+0x1>
 2de:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <adc_temp+0x2>
 2e2:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <adc_temp+0x3>
 2e6:	08 95       	ret

000002e8 <writeDouble>:
}

void writeDouble(double number) // writes a double (XX.XX) to the buffer
{
 2e8:	cf 92       	push	r12
 2ea:	df 92       	push	r13
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	6b 01       	movw	r12, r22
 2fa:	7c 01       	movw	r14, r24
	if(number > 99)
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	46 ec       	ldi	r20, 0xC6	; 198
 302:	52 e4       	ldi	r21, 0x42	; 66
 304:	0e 94 15 06 	call	0xc2a	; 0xc2a <__gesf2>
 308:	18 16       	cp	r1, r24
 30a:	7c f4       	brge	.+30     	; 0x32a <writeDouble+0x42>
		uart_putchar((int)number / 100 + 48, &UART_Stream);
 30c:	c7 01       	movw	r24, r14
 30e:	b6 01       	movw	r22, r12
 310:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fixsfsi>
 314:	cb 01       	movw	r24, r22
 316:	64 e6       	ldi	r22, 0x64	; 100
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	0e 94 ab 06 	call	0xd56	; 0xd56 <__divmodhi4>
 31e:	86 2f       	mov	r24, r22
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	71 e0       	ldi	r23, 0x01	; 1
 324:	80 5d       	subi	r24, 0xD0	; 208
 326:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	uart_putchar((int)number %100 / 10 + 48, &UART_Stream);
 32a:	c7 01       	movw	r24, r14
 32c:	b6 01       	movw	r22, r12
 32e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fixsfsi>
 332:	8b 01       	movw	r16, r22
 334:	cb 01       	movw	r24, r22
 336:	64 e6       	ldi	r22, 0x64	; 100
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	0e 94 ab 06 	call	0xd56	; 0xd56 <__divmodhi4>
 33e:	ca e0       	ldi	r28, 0x0A	; 10
 340:	d0 e0       	ldi	r29, 0x00	; 0
 342:	be 01       	movw	r22, r28
 344:	0e 94 ab 06 	call	0xd56	; 0xd56 <__divmodhi4>
 348:	86 2f       	mov	r24, r22
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	71 e0       	ldi	r23, 0x01	; 1
 34e:	80 5d       	subi	r24, 0xD0	; 208
 350:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	uart_putchar((int)number % 10 + 48, &UART_Stream); // + 48 converts the integer to the corresponding character in ASCII
 354:	c8 01       	movw	r24, r16
 356:	be 01       	movw	r22, r28
 358:	0e 94 ab 06 	call	0xd56	; 0xd56 <__divmodhi4>
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	71 e0       	ldi	r23, 0x01	; 1
 360:	80 5d       	subi	r24, 0xD0	; 208
 362:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	uart_putchar('.', &UART_Stream);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	71 e0       	ldi	r23, 0x01	; 1
 36a:	8e e2       	ldi	r24, 0x2E	; 46
 36c:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	uart_putchar((int)(number * 10) % 10 + 48, &UART_Stream);
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e2       	ldi	r20, 0x20	; 32
 376:	51 e4       	ldi	r21, 0x41	; 65
 378:	c7 01       	movw	r24, r14
 37a:	b6 01       	movw	r22, r12
 37c:	0e 94 1a 06 	call	0xc34	; 0xc34 <__mulsf3>
 380:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fixsfsi>
 384:	cb 01       	movw	r24, r22
 386:	be 01       	movw	r22, r28
 388:	0e 94 ab 06 	call	0xd56	; 0xd56 <__divmodhi4>
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	71 e0       	ldi	r23, 0x01	; 1
 390:	80 5d       	subi	r24, 0xD0	; 208
 392:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	uart_putchar((int)(number * 100) % 10 + 48, &UART_Stream);
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	48 ec       	ldi	r20, 0xC8	; 200
 39c:	52 e4       	ldi	r21, 0x42	; 66
 39e:	c7 01       	movw	r24, r14
 3a0:	b6 01       	movw	r22, r12
 3a2:	0e 94 1a 06 	call	0xc34	; 0xc34 <__mulsf3>
 3a6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fixsfsi>
 3aa:	cb 01       	movw	r24, r22
 3ac:	be 01       	movw	r22, r28
 3ae:	0e 94 ab 06 	call	0xd56	; 0xd56 <__divmodhi4>
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	71 e0       	ldi	r23, 0x01	; 1
 3b6:	80 5d       	subi	r24, 0xD0	; 208
 3b8:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	//uart_putchar('\n', &UART_Stream);
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	df 90       	pop	r13
 3ca:	cf 90       	pop	r12
 3cc:	08 95       	ret

000003ce <writeMSG>:

void writeMSG(void)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
	for(int i=0; i<strlen(i2c_msg); i++)
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
 3d4:	d0 e0       	ldi	r29, 0x00	; 0
 3d6:	08 c0       	rjmp	.+16     	; 0x3e8 <writeMSG+0x1a>
	{
		uart_putchar(i2c_msg[i], &UART_Stream);
 3d8:	ac 0f       	add	r26, r28
 3da:	bd 1f       	adc	r27, r29
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	71 e0       	ldi	r23, 0x01	; 1
 3e0:	8c 91       	ld	r24, X
 3e2:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	//uart_putchar('\n', &UART_Stream);
}

void writeMSG(void)
{
	for(int i=0; i<strlen(i2c_msg); i++)
 3e6:	21 96       	adiw	r28, 0x01	; 1
 3e8:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <i2c_msg>
 3ec:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <i2c_msg+0x1>
 3f0:	fd 01       	movw	r30, r26
 3f2:	01 90       	ld	r0, Z+
 3f4:	00 20       	and	r0, r0
 3f6:	e9 f7       	brne	.-6      	; 0x3f2 <writeMSG+0x24>
 3f8:	31 97       	sbiw	r30, 0x01	; 1
 3fa:	ea 1b       	sub	r30, r26
 3fc:	fb 0b       	sbc	r31, r27
 3fe:	ce 17       	cp	r28, r30
 400:	df 07       	cpc	r29, r31
 402:	50 f3       	brcs	.-44     	; 0x3d8 <writeMSG+0xa>
	{
		uart_putchar(i2c_msg[i], &UART_Stream);
	}
	writeDouble(celc_to_far(i2c_temp));
 404:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <i2c_temp>
 408:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <i2c_temp+0x1>
 40c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <i2c_temp+0x2>
 410:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <i2c_temp+0x3>
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e1       	ldi	r20, 0x10	; 16
 41a:	51 e4       	ldi	r21, 0x41	; 65
 41c:	0e 94 1a 06 	call	0xc34	; 0xc34 <__mulsf3>
 420:	20 e0       	ldi	r18, 0x00	; 0
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	40 ea       	ldi	r20, 0xA0	; 160
 426:	50 e4       	ldi	r21, 0x40	; 64
 428:	0e 94 df 04 	call	0x9be	; 0x9be <__divsf3>
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	52 e4       	ldi	r21, 0x42	; 66
 434:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__addsf3>
 438:	0e 94 74 01 	call	0x2e8	; 0x2e8 <writeDouble>
	for(int i=0; i<strlen(farenheit_msg); i++)
 43c:	c0 e0       	ldi	r28, 0x00	; 0
 43e:	d0 e0       	ldi	r29, 0x00	; 0
 440:	08 c0       	rjmp	.+16     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	{
		uart_putchar(farenheit_msg[i], &UART_Stream);
 442:	ac 0f       	add	r26, r28
 444:	bd 1f       	adc	r27, r29
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	71 e0       	ldi	r23, 0x01	; 1
 44a:	8c 91       	ld	r24, X
 44c:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	for(int i=0; i<strlen(i2c_msg); i++)
	{
		uart_putchar(i2c_msg[i], &UART_Stream);
	}
	writeDouble(celc_to_far(i2c_temp));
	for(int i=0; i<strlen(farenheit_msg); i++)
 450:	21 96       	adiw	r28, 0x01	; 1
 452:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <farenheit_msg>
 456:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <farenheit_msg+0x1>
 45a:	fd 01       	movw	r30, r26
 45c:	01 90       	ld	r0, Z+
 45e:	00 20       	and	r0, r0
 460:	e9 f7       	brne	.-6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 462:	31 97       	sbiw	r30, 0x01	; 1
 464:	ea 1b       	sub	r30, r26
 466:	fb 0b       	sbc	r31, r27
 468:	ce 17       	cp	r28, r30
 46a:	df 07       	cpc	r29, r31
 46c:	50 f3       	brcs	.-44     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 46e:	c0 e0       	ldi	r28, 0x00	; 0
 470:	d0 e0       	ldi	r29, 0x00	; 0
 472:	08 c0       	rjmp	.+16     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	{
		uart_putchar(farenheit_msg[i], &UART_Stream);
	}
	for(int i=0; i<strlen(adc_msg); i++)
	{
		uart_putchar(adc_msg[i], &UART_Stream);
 474:	ac 0f       	add	r26, r28
 476:	bd 1f       	adc	r27, r29
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	71 e0       	ldi	r23, 0x01	; 1
 47c:	8c 91       	ld	r24, X
 47e:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	writeDouble(celc_to_far(i2c_temp));
	for(int i=0; i<strlen(farenheit_msg); i++)
	{
		uart_putchar(farenheit_msg[i], &UART_Stream);
	}
	for(int i=0; i<strlen(adc_msg); i++)
 482:	21 96       	adiw	r28, 0x01	; 1
 484:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <adc_msg>
 488:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <adc_msg+0x1>
 48c:	fd 01       	movw	r30, r26
 48e:	01 90       	ld	r0, Z+
 490:	00 20       	and	r0, r0
 492:	e9 f7       	brne	.-6      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 494:	31 97       	sbiw	r30, 0x01	; 1
 496:	ea 1b       	sub	r30, r26
 498:	fb 0b       	sbc	r31, r27
 49a:	ce 17       	cp	r28, r30
 49c:	df 07       	cpc	r29, r31
 49e:	50 f3       	brcs	.-44     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
	{
		uart_putchar(adc_msg[i], &UART_Stream);
	}
	writeDouble(celc_to_far(adc_temp));
 4a0:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <adc_temp>
 4a4:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <adc_temp+0x1>
 4a8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <adc_temp+0x2>
 4ac:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <adc_temp+0x3>
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	40 e1       	ldi	r20, 0x10	; 16
 4b6:	51 e4       	ldi	r21, 0x41	; 65
 4b8:	0e 94 1a 06 	call	0xc34	; 0xc34 <__mulsf3>
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	40 ea       	ldi	r20, 0xA0	; 160
 4c2:	50 e4       	ldi	r21, 0x40	; 64
 4c4:	0e 94 df 04 	call	0x9be	; 0x9be <__divsf3>
 4c8:	20 e0       	ldi	r18, 0x00	; 0
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	52 e4       	ldi	r21, 0x42	; 66
 4d0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__addsf3>
 4d4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <writeDouble>
	for(int i=0; i<strlen(farenheit_msg); i++)
 4d8:	c0 e0       	ldi	r28, 0x00	; 0
 4da:	d0 e0       	ldi	r29, 0x00	; 0
 4dc:	08 c0       	rjmp	.+16     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
	{
		uart_putchar(farenheit_msg[i], &UART_Stream);
 4de:	ac 0f       	add	r26, r28
 4e0:	bd 1f       	adc	r27, r29
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	71 e0       	ldi	r23, 0x01	; 1
 4e6:	8c 91       	ld	r24, X
 4e8:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	for(int i=0; i<strlen(adc_msg); i++)
	{
		uart_putchar(adc_msg[i], &UART_Stream);
	}
	writeDouble(celc_to_far(adc_temp));
	for(int i=0; i<strlen(farenheit_msg); i++)
 4ec:	21 96       	adiw	r28, 0x01	; 1
 4ee:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <farenheit_msg>
 4f2:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <farenheit_msg+0x1>
 4f6:	fd 01       	movw	r30, r26
 4f8:	01 90       	ld	r0, Z+
 4fa:	00 20       	and	r0, r0
 4fc:	e9 f7       	brne	.-6      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4fe:	31 97       	sbiw	r30, 0x01	; 1
 500:	ea 1b       	sub	r30, r26
 502:	fb 0b       	sbc	r31, r27
 504:	ce 17       	cp	r28, r30
 506:	df 07       	cpc	r29, r31
 508:	50 f3       	brcs	.-44     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
	{
		uart_putchar(farenheit_msg[i], &UART_Stream);
	}
	uart_putchar('\n', &UART_Stream);
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	71 e0       	ldi	r23, 0x01	; 1
 50e:	8a e0       	ldi	r24, 0x0A	; 10
 510:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 51a:	1f 92       	push	r1
 51c:	0f 92       	push	r0
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	0f 92       	push	r0
 522:	11 24       	eor	r1, r1
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
	counter++;
 528:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <counter>
 52c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <counter+0x1>
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <counter+0x1>
 536:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <counter>
}
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	0f 90       	pop	r0
 540:	0f be       	out	0x3f, r0	; 63
 542:	0f 90       	pop	r0
 544:	1f 90       	pop	r1
 546:	18 95       	reti

00000548 <__vector_40>:

ISR(TWI1_vect)
{
 548:	1f 92       	push	r1
 54a:	0f 92       	push	r0
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	0f 92       	push	r0
 550:	11 24       	eor	r1, r1
 552:	2f 93       	push	r18
 554:	3f 93       	push	r19
 556:	4f 93       	push	r20
 558:	5f 93       	push	r21
 55a:	6f 93       	push	r22
 55c:	7f 93       	push	r23
 55e:	8f 93       	push	r24
 560:	9f 93       	push	r25
 562:	af 93       	push	r26
 564:	bf 93       	push	r27
 566:	ef 93       	push	r30
 568:	ff 93       	push	r31
	if(TWSR1 & 0x50) //Data byte received, ack returned
 56a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
 56e:	80 75       	andi	r24, 0x50	; 80
 570:	b1 f0       	breq	.+44     	; 0x59e <__vector_40+0x56>
	{
		i2c_temp = receive;
 572:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <receive>
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 87 05 	call	0xb0e	; 0xb0e <__floatunsisf>
 580:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <i2c_temp>
 584:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <i2c_temp+0x1>
 588:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <i2c_temp+0x2>
 58c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <i2c_temp+0x3>
		TWCR1 |= (1<<TWINT1);
 590:	ec ed       	ldi	r30, 0xDC	; 220
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	80 68       	ori	r24, 0x80	; 128
 598:	80 83       	st	Z, r24
		startConversion();
 59a:	0e 94 43 01 	call	0x286	; 0x286 <startConversion>
	}
}
 59e:	ff 91       	pop	r31
 5a0:	ef 91       	pop	r30
 5a2:	bf 91       	pop	r27
 5a4:	af 91       	pop	r26
 5a6:	9f 91       	pop	r25
 5a8:	8f 91       	pop	r24
 5aa:	7f 91       	pop	r23
 5ac:	6f 91       	pop	r22
 5ae:	5f 91       	pop	r21
 5b0:	4f 91       	pop	r20
 5b2:	3f 91       	pop	r19
 5b4:	2f 91       	pop	r18
 5b6:	0f 90       	pop	r0
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	0f 90       	pop	r0
 5bc:	1f 90       	pop	r1
 5be:	18 95       	reti

000005c0 <__vector_21>:
ISR(ADC_vect)
{
 5c0:	1f 92       	push	r1
 5c2:	0f 92       	push	r0
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	0f 92       	push	r0
 5c8:	11 24       	eor	r1, r1
 5ca:	2f 93       	push	r18
 5cc:	3f 93       	push	r19
 5ce:	4f 93       	push	r20
 5d0:	5f 93       	push	r21
 5d2:	6f 93       	push	r22
 5d4:	7f 93       	push	r23
 5d6:	8f 93       	push	r24
 5d8:	9f 93       	push	r25
 5da:	af 93       	push	r26
 5dc:	bf 93       	push	r27
 5de:	ef 93       	push	r30
 5e0:	ff 93       	push	r31
	tempRead = ADC;
 5e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 5e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 5ea:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
 5ee:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
	tempDutyConversion();
 5f2:	0e 94 49 01 	call	0x292	; 0x292 <tempDutyConversion>
	writeMSG();
 5f6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <writeMSG>
}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	7f 91       	pop	r23
 608:	6f 91       	pop	r22
 60a:	5f 91       	pop	r21
 60c:	4f 91       	pop	r20
 60e:	3f 91       	pop	r19
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <main>:
int main(void)
{
	/* Replace with your application code */
	i2c_init();
 61c:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_init>
	UART_Init(MYUBRR);
 620:	87 e6       	ldi	r24, 0x67	; 103
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 2f 01 	call	0x25e	; 0x25e <UART_Init>
	InitTimer0();
 628:	0e 94 24 01 	call	0x248	; 0x248 <InitTimer0>
	setupADC();
 62c:	0e 94 3a 01 	call	0x274	; 0x274 <setupADC>
	sei();
 630:	78 94       	sei
		if(counter>=1999) // 2 seconds
		{
			counter = 0;
			i2c_transmit(slave_addr, 0x00, 8);
			i2c_receive(slave_addr, &receive, 8);
			TWCR1 |= (1<<TWIE1) | (1<<TWEN1) | (1<<TWSTA1);
 632:	cc ed       	ldi	r28, 0xDC	; 220
 634:	d0 e0       	ldi	r29, 0x00	; 0
	InitTimer0();
	setupADC();
	sei();
	while (1)
	{
		if(counter>=1999) // 2 seconds
 636:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <counter>
 63a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <counter+0x1>
 63e:	8f 3c       	cpi	r24, 0xCF	; 207
 640:	97 40       	sbci	r25, 0x07	; 7
 642:	cc f3       	brlt	.-14     	; 0x636 <main+0x1a>
		{
			counter = 0;
 644:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <counter+0x1>
 648:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <counter>
			i2c_transmit(slave_addr, 0x00, 8);
 64c:	48 e0       	ldi	r20, 0x08	; 8
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	80 e9       	ldi	r24, 0x90	; 144
 656:	0e 94 c0 00 	call	0x180	; 0x180 <i2c_transmit>
			i2c_receive(slave_addr, &receive, 8);
 65a:	48 e0       	ldi	r20, 0x08	; 8
 65c:	50 e0       	ldi	r21, 0x00	; 0
 65e:	6e e9       	ldi	r22, 0x9E	; 158
 660:	71 e0       	ldi	r23, 0x01	; 1
 662:	80 e9       	ldi	r24, 0x90	; 144
 664:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_receive>
			TWCR1 |= (1<<TWIE1) | (1<<TWEN1) | (1<<TWSTA1);
 668:	88 81       	ld	r24, Y
 66a:	85 62       	ori	r24, 0x25	; 37
 66c:	88 83       	st	Y, r24
 66e:	e3 cf       	rjmp	.-58     	; 0x636 <main+0x1a>

00000670 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 670:	cf 93       	push	r28
 672:	c8 2f       	mov	r28, r24

  if (c == '\a')
 674:	87 30       	cpi	r24, 0x07	; 7
 676:	69 f4       	brne	.+26     	; 0x692 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 678:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <__iob+0x4>
 67c:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <__iob+0x5>
 680:	47 e0       	ldi	r20, 0x07	; 7
 682:	50 e0       	ldi	r21, 0x00	; 0
 684:	61 e0       	ldi	r22, 0x01	; 1
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	88 e3       	ldi	r24, 0x38	; 56
 68a:	91 e0       	ldi	r25, 0x01	; 1
 68c:	0e 94 d3 06 	call	0xda6	; 0xda6 <fwrite>
      return 0;
 690:	0c c0       	rjmp	.+24     	; 0x6aa <uart_putchar+0x3a>
    }

  if (c == '\n')
 692:	8a 30       	cpi	r24, 0x0A	; 10
 694:	19 f4       	brne	.+6      	; 0x69c <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 696:	8d e0       	ldi	r24, 0x0D	; 13
 698:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 69c:	e0 ec       	ldi	r30, 0xC0	; 192
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	85 ff       	sbrs	r24, 5
 6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <uart_putchar+0x30>
  UDR0 = c;
 6a6:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

  return 0;
}
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 6b2:	6f 92       	push	r6
 6b4:	7f 92       	push	r7
 6b6:	8f 92       	push	r8
 6b8:	9f 92       	push	r9
 6ba:	af 92       	push	r10
 6bc:	bf 92       	push	r11
 6be:	cf 92       	push	r12
 6c0:	df 92       	push	r13
 6c2:	ef 92       	push	r14
 6c4:	ff 92       	push	r15
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 6ce:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <rxp.1828>
 6d2:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <rxp.1828+0x1>
 6d6:	23 2b       	or	r18, r19
 6d8:	09 f0       	breq	.+2      	; 0x6dc <uart_getchar+0x2a>
 6da:	da c0       	rjmp	.+436    	; 0x890 <uart_getchar+0x1de>
 6dc:	8c 01       	movw	r16, r24
 6de:	0f 2e       	mov	r0, r31
 6e0:	fc e4       	ldi	r31, 0x4C	; 76
 6e2:	8f 2e       	mov	r8, r31
 6e4:	f1 e0       	ldi	r31, 0x01	; 1
 6e6:	9f 2e       	mov	r9, r31
 6e8:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 6ea:	c0 ec       	ldi	r28, 0xC0	; 192
 6ec:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 6ee:	0f 2e       	mov	r0, r31
 6f0:	f6 ec       	ldi	r31, 0xC6	; 198
 6f2:	cf 2e       	mov	r12, r31
 6f4:	d1 2c       	mov	r13, r1
 6f6:	f0 2d       	mov	r31, r0
 6f8:	54 01       	movw	r10, r8
 6fa:	0f 2e       	mov	r0, r31
 6fc:	fb e4       	ldi	r31, 0x4B	; 75
 6fe:	6f 2e       	mov	r6, r31
 700:	f1 e0       	ldi	r31, 0x01	; 1
 702:	7f 2e       	mov	r7, r31
 704:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 706:	88 81       	ld	r24, Y
 708:	88 23       	and	r24, r24
 70a:	ec f7       	brge	.-6      	; 0x706 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 70c:	88 81       	ld	r24, Y
 70e:	84 fd       	sbrc	r24, 4
 710:	d2 c0       	rjmp	.+420    	; 0x8b6 <uart_getchar+0x204>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 712:	88 81       	ld	r24, Y
 714:	83 fd       	sbrc	r24, 3
 716:	d2 c0       	rjmp	.+420    	; 0x8bc <uart_getchar+0x20a>
	  return _FDEV_ERR;
	c = UDR0;
 718:	f6 01       	movw	r30, r12
 71a:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 71c:	8d 30       	cpi	r24, 0x0D	; 13
 71e:	11 f0       	breq	.+4      	; 0x724 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 720:	8a 30       	cpi	r24, 0x0A	; 10
 722:	69 f4       	brne	.+26     	; 0x73e <uart_getchar+0x8c>
	  {
	    *cp = c;
 724:	8a e0       	ldi	r24, 0x0A	; 10
 726:	f4 01       	movw	r30, r8
 728:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 72a:	b8 01       	movw	r22, r16
 72c:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	    rxp = b;
 730:	8c e4       	ldi	r24, 0x4C	; 76
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <rxp.1828+0x1>
 738:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <rxp.1828>
	    break;
 73c:	a9 c0       	rjmp	.+338    	; 0x890 <uart_getchar+0x1de>
	  }
	else if (c == '\t')
 73e:	89 30       	cpi	r24, 0x09	; 9
 740:	39 f0       	breq	.+14     	; 0x750 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 742:	90 ee       	ldi	r25, 0xE0	; 224
 744:	98 0f       	add	r25, r24
 746:	9f 35       	cpi	r25, 0x5F	; 95
 748:	20 f0       	brcs	.+8      	; 0x752 <uart_getchar+0xa0>
 74a:	80 3a       	cpi	r24, 0xA0	; 160
 74c:	b8 f0       	brcs	.+46     	; 0x77c <uart_getchar+0xca>
 74e:	01 c0       	rjmp	.+2      	; 0x752 <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 750:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 752:	fb e9       	ldi	r31, 0x9B	; 155
 754:	8f 16       	cp	r8, r31
 756:	f1 e0       	ldi	r31, 0x01	; 1
 758:	9f 06       	cpc	r9, r31
 75a:	29 f4       	brne	.+10     	; 0x766 <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 75c:	b8 01       	movw	r22, r16
 75e:	87 e0       	ldi	r24, 0x07	; 7
 760:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
 764:	d0 cf       	rjmp	.-96     	; 0x706 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 766:	74 01       	movw	r14, r8
 768:	9f ef       	ldi	r25, 0xFF	; 255
 76a:	e9 1a       	sub	r14, r25
 76c:	f9 0a       	sbc	r15, r25
 76e:	f4 01       	movw	r30, r8
 770:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 772:	b8 01       	movw	r22, r16
 774:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 778:	47 01       	movw	r8, r14
 77a:	c5 cf       	rjmp	.-118    	; 0x706 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 77c:	82 31       	cpi	r24, 0x12	; 18
 77e:	d1 f1       	breq	.+116    	; 0x7f4 <uart_getchar+0x142>
 780:	30 f4       	brcc	.+12     	; 0x78e <uart_getchar+0xdc>
 782:	83 30       	cpi	r24, 0x03	; 3
 784:	09 f4       	brne	.+2      	; 0x788 <uart_getchar+0xd6>
 786:	9d c0       	rjmp	.+314    	; 0x8c2 <uart_getchar+0x210>
 788:	88 30       	cpi	r24, 0x08	; 8
 78a:	e9 f0       	breq	.+58     	; 0x7c6 <uart_getchar+0x114>
 78c:	bc cf       	rjmp	.-136    	; 0x706 <uart_getchar+0x54>
 78e:	87 31       	cpi	r24, 0x17	; 23
 790:	29 f0       	breq	.+10     	; 0x79c <uart_getchar+0xea>
 792:	8f 37       	cpi	r24, 0x7F	; 127
 794:	c1 f0       	breq	.+48     	; 0x7c6 <uart_getchar+0x114>
 796:	85 31       	cpi	r24, 0x15	; 21
 798:	79 f0       	breq	.+30     	; 0x7b8 <uart_getchar+0x106>
 79a:	b5 cf       	rjmp	.-150    	; 0x706 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 79c:	fc e4       	ldi	r31, 0x4C	; 76
 79e:	8f 16       	cp	r8, r31
 7a0:	f1 e0       	ldi	r31, 0x01	; 1
 7a2:	9f 06       	cpc	r9, r31
 7a4:	09 f0       	breq	.+2      	; 0x7a8 <uart_getchar+0xf6>
 7a6:	08 f4       	brcc	.+2      	; 0x7aa <uart_getchar+0xf8>
 7a8:	ae cf       	rjmp	.-164    	; 0x706 <uart_getchar+0x54>
 7aa:	f4 01       	movw	r30, r8
 7ac:	31 97       	sbiw	r30, 0x01	; 1
 7ae:	80 81       	ld	r24, Z
 7b0:	80 32       	cpi	r24, 0x20	; 32
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <uart_getchar+0x104>
 7b4:	52 c0       	rjmp	.+164    	; 0x85a <uart_getchar+0x1a8>
 7b6:	a7 cf       	rjmp	.-178    	; 0x706 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 7b8:	8c e4       	ldi	r24, 0x4C	; 76
 7ba:	88 16       	cp	r8, r24
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	98 06       	cpc	r9, r24
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <uart_getchar+0x112>
 7c2:	98 f5       	brcc	.+102    	; 0x82a <uart_getchar+0x178>
 7c4:	a0 cf       	rjmp	.-192    	; 0x706 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 7c6:	9c e4       	ldi	r25, 0x4C	; 76
 7c8:	89 16       	cp	r8, r25
 7ca:	91 e0       	ldi	r25, 0x01	; 1
 7cc:	99 06       	cpc	r9, r25
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <uart_getchar+0x120>
 7d0:	08 f4       	brcc	.+2      	; 0x7d4 <uart_getchar+0x122>
 7d2:	99 cf       	rjmp	.-206    	; 0x706 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 7d4:	b8 01       	movw	r22, r16
 7d6:	88 e0       	ldi	r24, 0x08	; 8
 7d8:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
		uart_putchar(' ', stream);
 7dc:	b8 01       	movw	r22, r16
 7de:	80 e2       	ldi	r24, 0x20	; 32
 7e0:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
		uart_putchar('\b', stream);
 7e4:	b8 01       	movw	r22, r16
 7e6:	88 e0       	ldi	r24, 0x08	; 8
 7e8:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
		cp--;
 7ec:	e1 e0       	ldi	r30, 0x01	; 1
 7ee:	8e 1a       	sub	r8, r30
 7f0:	91 08       	sbc	r9, r1
 7f2:	89 cf       	rjmp	.-238    	; 0x706 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 7f4:	b8 01       	movw	r22, r16
 7f6:	8d e0       	ldi	r24, 0x0D	; 13
 7f8:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 7fc:	fc e4       	ldi	r31, 0x4C	; 76
 7fe:	8f 16       	cp	r8, r31
 800:	f1 e0       	ldi	r31, 0x01	; 1
 802:	9f 06       	cpc	r9, r31
 804:	09 f0       	breq	.+2      	; 0x808 <uart_getchar+0x156>
 806:	08 f4       	brcc	.+2      	; 0x80a <uart_getchar+0x158>
 808:	7e cf       	rjmp	.-260    	; 0x706 <uart_getchar+0x54>
 80a:	0f 2e       	mov	r0, r31
 80c:	fc e4       	ldi	r31, 0x4C	; 76
 80e:	ef 2e       	mov	r14, r31
 810:	f1 e0       	ldi	r31, 0x01	; 1
 812:	ff 2e       	mov	r15, r31
 814:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 816:	b8 01       	movw	r22, r16
 818:	f7 01       	movw	r30, r14
 81a:	81 91       	ld	r24, Z+
 81c:	7f 01       	movw	r14, r30
 81e:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 822:	8e 14       	cp	r8, r14
 824:	9f 04       	cpc	r9, r15
 826:	b9 f7       	brne	.-18     	; 0x816 <uart_getchar+0x164>
 828:	6e cf       	rjmp	.-292    	; 0x706 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 82a:	b8 01       	movw	r22, r16
 82c:	88 e0       	ldi	r24, 0x08	; 8
 82e:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
		uart_putchar(' ', stream);
 832:	b8 01       	movw	r22, r16
 834:	80 e2       	ldi	r24, 0x20	; 32
 836:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
		uart_putchar('\b', stream);
 83a:	b8 01       	movw	r22, r16
 83c:	88 e0       	ldi	r24, 0x08	; 8
 83e:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
		cp--;
 842:	f1 e0       	ldi	r31, 0x01	; 1
 844:	8f 1a       	sub	r8, r31
 846:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 848:	8c e4       	ldi	r24, 0x4C	; 76
 84a:	88 16       	cp	r8, r24
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	98 06       	cpc	r9, r24
 850:	61 f7       	brne	.-40     	; 0x82a <uart_getchar+0x178>
 852:	f3 01       	movw	r30, r6
 854:	31 96       	adiw	r30, 0x01	; 1
 856:	4f 01       	movw	r8, r30
 858:	56 cf       	rjmp	.-340    	; 0x706 <uart_getchar+0x54>
 85a:	74 01       	movw	r14, r8
 85c:	f1 e0       	ldi	r31, 0x01	; 1
 85e:	ef 1a       	sub	r14, r31
 860:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 862:	b8 01       	movw	r22, r16
 864:	88 e0       	ldi	r24, 0x08	; 8
 866:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
		uart_putchar(' ', stream);
 86a:	b8 01       	movw	r22, r16
 86c:	80 e2       	ldi	r24, 0x20	; 32
 86e:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
		uart_putchar('\b', stream);
 872:	b8 01       	movw	r22, r16
 874:	88 e0       	ldi	r24, 0x08	; 8
 876:	0e 94 38 03 	call	0x670	; 0x670 <uart_putchar>
		cp--;
 87a:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 87c:	ea 14       	cp	r14, r10
 87e:	fb 04       	cpc	r15, r11
 880:	09 f4       	brne	.+2      	; 0x884 <uart_getchar+0x1d2>
 882:	41 cf       	rjmp	.-382    	; 0x706 <uart_getchar+0x54>
 884:	f7 01       	movw	r30, r14
 886:	82 91       	ld	r24, -Z
 888:	7f 01       	movw	r14, r30
 88a:	80 32       	cpi	r24, 0x20	; 32
 88c:	51 f7       	brne	.-44     	; 0x862 <uart_getchar+0x1b0>
 88e:	3b cf       	rjmp	.-394    	; 0x706 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 890:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <rxp.1828>
 894:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <rxp.1828+0x1>
 898:	cf 01       	movw	r24, r30
 89a:	01 96       	adiw	r24, 0x01	; 1
 89c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <rxp.1828+0x1>
 8a0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <rxp.1828>
 8a4:	80 81       	ld	r24, Z
  if (c == '\n')
 8a6:	8a 30       	cpi	r24, 0x0A	; 10
 8a8:	21 f4       	brne	.+8      	; 0x8b2 <uart_getchar+0x200>
    rxp = 0;
 8aa:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <rxp.1828+0x1>
 8ae:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <rxp.1828>

  return c;
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <uart_getchar+0x214>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 8b6:	8e ef       	ldi	r24, 0xFE	; 254
 8b8:	9f ef       	ldi	r25, 0xFF	; 255
 8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <uart_getchar+0x214>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 8bc:	8f ef       	ldi	r24, 0xFF	; 255
 8be:	9f ef       	ldi	r25, 0xFF	; 255
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <uart_getchar+0x214>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 8c2:	8f ef       	ldi	r24, 0xFF	; 255
 8c4:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	1f 91       	pop	r17
 8cc:	0f 91       	pop	r16
 8ce:	ff 90       	pop	r15
 8d0:	ef 90       	pop	r14
 8d2:	df 90       	pop	r13
 8d4:	cf 90       	pop	r12
 8d6:	bf 90       	pop	r11
 8d8:	af 90       	pop	r10
 8da:	9f 90       	pop	r9
 8dc:	8f 90       	pop	r8
 8de:	7f 90       	pop	r7
 8e0:	6f 90       	pop	r6
 8e2:	08 95       	ret

000008e4 <__subsf3>:
 8e4:	50 58       	subi	r21, 0x80	; 128

000008e6 <__addsf3>:
 8e6:	bb 27       	eor	r27, r27
 8e8:	aa 27       	eor	r26, r26
 8ea:	0e 94 8a 04 	call	0x914	; 0x914 <__addsf3x>
 8ee:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_round>
 8f2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_pscA>
 8f6:	38 f0       	brcs	.+14     	; 0x906 <__stack+0x7>
 8f8:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_pscB>
 8fc:	20 f0       	brcs	.+8      	; 0x906 <__stack+0x7>
 8fe:	39 f4       	brne	.+14     	; 0x90e <__stack+0xf>
 900:	9f 3f       	cpi	r25, 0xFF	; 255
 902:	19 f4       	brne	.+6      	; 0x90a <__stack+0xb>
 904:	26 f4       	brtc	.+8      	; 0x90e <__stack+0xf>
 906:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__fp_nan>
 90a:	0e f4       	brtc	.+2      	; 0x90e <__stack+0xf>
 90c:	e0 95       	com	r30
 90e:	e7 fb       	bst	r30, 7
 910:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_inf>

00000914 <__addsf3x>:
 914:	e9 2f       	mov	r30, r25
 916:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fp_split3>
 91a:	58 f3       	brcs	.-42     	; 0x8f2 <__addsf3+0xc>
 91c:	ba 17       	cp	r27, r26
 91e:	62 07       	cpc	r22, r18
 920:	73 07       	cpc	r23, r19
 922:	84 07       	cpc	r24, r20
 924:	95 07       	cpc	r25, r21
 926:	20 f0       	brcs	.+8      	; 0x930 <__addsf3x+0x1c>
 928:	79 f4       	brne	.+30     	; 0x948 <__addsf3x+0x34>
 92a:	a6 f5       	brtc	.+104    	; 0x994 <__addsf3x+0x80>
 92c:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__fp_zero>
 930:	0e f4       	brtc	.+2      	; 0x934 <__addsf3x+0x20>
 932:	e0 95       	com	r30
 934:	0b 2e       	mov	r0, r27
 936:	ba 2f       	mov	r27, r26
 938:	a0 2d       	mov	r26, r0
 93a:	0b 01       	movw	r0, r22
 93c:	b9 01       	movw	r22, r18
 93e:	90 01       	movw	r18, r0
 940:	0c 01       	movw	r0, r24
 942:	ca 01       	movw	r24, r20
 944:	a0 01       	movw	r20, r0
 946:	11 24       	eor	r1, r1
 948:	ff 27       	eor	r31, r31
 94a:	59 1b       	sub	r21, r25
 94c:	99 f0       	breq	.+38     	; 0x974 <__addsf3x+0x60>
 94e:	59 3f       	cpi	r21, 0xF9	; 249
 950:	50 f4       	brcc	.+20     	; 0x966 <__addsf3x+0x52>
 952:	50 3e       	cpi	r21, 0xE0	; 224
 954:	68 f1       	brcs	.+90     	; 0x9b0 <__addsf3x+0x9c>
 956:	1a 16       	cp	r1, r26
 958:	f0 40       	sbci	r31, 0x00	; 0
 95a:	a2 2f       	mov	r26, r18
 95c:	23 2f       	mov	r18, r19
 95e:	34 2f       	mov	r19, r20
 960:	44 27       	eor	r20, r20
 962:	58 5f       	subi	r21, 0xF8	; 248
 964:	f3 cf       	rjmp	.-26     	; 0x94c <__addsf3x+0x38>
 966:	46 95       	lsr	r20
 968:	37 95       	ror	r19
 96a:	27 95       	ror	r18
 96c:	a7 95       	ror	r26
 96e:	f0 40       	sbci	r31, 0x00	; 0
 970:	53 95       	inc	r21
 972:	c9 f7       	brne	.-14     	; 0x966 <__addsf3x+0x52>
 974:	7e f4       	brtc	.+30     	; 0x994 <__addsf3x+0x80>
 976:	1f 16       	cp	r1, r31
 978:	ba 0b       	sbc	r27, r26
 97a:	62 0b       	sbc	r22, r18
 97c:	73 0b       	sbc	r23, r19
 97e:	84 0b       	sbc	r24, r20
 980:	ba f0       	brmi	.+46     	; 0x9b0 <__addsf3x+0x9c>
 982:	91 50       	subi	r25, 0x01	; 1
 984:	a1 f0       	breq	.+40     	; 0x9ae <__addsf3x+0x9a>
 986:	ff 0f       	add	r31, r31
 988:	bb 1f       	adc	r27, r27
 98a:	66 1f       	adc	r22, r22
 98c:	77 1f       	adc	r23, r23
 98e:	88 1f       	adc	r24, r24
 990:	c2 f7       	brpl	.-16     	; 0x982 <__addsf3x+0x6e>
 992:	0e c0       	rjmp	.+28     	; 0x9b0 <__addsf3x+0x9c>
 994:	ba 0f       	add	r27, r26
 996:	62 1f       	adc	r22, r18
 998:	73 1f       	adc	r23, r19
 99a:	84 1f       	adc	r24, r20
 99c:	48 f4       	brcc	.+18     	; 0x9b0 <__addsf3x+0x9c>
 99e:	87 95       	ror	r24
 9a0:	77 95       	ror	r23
 9a2:	67 95       	ror	r22
 9a4:	b7 95       	ror	r27
 9a6:	f7 95       	ror	r31
 9a8:	9e 3f       	cpi	r25, 0xFE	; 254
 9aa:	08 f0       	brcs	.+2      	; 0x9ae <__addsf3x+0x9a>
 9ac:	b0 cf       	rjmp	.-160    	; 0x90e <__stack+0xf>
 9ae:	93 95       	inc	r25
 9b0:	88 0f       	add	r24, r24
 9b2:	08 f0       	brcs	.+2      	; 0x9b6 <__addsf3x+0xa2>
 9b4:	99 27       	eor	r25, r25
 9b6:	ee 0f       	add	r30, r30
 9b8:	97 95       	ror	r25
 9ba:	87 95       	ror	r24
 9bc:	08 95       	ret

000009be <__divsf3>:
 9be:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__divsf3x>
 9c2:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_round>
 9c6:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_pscB>
 9ca:	58 f0       	brcs	.+22     	; 0x9e2 <__divsf3+0x24>
 9cc:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_pscA>
 9d0:	40 f0       	brcs	.+16     	; 0x9e2 <__divsf3+0x24>
 9d2:	29 f4       	brne	.+10     	; 0x9de <__divsf3+0x20>
 9d4:	5f 3f       	cpi	r21, 0xFF	; 255
 9d6:	29 f0       	breq	.+10     	; 0x9e2 <__divsf3+0x24>
 9d8:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_inf>
 9dc:	51 11       	cpse	r21, r1
 9de:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_szero>
 9e2:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__fp_nan>

000009e6 <__divsf3x>:
 9e6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fp_split3>
 9ea:	68 f3       	brcs	.-38     	; 0x9c6 <__divsf3+0x8>

000009ec <__divsf3_pse>:
 9ec:	99 23       	and	r25, r25
 9ee:	b1 f3       	breq	.-20     	; 0x9dc <__divsf3+0x1e>
 9f0:	55 23       	and	r21, r21
 9f2:	91 f3       	breq	.-28     	; 0x9d8 <__divsf3+0x1a>
 9f4:	95 1b       	sub	r25, r21
 9f6:	55 0b       	sbc	r21, r21
 9f8:	bb 27       	eor	r27, r27
 9fa:	aa 27       	eor	r26, r26
 9fc:	62 17       	cp	r22, r18
 9fe:	73 07       	cpc	r23, r19
 a00:	84 07       	cpc	r24, r20
 a02:	38 f0       	brcs	.+14     	; 0xa12 <__divsf3_pse+0x26>
 a04:	9f 5f       	subi	r25, 0xFF	; 255
 a06:	5f 4f       	sbci	r21, 0xFF	; 255
 a08:	22 0f       	add	r18, r18
 a0a:	33 1f       	adc	r19, r19
 a0c:	44 1f       	adc	r20, r20
 a0e:	aa 1f       	adc	r26, r26
 a10:	a9 f3       	breq	.-22     	; 0x9fc <__divsf3_pse+0x10>
 a12:	35 d0       	rcall	.+106    	; 0xa7e <__divsf3_pse+0x92>
 a14:	0e 2e       	mov	r0, r30
 a16:	3a f0       	brmi	.+14     	; 0xa26 <__divsf3_pse+0x3a>
 a18:	e0 e8       	ldi	r30, 0x80	; 128
 a1a:	32 d0       	rcall	.+100    	; 0xa80 <__divsf3_pse+0x94>
 a1c:	91 50       	subi	r25, 0x01	; 1
 a1e:	50 40       	sbci	r21, 0x00	; 0
 a20:	e6 95       	lsr	r30
 a22:	00 1c       	adc	r0, r0
 a24:	ca f7       	brpl	.-14     	; 0xa18 <__divsf3_pse+0x2c>
 a26:	2b d0       	rcall	.+86     	; 0xa7e <__divsf3_pse+0x92>
 a28:	fe 2f       	mov	r31, r30
 a2a:	29 d0       	rcall	.+82     	; 0xa7e <__divsf3_pse+0x92>
 a2c:	66 0f       	add	r22, r22
 a2e:	77 1f       	adc	r23, r23
 a30:	88 1f       	adc	r24, r24
 a32:	bb 1f       	adc	r27, r27
 a34:	26 17       	cp	r18, r22
 a36:	37 07       	cpc	r19, r23
 a38:	48 07       	cpc	r20, r24
 a3a:	ab 07       	cpc	r26, r27
 a3c:	b0 e8       	ldi	r27, 0x80	; 128
 a3e:	09 f0       	breq	.+2      	; 0xa42 <__divsf3_pse+0x56>
 a40:	bb 0b       	sbc	r27, r27
 a42:	80 2d       	mov	r24, r0
 a44:	bf 01       	movw	r22, r30
 a46:	ff 27       	eor	r31, r31
 a48:	93 58       	subi	r25, 0x83	; 131
 a4a:	5f 4f       	sbci	r21, 0xFF	; 255
 a4c:	3a f0       	brmi	.+14     	; 0xa5c <__divsf3_pse+0x70>
 a4e:	9e 3f       	cpi	r25, 0xFE	; 254
 a50:	51 05       	cpc	r21, r1
 a52:	78 f0       	brcs	.+30     	; 0xa72 <__divsf3_pse+0x86>
 a54:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_inf>
 a58:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_szero>
 a5c:	5f 3f       	cpi	r21, 0xFF	; 255
 a5e:	e4 f3       	brlt	.-8      	; 0xa58 <__divsf3_pse+0x6c>
 a60:	98 3e       	cpi	r25, 0xE8	; 232
 a62:	d4 f3       	brlt	.-12     	; 0xa58 <__divsf3_pse+0x6c>
 a64:	86 95       	lsr	r24
 a66:	77 95       	ror	r23
 a68:	67 95       	ror	r22
 a6a:	b7 95       	ror	r27
 a6c:	f7 95       	ror	r31
 a6e:	9f 5f       	subi	r25, 0xFF	; 255
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__divsf3_pse+0x78>
 a72:	88 0f       	add	r24, r24
 a74:	91 1d       	adc	r25, r1
 a76:	96 95       	lsr	r25
 a78:	87 95       	ror	r24
 a7a:	97 f9       	bld	r25, 7
 a7c:	08 95       	ret
 a7e:	e1 e0       	ldi	r30, 0x01	; 1
 a80:	66 0f       	add	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	bb 1f       	adc	r27, r27
 a88:	62 17       	cp	r22, r18
 a8a:	73 07       	cpc	r23, r19
 a8c:	84 07       	cpc	r24, r20
 a8e:	ba 07       	cpc	r27, r26
 a90:	20 f0       	brcs	.+8      	; 0xa9a <__divsf3_pse+0xae>
 a92:	62 1b       	sub	r22, r18
 a94:	73 0b       	sbc	r23, r19
 a96:	84 0b       	sbc	r24, r20
 a98:	ba 0b       	sbc	r27, r26
 a9a:	ee 1f       	adc	r30, r30
 a9c:	88 f7       	brcc	.-30     	; 0xa80 <__divsf3_pse+0x94>
 a9e:	e0 95       	com	r30
 aa0:	08 95       	ret

00000aa2 <__fixsfsi>:
 aa2:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixunssfsi>
 aa6:	68 94       	set
 aa8:	b1 11       	cpse	r27, r1
 aaa:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_szero>
 aae:	08 95       	ret

00000ab0 <__fixunssfsi>:
 ab0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__fp_splitA>
 ab4:	88 f0       	brcs	.+34     	; 0xad8 <__fixunssfsi+0x28>
 ab6:	9f 57       	subi	r25, 0x7F	; 127
 ab8:	98 f0       	brcs	.+38     	; 0xae0 <__fixunssfsi+0x30>
 aba:	b9 2f       	mov	r27, r25
 abc:	99 27       	eor	r25, r25
 abe:	b7 51       	subi	r27, 0x17	; 23
 ac0:	b0 f0       	brcs	.+44     	; 0xaee <__fixunssfsi+0x3e>
 ac2:	e1 f0       	breq	.+56     	; 0xafc <__fixunssfsi+0x4c>
 ac4:	66 0f       	add	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	99 1f       	adc	r25, r25
 acc:	1a f0       	brmi	.+6      	; 0xad4 <__fixunssfsi+0x24>
 ace:	ba 95       	dec	r27
 ad0:	c9 f7       	brne	.-14     	; 0xac4 <__fixunssfsi+0x14>
 ad2:	14 c0       	rjmp	.+40     	; 0xafc <__fixunssfsi+0x4c>
 ad4:	b1 30       	cpi	r27, 0x01	; 1
 ad6:	91 f0       	breq	.+36     	; 0xafc <__fixunssfsi+0x4c>
 ad8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_zero>
 adc:	b1 e0       	ldi	r27, 0x01	; 1
 ade:	08 95       	ret
 ae0:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__fp_zero>
 ae4:	67 2f       	mov	r22, r23
 ae6:	78 2f       	mov	r23, r24
 ae8:	88 27       	eor	r24, r24
 aea:	b8 5f       	subi	r27, 0xF8	; 248
 aec:	39 f0       	breq	.+14     	; 0xafc <__fixunssfsi+0x4c>
 aee:	b9 3f       	cpi	r27, 0xF9	; 249
 af0:	cc f3       	brlt	.-14     	; 0xae4 <__fixunssfsi+0x34>
 af2:	86 95       	lsr	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	b3 95       	inc	r27
 afa:	d9 f7       	brne	.-10     	; 0xaf2 <__fixunssfsi+0x42>
 afc:	3e f4       	brtc	.+14     	; 0xb0c <__fixunssfsi+0x5c>
 afe:	90 95       	com	r25
 b00:	80 95       	com	r24
 b02:	70 95       	com	r23
 b04:	61 95       	neg	r22
 b06:	7f 4f       	sbci	r23, 0xFF	; 255
 b08:	8f 4f       	sbci	r24, 0xFF	; 255
 b0a:	9f 4f       	sbci	r25, 0xFF	; 255
 b0c:	08 95       	ret

00000b0e <__floatunsisf>:
 b0e:	e8 94       	clt
 b10:	09 c0       	rjmp	.+18     	; 0xb24 <__floatsisf+0x12>

00000b12 <__floatsisf>:
 b12:	97 fb       	bst	r25, 7
 b14:	3e f4       	brtc	.+14     	; 0xb24 <__floatsisf+0x12>
 b16:	90 95       	com	r25
 b18:	80 95       	com	r24
 b1a:	70 95       	com	r23
 b1c:	61 95       	neg	r22
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	99 23       	and	r25, r25
 b26:	a9 f0       	breq	.+42     	; 0xb52 <__floatsisf+0x40>
 b28:	f9 2f       	mov	r31, r25
 b2a:	96 e9       	ldi	r25, 0x96	; 150
 b2c:	bb 27       	eor	r27, r27
 b2e:	93 95       	inc	r25
 b30:	f6 95       	lsr	r31
 b32:	87 95       	ror	r24
 b34:	77 95       	ror	r23
 b36:	67 95       	ror	r22
 b38:	b7 95       	ror	r27
 b3a:	f1 11       	cpse	r31, r1
 b3c:	f8 cf       	rjmp	.-16     	; 0xb2e <__floatsisf+0x1c>
 b3e:	fa f4       	brpl	.+62     	; 0xb7e <__floatsisf+0x6c>
 b40:	bb 0f       	add	r27, r27
 b42:	11 f4       	brne	.+4      	; 0xb48 <__floatsisf+0x36>
 b44:	60 ff       	sbrs	r22, 0
 b46:	1b c0       	rjmp	.+54     	; 0xb7e <__floatsisf+0x6c>
 b48:	6f 5f       	subi	r22, 0xFF	; 255
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	16 c0       	rjmp	.+44     	; 0xb7e <__floatsisf+0x6c>
 b52:	88 23       	and	r24, r24
 b54:	11 f0       	breq	.+4      	; 0xb5a <__floatsisf+0x48>
 b56:	96 e9       	ldi	r25, 0x96	; 150
 b58:	11 c0       	rjmp	.+34     	; 0xb7c <__floatsisf+0x6a>
 b5a:	77 23       	and	r23, r23
 b5c:	21 f0       	breq	.+8      	; 0xb66 <__floatsisf+0x54>
 b5e:	9e e8       	ldi	r25, 0x8E	; 142
 b60:	87 2f       	mov	r24, r23
 b62:	76 2f       	mov	r23, r22
 b64:	05 c0       	rjmp	.+10     	; 0xb70 <__floatsisf+0x5e>
 b66:	66 23       	and	r22, r22
 b68:	71 f0       	breq	.+28     	; 0xb86 <__floatsisf+0x74>
 b6a:	96 e8       	ldi	r25, 0x86	; 134
 b6c:	86 2f       	mov	r24, r22
 b6e:	70 e0       	ldi	r23, 0x00	; 0
 b70:	60 e0       	ldi	r22, 0x00	; 0
 b72:	2a f0       	brmi	.+10     	; 0xb7e <__floatsisf+0x6c>
 b74:	9a 95       	dec	r25
 b76:	66 0f       	add	r22, r22
 b78:	77 1f       	adc	r23, r23
 b7a:	88 1f       	adc	r24, r24
 b7c:	da f7       	brpl	.-10     	; 0xb74 <__floatsisf+0x62>
 b7e:	88 0f       	add	r24, r24
 b80:	96 95       	lsr	r25
 b82:	87 95       	ror	r24
 b84:	97 f9       	bld	r25, 7
 b86:	08 95       	ret

00000b88 <__fp_inf>:
 b88:	97 f9       	bld	r25, 7
 b8a:	9f 67       	ori	r25, 0x7F	; 127
 b8c:	80 e8       	ldi	r24, 0x80	; 128
 b8e:	70 e0       	ldi	r23, 0x00	; 0
 b90:	60 e0       	ldi	r22, 0x00	; 0
 b92:	08 95       	ret

00000b94 <__fp_nan>:
 b94:	9f ef       	ldi	r25, 0xFF	; 255
 b96:	80 ec       	ldi	r24, 0xC0	; 192
 b98:	08 95       	ret

00000b9a <__fp_pscA>:
 b9a:	00 24       	eor	r0, r0
 b9c:	0a 94       	dec	r0
 b9e:	16 16       	cp	r1, r22
 ba0:	17 06       	cpc	r1, r23
 ba2:	18 06       	cpc	r1, r24
 ba4:	09 06       	cpc	r0, r25
 ba6:	08 95       	ret

00000ba8 <__fp_pscB>:
 ba8:	00 24       	eor	r0, r0
 baa:	0a 94       	dec	r0
 bac:	12 16       	cp	r1, r18
 bae:	13 06       	cpc	r1, r19
 bb0:	14 06       	cpc	r1, r20
 bb2:	05 06       	cpc	r0, r21
 bb4:	08 95       	ret

00000bb6 <__fp_round>:
 bb6:	09 2e       	mov	r0, r25
 bb8:	03 94       	inc	r0
 bba:	00 0c       	add	r0, r0
 bbc:	11 f4       	brne	.+4      	; 0xbc2 <__fp_round+0xc>
 bbe:	88 23       	and	r24, r24
 bc0:	52 f0       	brmi	.+20     	; 0xbd6 <__fp_round+0x20>
 bc2:	bb 0f       	add	r27, r27
 bc4:	40 f4       	brcc	.+16     	; 0xbd6 <__fp_round+0x20>
 bc6:	bf 2b       	or	r27, r31
 bc8:	11 f4       	brne	.+4      	; 0xbce <__fp_round+0x18>
 bca:	60 ff       	sbrs	r22, 0
 bcc:	04 c0       	rjmp	.+8      	; 0xbd6 <__fp_round+0x20>
 bce:	6f 5f       	subi	r22, 0xFF	; 255
 bd0:	7f 4f       	sbci	r23, 0xFF	; 255
 bd2:	8f 4f       	sbci	r24, 0xFF	; 255
 bd4:	9f 4f       	sbci	r25, 0xFF	; 255
 bd6:	08 95       	ret

00000bd8 <__fp_split3>:
 bd8:	57 fd       	sbrc	r21, 7
 bda:	90 58       	subi	r25, 0x80	; 128
 bdc:	44 0f       	add	r20, r20
 bde:	55 1f       	adc	r21, r21
 be0:	59 f0       	breq	.+22     	; 0xbf8 <__fp_splitA+0x10>
 be2:	5f 3f       	cpi	r21, 0xFF	; 255
 be4:	71 f0       	breq	.+28     	; 0xc02 <__fp_splitA+0x1a>
 be6:	47 95       	ror	r20

00000be8 <__fp_splitA>:
 be8:	88 0f       	add	r24, r24
 bea:	97 fb       	bst	r25, 7
 bec:	99 1f       	adc	r25, r25
 bee:	61 f0       	breq	.+24     	; 0xc08 <__fp_splitA+0x20>
 bf0:	9f 3f       	cpi	r25, 0xFF	; 255
 bf2:	79 f0       	breq	.+30     	; 0xc12 <__fp_splitA+0x2a>
 bf4:	87 95       	ror	r24
 bf6:	08 95       	ret
 bf8:	12 16       	cp	r1, r18
 bfa:	13 06       	cpc	r1, r19
 bfc:	14 06       	cpc	r1, r20
 bfe:	55 1f       	adc	r21, r21
 c00:	f2 cf       	rjmp	.-28     	; 0xbe6 <__fp_split3+0xe>
 c02:	46 95       	lsr	r20
 c04:	f1 df       	rcall	.-30     	; 0xbe8 <__fp_splitA>
 c06:	08 c0       	rjmp	.+16     	; 0xc18 <__fp_splitA+0x30>
 c08:	16 16       	cp	r1, r22
 c0a:	17 06       	cpc	r1, r23
 c0c:	18 06       	cpc	r1, r24
 c0e:	99 1f       	adc	r25, r25
 c10:	f1 cf       	rjmp	.-30     	; 0xbf4 <__fp_splitA+0xc>
 c12:	86 95       	lsr	r24
 c14:	71 05       	cpc	r23, r1
 c16:	61 05       	cpc	r22, r1
 c18:	08 94       	sec
 c1a:	08 95       	ret

00000c1c <__fp_zero>:
 c1c:	e8 94       	clt

00000c1e <__fp_szero>:
 c1e:	bb 27       	eor	r27, r27
 c20:	66 27       	eor	r22, r22
 c22:	77 27       	eor	r23, r23
 c24:	cb 01       	movw	r24, r22
 c26:	97 f9       	bld	r25, 7
 c28:	08 95       	ret

00000c2a <__gesf2>:
 c2a:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fp_cmp>
 c2e:	08 f4       	brcc	.+2      	; 0xc32 <__gesf2+0x8>
 c30:	8f ef       	ldi	r24, 0xFF	; 255
 c32:	08 95       	ret

00000c34 <__mulsf3>:
 c34:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__mulsf3x>
 c38:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_round>
 c3c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_pscA>
 c40:	38 f0       	brcs	.+14     	; 0xc50 <__mulsf3+0x1c>
 c42:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_pscB>
 c46:	20 f0       	brcs	.+8      	; 0xc50 <__mulsf3+0x1c>
 c48:	95 23       	and	r25, r21
 c4a:	11 f0       	breq	.+4      	; 0xc50 <__mulsf3+0x1c>
 c4c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_inf>
 c50:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__fp_nan>
 c54:	11 24       	eor	r1, r1
 c56:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_szero>

00000c5a <__mulsf3x>:
 c5a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fp_split3>
 c5e:	70 f3       	brcs	.-36     	; 0xc3c <__mulsf3+0x8>

00000c60 <__mulsf3_pse>:
 c60:	95 9f       	mul	r25, r21
 c62:	c1 f3       	breq	.-16     	; 0xc54 <__mulsf3+0x20>
 c64:	95 0f       	add	r25, r21
 c66:	50 e0       	ldi	r21, 0x00	; 0
 c68:	55 1f       	adc	r21, r21
 c6a:	62 9f       	mul	r22, r18
 c6c:	f0 01       	movw	r30, r0
 c6e:	72 9f       	mul	r23, r18
 c70:	bb 27       	eor	r27, r27
 c72:	f0 0d       	add	r31, r0
 c74:	b1 1d       	adc	r27, r1
 c76:	63 9f       	mul	r22, r19
 c78:	aa 27       	eor	r26, r26
 c7a:	f0 0d       	add	r31, r0
 c7c:	b1 1d       	adc	r27, r1
 c7e:	aa 1f       	adc	r26, r26
 c80:	64 9f       	mul	r22, r20
 c82:	66 27       	eor	r22, r22
 c84:	b0 0d       	add	r27, r0
 c86:	a1 1d       	adc	r26, r1
 c88:	66 1f       	adc	r22, r22
 c8a:	82 9f       	mul	r24, r18
 c8c:	22 27       	eor	r18, r18
 c8e:	b0 0d       	add	r27, r0
 c90:	a1 1d       	adc	r26, r1
 c92:	62 1f       	adc	r22, r18
 c94:	73 9f       	mul	r23, r19
 c96:	b0 0d       	add	r27, r0
 c98:	a1 1d       	adc	r26, r1
 c9a:	62 1f       	adc	r22, r18
 c9c:	83 9f       	mul	r24, r19
 c9e:	a0 0d       	add	r26, r0
 ca0:	61 1d       	adc	r22, r1
 ca2:	22 1f       	adc	r18, r18
 ca4:	74 9f       	mul	r23, r20
 ca6:	33 27       	eor	r19, r19
 ca8:	a0 0d       	add	r26, r0
 caa:	61 1d       	adc	r22, r1
 cac:	23 1f       	adc	r18, r19
 cae:	84 9f       	mul	r24, r20
 cb0:	60 0d       	add	r22, r0
 cb2:	21 1d       	adc	r18, r1
 cb4:	82 2f       	mov	r24, r18
 cb6:	76 2f       	mov	r23, r22
 cb8:	6a 2f       	mov	r22, r26
 cba:	11 24       	eor	r1, r1
 cbc:	9f 57       	subi	r25, 0x7F	; 127
 cbe:	50 40       	sbci	r21, 0x00	; 0
 cc0:	9a f0       	brmi	.+38     	; 0xce8 <__mulsf3_pse+0x88>
 cc2:	f1 f0       	breq	.+60     	; 0xd00 <__mulsf3_pse+0xa0>
 cc4:	88 23       	and	r24, r24
 cc6:	4a f0       	brmi	.+18     	; 0xcda <__mulsf3_pse+0x7a>
 cc8:	ee 0f       	add	r30, r30
 cca:	ff 1f       	adc	r31, r31
 ccc:	bb 1f       	adc	r27, r27
 cce:	66 1f       	adc	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	88 1f       	adc	r24, r24
 cd4:	91 50       	subi	r25, 0x01	; 1
 cd6:	50 40       	sbci	r21, 0x00	; 0
 cd8:	a9 f7       	brne	.-22     	; 0xcc4 <__mulsf3_pse+0x64>
 cda:	9e 3f       	cpi	r25, 0xFE	; 254
 cdc:	51 05       	cpc	r21, r1
 cde:	80 f0       	brcs	.+32     	; 0xd00 <__mulsf3_pse+0xa0>
 ce0:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_inf>
 ce4:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_szero>
 ce8:	5f 3f       	cpi	r21, 0xFF	; 255
 cea:	e4 f3       	brlt	.-8      	; 0xce4 <__mulsf3_pse+0x84>
 cec:	98 3e       	cpi	r25, 0xE8	; 232
 cee:	d4 f3       	brlt	.-12     	; 0xce4 <__mulsf3_pse+0x84>
 cf0:	86 95       	lsr	r24
 cf2:	77 95       	ror	r23
 cf4:	67 95       	ror	r22
 cf6:	b7 95       	ror	r27
 cf8:	f7 95       	ror	r31
 cfa:	e7 95       	ror	r30
 cfc:	9f 5f       	subi	r25, 0xFF	; 255
 cfe:	c1 f7       	brne	.-16     	; 0xcf0 <__mulsf3_pse+0x90>
 d00:	fe 2b       	or	r31, r30
 d02:	88 0f       	add	r24, r24
 d04:	91 1d       	adc	r25, r1
 d06:	96 95       	lsr	r25
 d08:	87 95       	ror	r24
 d0a:	97 f9       	bld	r25, 7
 d0c:	08 95       	ret

00000d0e <__fp_cmp>:
 d0e:	99 0f       	add	r25, r25
 d10:	00 08       	sbc	r0, r0
 d12:	55 0f       	add	r21, r21
 d14:	aa 0b       	sbc	r26, r26
 d16:	e0 e8       	ldi	r30, 0x80	; 128
 d18:	fe ef       	ldi	r31, 0xFE	; 254
 d1a:	16 16       	cp	r1, r22
 d1c:	17 06       	cpc	r1, r23
 d1e:	e8 07       	cpc	r30, r24
 d20:	f9 07       	cpc	r31, r25
 d22:	c0 f0       	brcs	.+48     	; 0xd54 <__fp_cmp+0x46>
 d24:	12 16       	cp	r1, r18
 d26:	13 06       	cpc	r1, r19
 d28:	e4 07       	cpc	r30, r20
 d2a:	f5 07       	cpc	r31, r21
 d2c:	98 f0       	brcs	.+38     	; 0xd54 <__fp_cmp+0x46>
 d2e:	62 1b       	sub	r22, r18
 d30:	73 0b       	sbc	r23, r19
 d32:	84 0b       	sbc	r24, r20
 d34:	95 0b       	sbc	r25, r21
 d36:	39 f4       	brne	.+14     	; 0xd46 <__fp_cmp+0x38>
 d38:	0a 26       	eor	r0, r26
 d3a:	61 f0       	breq	.+24     	; 0xd54 <__fp_cmp+0x46>
 d3c:	23 2b       	or	r18, r19
 d3e:	24 2b       	or	r18, r20
 d40:	25 2b       	or	r18, r21
 d42:	21 f4       	brne	.+8      	; 0xd4c <__fp_cmp+0x3e>
 d44:	08 95       	ret
 d46:	0a 26       	eor	r0, r26
 d48:	09 f4       	brne	.+2      	; 0xd4c <__fp_cmp+0x3e>
 d4a:	a1 40       	sbci	r26, 0x01	; 1
 d4c:	a6 95       	lsr	r26
 d4e:	8f ef       	ldi	r24, 0xFF	; 255
 d50:	81 1d       	adc	r24, r1
 d52:	81 1d       	adc	r24, r1
 d54:	08 95       	ret

00000d56 <__divmodhi4>:
 d56:	97 fb       	bst	r25, 7
 d58:	07 2e       	mov	r0, r23
 d5a:	16 f4       	brtc	.+4      	; 0xd60 <__divmodhi4+0xa>
 d5c:	00 94       	com	r0
 d5e:	07 d0       	rcall	.+14     	; 0xd6e <__divmodhi4_neg1>
 d60:	77 fd       	sbrc	r23, 7
 d62:	09 d0       	rcall	.+18     	; 0xd76 <__divmodhi4_neg2>
 d64:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__udivmodhi4>
 d68:	07 fc       	sbrc	r0, 7
 d6a:	05 d0       	rcall	.+10     	; 0xd76 <__divmodhi4_neg2>
 d6c:	3e f4       	brtc	.+14     	; 0xd7c <__divmodhi4_exit>

00000d6e <__divmodhi4_neg1>:
 d6e:	90 95       	com	r25
 d70:	81 95       	neg	r24
 d72:	9f 4f       	sbci	r25, 0xFF	; 255
 d74:	08 95       	ret

00000d76 <__divmodhi4_neg2>:
 d76:	70 95       	com	r23
 d78:	61 95       	neg	r22
 d7a:	7f 4f       	sbci	r23, 0xFF	; 255

00000d7c <__divmodhi4_exit>:
 d7c:	08 95       	ret

00000d7e <__udivmodhi4>:
 d7e:	aa 1b       	sub	r26, r26
 d80:	bb 1b       	sub	r27, r27
 d82:	51 e1       	ldi	r21, 0x11	; 17
 d84:	07 c0       	rjmp	.+14     	; 0xd94 <__udivmodhi4_ep>

00000d86 <__udivmodhi4_loop>:
 d86:	aa 1f       	adc	r26, r26
 d88:	bb 1f       	adc	r27, r27
 d8a:	a6 17       	cp	r26, r22
 d8c:	b7 07       	cpc	r27, r23
 d8e:	10 f0       	brcs	.+4      	; 0xd94 <__udivmodhi4_ep>
 d90:	a6 1b       	sub	r26, r22
 d92:	b7 0b       	sbc	r27, r23

00000d94 <__udivmodhi4_ep>:
 d94:	88 1f       	adc	r24, r24
 d96:	99 1f       	adc	r25, r25
 d98:	5a 95       	dec	r21
 d9a:	a9 f7       	brne	.-22     	; 0xd86 <__udivmodhi4_loop>
 d9c:	80 95       	com	r24
 d9e:	90 95       	com	r25
 da0:	bc 01       	movw	r22, r24
 da2:	cd 01       	movw	r24, r26
 da4:	08 95       	ret

00000da6 <fwrite>:
 da6:	a0 e0       	ldi	r26, 0x00	; 0
 da8:	b0 e0       	ldi	r27, 0x00	; 0
 daa:	e9 ed       	ldi	r30, 0xD9	; 217
 dac:	f6 e0       	ldi	r31, 0x06	; 6
 dae:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__prologue_saves__+0xc>
 db2:	5b 01       	movw	r10, r22
 db4:	4a 01       	movw	r8, r20
 db6:	79 01       	movw	r14, r18
 db8:	d9 01       	movw	r26, r18
 dba:	13 96       	adiw	r26, 0x03	; 3
 dbc:	2c 91       	ld	r18, X
 dbe:	21 ff       	sbrs	r18, 1
 dc0:	1d c0       	rjmp	.+58     	; 0xdfc <fwrite+0x56>
 dc2:	c0 e0       	ldi	r28, 0x00	; 0
 dc4:	d0 e0       	ldi	r29, 0x00	; 0
 dc6:	c8 15       	cp	r28, r8
 dc8:	d9 05       	cpc	r29, r9
 dca:	d9 f0       	breq	.+54     	; 0xe02 <fwrite+0x5c>
 dcc:	8c 01       	movw	r16, r24
 dce:	6c 01       	movw	r12, r24
 dd0:	ca 0c       	add	r12, r10
 dd2:	db 1c       	adc	r13, r11
 dd4:	c8 01       	movw	r24, r16
 dd6:	0c 15       	cp	r16, r12
 dd8:	1d 05       	cpc	r17, r13
 dda:	71 f0       	breq	.+28     	; 0xdf8 <fwrite+0x52>
 ddc:	0f 5f       	subi	r16, 0xFF	; 255
 dde:	1f 4f       	sbci	r17, 0xFF	; 255
 de0:	d7 01       	movw	r26, r14
 de2:	18 96       	adiw	r26, 0x08	; 8
 de4:	ed 91       	ld	r30, X+
 de6:	fc 91       	ld	r31, X
 de8:	19 97       	sbiw	r26, 0x09	; 9
 dea:	b7 01       	movw	r22, r14
 dec:	dc 01       	movw	r26, r24
 dee:	8c 91       	ld	r24, X
 df0:	09 95       	icall
 df2:	89 2b       	or	r24, r25
 df4:	79 f3       	breq	.-34     	; 0xdd4 <fwrite+0x2e>
 df6:	05 c0       	rjmp	.+10     	; 0xe02 <fwrite+0x5c>
 df8:	21 96       	adiw	r28, 0x01	; 1
 dfa:	e5 cf       	rjmp	.-54     	; 0xdc6 <fwrite+0x20>
 dfc:	80 e0       	ldi	r24, 0x00	; 0
 dfe:	90 e0       	ldi	r25, 0x00	; 0
 e00:	01 c0       	rjmp	.+2      	; 0xe04 <fwrite+0x5e>
 e02:	ce 01       	movw	r24, r28
 e04:	cd b7       	in	r28, 0x3d	; 61
 e06:	de b7       	in	r29, 0x3e	; 62
 e08:	ec e0       	ldi	r30, 0x0C	; 12
 e0a:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__epilogue_restores__+0xc>

00000e0e <__prologue_saves__>:
 e0e:	2f 92       	push	r2
 e10:	3f 92       	push	r3
 e12:	4f 92       	push	r4
 e14:	5f 92       	push	r5
 e16:	6f 92       	push	r6
 e18:	7f 92       	push	r7
 e1a:	8f 92       	push	r8
 e1c:	9f 92       	push	r9
 e1e:	af 92       	push	r10
 e20:	bf 92       	push	r11
 e22:	cf 92       	push	r12
 e24:	df 92       	push	r13
 e26:	ef 92       	push	r14
 e28:	ff 92       	push	r15
 e2a:	0f 93       	push	r16
 e2c:	1f 93       	push	r17
 e2e:	cf 93       	push	r28
 e30:	df 93       	push	r29
 e32:	cd b7       	in	r28, 0x3d	; 61
 e34:	de b7       	in	r29, 0x3e	; 62
 e36:	ca 1b       	sub	r28, r26
 e38:	db 0b       	sbc	r29, r27
 e3a:	0f b6       	in	r0, 0x3f	; 63
 e3c:	f8 94       	cli
 e3e:	de bf       	out	0x3e, r29	; 62
 e40:	0f be       	out	0x3f, r0	; 63
 e42:	cd bf       	out	0x3d, r28	; 61
 e44:	09 94       	ijmp

00000e46 <__epilogue_restores__>:
 e46:	2a 88       	ldd	r2, Y+18	; 0x12
 e48:	39 88       	ldd	r3, Y+17	; 0x11
 e4a:	48 88       	ldd	r4, Y+16	; 0x10
 e4c:	5f 84       	ldd	r5, Y+15	; 0x0f
 e4e:	6e 84       	ldd	r6, Y+14	; 0x0e
 e50:	7d 84       	ldd	r7, Y+13	; 0x0d
 e52:	8c 84       	ldd	r8, Y+12	; 0x0c
 e54:	9b 84       	ldd	r9, Y+11	; 0x0b
 e56:	aa 84       	ldd	r10, Y+10	; 0x0a
 e58:	b9 84       	ldd	r11, Y+9	; 0x09
 e5a:	c8 84       	ldd	r12, Y+8	; 0x08
 e5c:	df 80       	ldd	r13, Y+7	; 0x07
 e5e:	ee 80       	ldd	r14, Y+6	; 0x06
 e60:	fd 80       	ldd	r15, Y+5	; 0x05
 e62:	0c 81       	ldd	r16, Y+4	; 0x04
 e64:	1b 81       	ldd	r17, Y+3	; 0x03
 e66:	aa 81       	ldd	r26, Y+2	; 0x02
 e68:	b9 81       	ldd	r27, Y+1	; 0x01
 e6a:	ce 0f       	add	r28, r30
 e6c:	d1 1d       	adc	r29, r1
 e6e:	0f b6       	in	r0, 0x3f	; 63
 e70:	f8 94       	cli
 e72:	de bf       	out	0x3e, r29	; 62
 e74:	0f be       	out	0x3f, r0	; 63
 e76:	cd bf       	out	0x3d, r28	; 61
 e78:	ed 01       	movw	r28, r26
 e7a:	08 95       	ret

00000e7c <_exit>:
 e7c:	f8 94       	cli

00000e7e <__stop_program>:
 e7e:	ff cf       	rjmp	.-2      	; 0xe7e <__stop_program>
