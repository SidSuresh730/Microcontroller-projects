
Atmega328PB_TestEnv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  0000166a  000016fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000166a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a5  008001ba  008001ba  000017b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015b1  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da3  00000000  00000000  00002ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a07  00000000  00000000  00003c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000046a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000673  00000000  00000000  000049c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a72  00000000  00000000  0000503b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005aad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_14>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_40>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ea e6       	ldi	r30, 0x6A	; 106
      c8:	f6 e1       	ldi	r31, 0x16	; 22
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	aa 3b       	cpi	r26, 0xBA	; 186
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	aa eb       	ldi	r26, 0xBA	; 186
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	af 35       	cpi	r26, 0x5F	; 95
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <main>
      ea:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR1 = (uint8_t)TWBR_val;
      f2:	88 e4       	ldi	r24, 0x48	; 72
      f4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
      f8:	08 95       	ret

000000fa <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR1 = 0;
      fa:	ec ed       	ldi	r30, 0xDC	; 220
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	10 82       	st	Z, r1
	// transmit START condition
	TWCR1 = (1<<TWINT1) | (1<<TWSTA1) | (1<<TWEN1);
     100:	94 ea       	ldi	r25, 0xA4	; 164
     102:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
     104:	90 81       	ld	r25, Z
     106:	99 23       	and	r25, r25
     108:	ec f7       	brge	.-6      	; 0x104 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR1 & 0xF8) != TW_START){ return 1; }
     10a:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
     10e:	98 7f       	andi	r25, 0xF8	; 248
     110:	98 30       	cpi	r25, 0x08	; 8
     112:	61 f4       	brne	.+24     	; 0x12c <i2c_start+0x32>
	
	// load slave address into data register
	TWDR1 = address;
     114:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	// start transmission of address
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
     118:	84 e8       	ldi	r24, 0x84	; 132
     11a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
     11e:	ec ed       	ldi	r30, 0xDC	; 220
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	88 23       	and	r24, r24
     126:	ec f7       	brge	.-6      	; 0x122 <i2c_start+0x28>
/*	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
*/
	return 0;
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	08 95       	ret
	TWCR1 = (1<<TWINT1) | (1<<TWSTA1) | (1<<TWEN1);
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR1 & 0xF8) != TW_START){ return 1; }
     12c:	81 e0       	ldi	r24, 0x01	; 1
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
*/
	return 0;
}
     12e:	08 95       	ret

00000130 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR1 = data;
     130:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	// start transmission of data
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
     134:	84 e8       	ldi	r24, 0x84	; 132
     136:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
     13a:	ec ed       	ldi	r30, 0xDC	; 220
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	88 23       	and	r24, r24
     142:	ec f7       	brge	.-6      	; 0x13e <i2c_write+0xe>
	
	if( (TWSR1 & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     144:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
     148:	98 7f       	andi	r25, 0xF8	; 248
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	98 32       	cpi	r25, 0x28	; 40
     14e:	09 f4       	brne	.+2      	; 0x152 <i2c_write+0x22>
     150:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     152:	08 95       	ret

00000154 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWEA1);
     154:	84 ec       	ldi	r24, 0xC4	; 196
     156:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
     15a:	ec ed       	ldi	r30, 0xDC	; 220
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	88 23       	and	r24, r24
     162:	ec f7       	brge	.-6      	; 0x15e <i2c_read_ack+0xa>
	// return received data from TWDR
	return TWDR1;
     164:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
     168:	08 95       	ret

0000016a <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
     16a:	84 e8       	ldi	r24, 0x84	; 132
     16c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
     170:	ec ed       	ldi	r30, 0xDC	; 220
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	88 23       	and	r24, r24
     178:	ec f7       	brge	.-6      	; 0x174 <i2c_read_nack+0xa>
	// return received data from TWDR
	return TWDR1;
     17a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
     17e:	08 95       	ret

00000180 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     180:	cf 92       	push	r12
     182:	df 92       	push	r13
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	6b 01       	movw	r12, r22
     190:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     192:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
     196:	f8 2e       	mov	r15, r24
     198:	81 11       	cpse	r24, r1
     19a:	12 c0       	rjmp	.+36     	; 0x1c0 <i2c_transmit+0x40>
	
	for (uint16_t i = 0; i < length; i++)
     19c:	01 15       	cp	r16, r1
     19e:	11 05       	cpc	r17, r1
     1a0:	59 f0       	breq	.+22     	; 0x1b8 <i2c_transmit+0x38>
     1a2:	e6 01       	movw	r28, r12
     1a4:	0c 0d       	add	r16, r12
     1a6:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
     1a8:	89 91       	ld	r24, Y+
     1aa:	0e 94 98 00 	call	0x130	; 0x130 <i2c_write>
     1ae:	81 11       	cpse	r24, r1
     1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <i2c_transmit+0x46>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     1b2:	0c 17       	cp	r16, r28
     1b4:	1d 07       	cpc	r17, r29
     1b6:	c1 f7       	brne	.-16     	; 0x1a8 <i2c_transmit+0x28>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWSTO1);
     1b8:	84 e9       	ldi	r24, 0x94	; 148
     1ba:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
     1be:	05 c0       	rjmp	.+10     	; 0x1ca <i2c_transmit+0x4a>
	return TWDR1;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     1c0:	ff 24       	eor	r15, r15
     1c2:	f3 94       	inc	r15
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <i2c_transmit+0x4a>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     1c6:	ff 24       	eor	r15, r15
     1c8:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
     1ca:	8f 2d       	mov	r24, r15
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	df 90       	pop	r13
     1d8:	cf 90       	pop	r12
     1da:	08 95       	ret

000001dc <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	df 92       	push	r13
     1e2:	ef 92       	push	r14
     1e4:	ff 92       	push	r15
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	5b 01       	movw	r10, r22
     1f0:	7a 01       	movw	r14, r20
	if (i2c_start(address | I2C_READ)) return 1;
     1f2:	81 60       	ori	r24, 0x01	; 1
     1f4:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
     1f8:	d8 2e       	mov	r13, r24
     1fa:	81 11       	cpse	r24, r1
     1fc:	18 c0       	rjmp	.+48     	; 0x22e <i2c_receive+0x52>
	
	for (uint16_t i = 0; i < (length-1); i++)
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	e8 1a       	sub	r14, r24
     202:	f1 08       	sbc	r15, r1
     204:	51 f0       	breq	.+20     	; 0x21a <i2c_receive+0x3e>
     206:	e5 01       	movw	r28, r10
     208:	85 01       	movw	r16, r10
     20a:	0e 0d       	add	r16, r14
     20c:	1f 1d       	adc	r17, r15
	{
		data[i] = i2c_read_ack();
     20e:	0e 94 aa 00 	call	0x154	; 0x154 <i2c_read_ack>
     212:	89 93       	st	Y+, r24

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     214:	0c 17       	cp	r16, r28
     216:	1d 07       	cpc	r17, r29
     218:	d1 f7       	brne	.-12     	; 0x20e <i2c_receive+0x32>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     21a:	e5 01       	movw	r28, r10
     21c:	ce 0d       	add	r28, r14
     21e:	df 1d       	adc	r29, r15
     220:	0e 94 b5 00 	call	0x16a	; 0x16a <i2c_read_nack>
     224:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWSTO1);
     226:	84 e9       	ldi	r24, 0x94	; 148
     228:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
     22c:	02 c0       	rjmp	.+4      	; 0x232 <i2c_receive+0x56>
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     22e:	dd 24       	eor	r13, r13
     230:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     232:	8d 2d       	mov	r24, r13
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	ff 90       	pop	r15
     23e:	ef 90       	pop	r14
     240:	df 90       	pop	r13
     242:	bf 90       	pop	r11
     244:	af 90       	pop	r10
     246:	08 95       	ret

00000248 <clear_buffer>:

FILE UART_Stream = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW); //macro for allocating a valid UART stream buffer.


void clear_buffer(void)
{
     248:	e5 e2       	ldi	r30, 0x25	; 37
     24a:	f2 e0       	ldi	r31, 0x02	; 2
     24c:	87 e5       	ldi	r24, 0x57	; 87
     24e:	92 e0       	ldi	r25, 0x02	; 2
	for(int i = 0; i < r_buffer_size; i++)
	{
		r_buffer[i] = 0;
     250:	11 92       	st	Z+, r1
FILE UART_Stream = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW); //macro for allocating a valid UART stream buffer.


void clear_buffer(void)
{
	for(int i = 0; i < r_buffer_size; i++)
     252:	e8 17       	cp	r30, r24
     254:	f9 07       	cpc	r31, r25
     256:	e1 f7       	brne	.-8      	; 0x250 <clear_buffer+0x8>
	{
		r_buffer[i] = 0;
	}
}
     258:	08 95       	ret

0000025a <getstr>:

void getstr(void)
{
	r_ready = 0;
     25a:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <r_ready>
	r_index = 0;
     25e:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <r_index+0x1>
     262:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <r_index>
	UCSR0B |= (1<<RXCIE0);
     266:	e1 ec       	ldi	r30, 0xC1	; 193
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	80 68       	ori	r24, 0x80	; 128
     26e:	80 83       	st	Z, r24
     270:	08 95       	ret

00000272 <__vector_14>:
	f_d = (((((ADC/1024.0)*5.0)-0.4)/0.0195)-f_i)*100;
	TWCR1 = (1<<TWINT1);
}

ISR(TIMER0_COMPA_vect)
{
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	8f 93       	push	r24
     27e:	9f 93       	push	r25
	if(counter <= 0)
     280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     284:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     288:	18 16       	cp	r1, r24
     28a:	19 06       	cpc	r1, r25
     28c:	3c f0       	brlt	.+14     	; 0x29c <__vector_14+0x2a>
	{
		read_temp = 1;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <read_temp+0x1>
     296:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <read_temp>
     29a:	09 c0       	rjmp	.+18     	; 0x2ae <__vector_14+0x3c>
	}
	else
	{
		counter--;
     29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     2aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
     2ae:	9f 91       	pop	r25
     2b0:	8f 91       	pop	r24
     2b2:	0f 90       	pop	r0
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	0f 90       	pop	r0
     2b8:	1f 90       	pop	r1
     2ba:	18 95       	reti

000002bc <__vector_18>:

ISR(USART0_RX_vect)
{
     2bc:	1f 92       	push	r1
     2be:	0f 92       	push	r0
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	0f 92       	push	r0
     2c4:	11 24       	eor	r1, r1
     2c6:	2f 93       	push	r18
     2c8:	3f 93       	push	r19
     2ca:	4f 93       	push	r20
     2cc:	5f 93       	push	r21
     2ce:	6f 93       	push	r22
     2d0:	7f 93       	push	r23
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	af 93       	push	r26
     2d8:	bf 93       	push	r27
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ef 93       	push	r30
     2e0:	ff 93       	push	r31
	char r_char = UDR0;
     2e2:	e6 ec       	ldi	r30, 0xC6	; 198
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
	UDR0 = r_char;
     2e8:	80 83       	st	Z, r24
	if(r_char != '\r')
     2ea:	8d 30       	cpi	r24, 0x0D	; 13
     2ec:	89 f1       	breq	.+98     	; 0x350 <__vector_18+0x94>
	{
		if(r_char == '\b')
     2ee:	88 30       	cpi	r24, 0x08	; 8
     2f0:	c1 f4       	brne	.+48     	; 0x322 <__vector_18+0x66>
		{
			putchar(32);
     2f2:	c9 e5       	ldi	r28, 0x59	; 89
     2f4:	d2 e0       	ldi	r29, 0x02	; 2
     2f6:	6a 81       	ldd	r22, Y+2	; 0x02
     2f8:	7b 81       	ldd	r23, Y+3	; 0x03
     2fa:	80 e2       	ldi	r24, 0x20	; 32
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
			putchar('\b');
     302:	6a 81       	ldd	r22, Y+2	; 0x02
     304:	7b 81       	ldd	r23, Y+3	; 0x03
     306:	88 e0       	ldi	r24, 0x08	; 8
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
			--r_index;
     30e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <r_index>
     312:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <r_index+0x1>
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <r_index+0x1>
     31c:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <r_index>
     320:	2e c0       	rjmp	.+92     	; 0x37e <__vector_18+0xc2>
		}
		else
		{
			r_buffer[r_index] = r_char;
     322:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <r_index>
     326:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <r_index+0x1>
     32a:	f9 01       	movw	r30, r18
     32c:	eb 5d       	subi	r30, 0xDB	; 219
     32e:	fd 4f       	sbci	r31, 0xFD	; 253
     330:	80 83       	st	Z, r24
			if (r_index < r_buffer_size-1)
     332:	21 33       	cpi	r18, 0x31	; 49
     334:	31 05       	cpc	r19, r1
     336:	3c f4       	brge	.+14     	; 0x346 <__vector_18+0x8a>
			{
				r_index++;
     338:	2f 5f       	subi	r18, 0xFF	; 255
     33a:	3f 4f       	sbci	r19, 0xFF	; 255
     33c:	30 93 d1 01 	sts	0x01D1, r19	; 0x8001d1 <r_index+0x1>
     340:	20 93 d0 01 	sts	0x01D0, r18	; 0x8001d0 <r_index>
     344:	1c c0       	rjmp	.+56     	; 0x37e <__vector_18+0xc2>
			}
			else
			{
				r_index = 0;
     346:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <r_index+0x1>
     34a:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <r_index>
     34e:	17 c0       	rjmp	.+46     	; 0x37e <__vector_18+0xc2>
			}
		}
	}
	else
	{
		putchar('\n');
     350:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <__iob+0x2>
     354:	70 91 5c 02 	lds	r23, 0x025C	; 0x80025c <__iob+0x3>
     358:	8a e0       	ldi	r24, 0x0A	; 10
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
		r_buffer[r_index] = 0;
     360:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <r_index>
     364:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <r_index+0x1>
     368:	eb 5d       	subi	r30, 0xDB	; 219
     36a:	fd 4f       	sbci	r31, 0xFD	; 253
     36c:	10 82       	st	Z, r1
		r_ready = 1;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <r_ready>
		UCSR0B ^= (1<<RXCIE0);
     374:	e1 ec       	ldi	r30, 0xC1	; 193
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	80 58       	subi	r24, 0x80	; 128
     37c:	80 83       	st	Z, r24
	}
}
     37e:	ff 91       	pop	r31
     380:	ef 91       	pop	r30
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	bf 91       	pop	r27
     388:	af 91       	pop	r26
     38a:	9f 91       	pop	r25
     38c:	8f 91       	pop	r24
     38e:	7f 91       	pop	r23
     390:	6f 91       	pop	r22
     392:	5f 91       	pop	r21
     394:	4f 91       	pop	r20
     396:	3f 91       	pop	r19
     398:	2f 91       	pop	r18
     39a:	0f 90       	pop	r0
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	0f 90       	pop	r0
     3a0:	1f 90       	pop	r1
     3a2:	18 95       	reti

000003a4 <ms_timer>:


void ms_timer(void)
{
	//Timer 0, set to 1ms
	TCCR0A |= (1<<WGM01);
     3a4:	84 b5       	in	r24, 0x24	; 36
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
     3aa:	89 ef       	ldi	r24, 0xF9	; 249
     3ac:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = 3;
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	85 bd       	out	0x25, r24	; 37
     3b8:	08 95       	ret

000003ba <adc_init>:
}

void adc_init(void)
{
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     3ba:	ea e7       	ldi	r30, 0x7A	; 122
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	87 68       	ori	r24, 0x87	; 135
     3c2:	80 83       	st	Z, r24
     3c4:	08 95       	ret

000003c6 <SPI_MasterInit>:
}

void SPI_MasterInit(void)
{
	SPI_DDR = (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_SS) | (1<<PINB0);
     3c6:	8d e2       	ldi	r24, 0x2D	; 45
     3c8:	84 b9       	out	0x04, r24	; 4
	SPCR0 = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
     3ca:	81 e5       	ldi	r24, 0x51	; 81
     3cc:	8c bd       	out	0x2c, r24	; 44
     3ce:	08 95       	ret

000003d0 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	SPDR0 = cData;
     3d0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR0 & (1<<SPIF)));
     3d2:	0d b4       	in	r0, 0x2d	; 45
     3d4:	07 fe       	sbrs	r0, 7
     3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <SPI_MasterTransmit+0x2>
}
     3d8:	08 95       	ret

000003da <__vector_40>:
	r_index = 0;
	UCSR0B |= (1<<RXCIE0);
}

ISR(TWI1_vect)
{
     3da:	1f 92       	push	r1
     3dc:	0f 92       	push	r0
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	0f 92       	push	r0
     3e2:	11 24       	eor	r1, r1
     3e4:	8f 92       	push	r8
     3e6:	9f 92       	push	r9
     3e8:	af 92       	push	r10
     3ea:	bf 92       	push	r11
     3ec:	cf 92       	push	r12
     3ee:	df 92       	push	r13
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	2f 93       	push	r18
     3fa:	3f 93       	push	r19
     3fc:	4f 93       	push	r20
     3fe:	5f 93       	push	r21
     400:	6f 93       	push	r22
     402:	7f 93       	push	r23
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
	i2c_voltage = (a_1)*0.0195+2;
     414:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <a_1>
     418:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <a_1+0x1>
     41c:	07 2e       	mov	r0, r23
     41e:	00 0c       	add	r0, r0
     420:	88 0b       	sbc	r24, r24
     422:	99 0b       	sbc	r25, r25
     424:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     428:	27 e7       	ldi	r18, 0x77	; 119
     42a:	3e eb       	ldi	r19, 0xBE	; 190
     42c:	4f e9       	ldi	r20, 0x9F	; 159
     42e:	5c e3       	ldi	r21, 0x3C	; 60
     430:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	50 e4       	ldi	r21, 0x40	; 64
     43c:	0e 94 09 06 	call	0xc12	; 0xc12 <__addsf3>
     440:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <i2c_voltage>
     444:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <i2c_voltage+0x1>
     448:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <i2c_voltage+0x2>
     44c:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <i2c_voltage+0x3>
	Y_i = i2c_voltage;
     450:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <i2c_voltage>
     454:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <i2c_voltage+0x1>
     458:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <i2c_voltage+0x2>
     45c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <i2c_voltage+0x3>
     460:	0e 94 e7 06 	call	0xdce	; 0xdce <__fixsfsi>
     464:	70 93 c1 01 	sts	0x01C1, r23	; 0x8001c1 <Y_i+0x1>
     468:	60 93 c0 01 	sts	0x01C0, r22	; 0x8001c0 <Y_i>
	Y_d = (i2c_voltage - Y_i)*100;
     46c:	c0 90 c2 01 	lds	r12, 0x01C2	; 0x8001c2 <i2c_voltage>
     470:	d0 90 c3 01 	lds	r13, 0x01C3	; 0x8001c3 <i2c_voltage+0x1>
     474:	e0 90 c4 01 	lds	r14, 0x01C4	; 0x8001c4 <i2c_voltage+0x2>
     478:	f0 90 c5 01 	lds	r15, 0x01C5	; 0x8001c5 <i2c_voltage+0x3>
     47c:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <Y_i>
     480:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <Y_i+0x1>
     484:	07 2e       	mov	r0, r23
     486:	00 0c       	add	r0, r0
     488:	88 0b       	sbc	r24, r24
     48a:	99 0b       	sbc	r25, r25
     48c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     490:	9b 01       	movw	r18, r22
     492:	ac 01       	movw	r20, r24
     494:	c7 01       	movw	r24, r14
     496:	b6 01       	movw	r22, r12
     498:	0e 94 08 06 	call	0xc10	; 0xc10 <__subsf3>
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	48 ec       	ldi	r20, 0xC8	; 200
     4a2:	52 e4       	ldi	r21, 0x42	; 66
     4a4:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     4a8:	0e 94 e7 06 	call	0xdce	; 0xdce <__fixsfsi>
     4ac:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <Y_d+0x1>
     4b0:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <Y_d>
	int j = i2c_voltage/5.0*1024;
     4b4:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <i2c_voltage>
     4b8:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <i2c_voltage+0x1>
     4bc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <i2c_voltage+0x2>
     4c0:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <i2c_voltage+0x3>
	int adc_12 = (j<<2);
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 ea       	ldi	r20, 0xA0	; 160
     4ca:	50 e4       	ldi	r21, 0x40	; 64
     4cc:	0e 94 75 06 	call	0xcea	; 0xcea <__divsf3>
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e8       	ldi	r20, 0x80	; 128
     4d6:	54 e4       	ldi	r21, 0x44	; 68
     4d8:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     4dc:	0e 94 e7 06 	call	0xdce	; 0xdce <__fixsfsi>
     4e0:	eb 01       	movw	r28, r22
     4e2:	cc 0f       	add	r28, r28
     4e4:	dd 1f       	adc	r29, r29
     4e6:	cc 0f       	add	r28, r28
     4e8:	dd 1f       	adc	r29, r29
	int low_half = adc_12 & 0xFF;
	int upper_half = (0b01110000 | (adc_12 >> 8));
	PORTB &= ~(1 << SPI_SS);
     4ea:	2a 98       	cbi	0x05, 2	; 5
	PORTB |= (1<<PINB0);
     4ec:	28 9a       	sbi	0x05, 0	; 5
	SPI_MasterTransmit(upper_half);
     4ee:	8d 2f       	mov	r24, r29
     4f0:	99 27       	eor	r25, r25
     4f2:	87 fd       	sbrc	r24, 7
     4f4:	9a 95       	dec	r25
     4f6:	80 67       	ori	r24, 0x70	; 112
     4f8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_MasterTransmit>
	SPI_MasterTransmit(low_half);
     4fc:	ce 01       	movw	r24, r28
     4fe:	99 27       	eor	r25, r25
     500:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_MasterTransmit>
	PORTB |= (1 << SPI_SS);
     504:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1 << PINB0);
     506:	28 98       	cbi	0x05, 0	; 5
	ADMUX = 7;
     508:	0f 2e       	mov	r0, r31
     50a:	fc e7       	ldi	r31, 0x7C	; 124
     50c:	ef 2e       	mov	r14, r31
     50e:	f1 2c       	mov	r15, r1
     510:	f0 2d       	mov	r31, r0
     512:	87 e0       	ldi	r24, 0x07	; 7
     514:	f7 01       	movw	r30, r14
     516:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
     518:	ca e7       	ldi	r28, 0x7A	; 122
     51a:	d0 e0       	ldi	r29, 0x00	; 0
     51c:	88 81       	ld	r24, Y
     51e:	80 64       	ori	r24, 0x40	; 64
     520:	88 83       	st	Y, r24
	dac_i = ADC*5.0/1024.0;
     522:	08 e7       	ldi	r16, 0x78	; 120
     524:	10 e0       	ldi	r17, 0x00	; 0
     526:	f8 01       	movw	r30, r16
     528:	60 81       	ld	r22, Z
     52a:	71 81       	ldd	r23, Z+1	; 0x01
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__floatunsisf>
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 ea       	ldi	r20, 0xA0	; 160
     53a:	50 e4       	ldi	r21, 0x40	; 64
     53c:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e8       	ldi	r20, 0x80	; 128
     546:	5a e3       	ldi	r21, 0x3A	; 58
     548:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     54c:	0e 94 e7 06 	call	0xdce	; 0xdce <__fixsfsi>
     550:	70 93 bd 01 	sts	0x01BD, r23	; 0x8001bd <dac_i+0x1>
     554:	60 93 bc 01 	sts	0x01BC, r22	; 0x8001bc <dac_i>
	dac_d = ((ADC*5.0/1024.0) - dac_i)*100;
     558:	f8 01       	movw	r30, r16
     55a:	60 81       	ld	r22, Z
     55c:	71 81       	ldd	r23, Z+1	; 0x01
     55e:	00 91 bc 01 	lds	r16, 0x01BC	; 0x8001bc <dac_i>
     562:	10 91 bd 01 	lds	r17, 0x01BD	; 0x8001bd <dac_i+0x1>
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__floatunsisf>
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 ea       	ldi	r20, 0xA0	; 160
     574:	50 e4       	ldi	r21, 0x40	; 64
     576:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e8       	ldi	r20, 0x80	; 128
     580:	5a e3       	ldi	r21, 0x3A	; 58
     582:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     586:	4b 01       	movw	r8, r22
     588:	5c 01       	movw	r10, r24
     58a:	b8 01       	movw	r22, r16
     58c:	11 0f       	add	r17, r17
     58e:	88 0b       	sbc	r24, r24
     590:	99 0b       	sbc	r25, r25
     592:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     596:	9b 01       	movw	r18, r22
     598:	ac 01       	movw	r20, r24
     59a:	c5 01       	movw	r24, r10
     59c:	b4 01       	movw	r22, r8
     59e:	0e 94 08 06 	call	0xc10	; 0xc10 <__subsf3>
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	48 ec       	ldi	r20, 0xC8	; 200
     5a8:	52 e4       	ldi	r21, 0x42	; 66
     5aa:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     5ae:	0e 94 e7 06 	call	0xdce	; 0xdce <__fixsfsi>
     5b2:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <__data_end+0x1>
     5b6:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <__data_end>
	ADMUX = 6;
     5ba:	86 e0       	ldi	r24, 0x06	; 6
     5bc:	f7 01       	movw	r30, r14
     5be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
     5c0:	88 81       	ld	r24, Y
     5c2:	80 64       	ori	r24, 0x40	; 64
     5c4:	88 83       	st	Y, r24
	while(ADCSRA & (1<<ADSC));
     5c6:	ea e7       	ldi	r30, 0x7A	; 122
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	86 fd       	sbrc	r24, 6
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
	f_i = (((ADC/1024.0)*5.0)-0.4)/0.0195;
     5d0:	c8 e7       	ldi	r28, 0x78	; 120
     5d2:	d0 e0       	ldi	r29, 0x00	; 0
     5d4:	68 81       	ld	r22, Y
     5d6:	79 81       	ldd	r23, Y+1	; 0x01
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__floatunsisf>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e8       	ldi	r20, 0x80	; 128
     5e6:	5a e3       	ldi	r21, 0x3A	; 58
     5e8:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 ea       	ldi	r20, 0xA0	; 160
     5f2:	50 e4       	ldi	r21, 0x40	; 64
     5f4:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     5f8:	2d ec       	ldi	r18, 0xCD	; 205
     5fa:	3c ec       	ldi	r19, 0xCC	; 204
     5fc:	4c ec       	ldi	r20, 0xCC	; 204
     5fe:	5e e3       	ldi	r21, 0x3E	; 62
     600:	0e 94 08 06 	call	0xc10	; 0xc10 <__subsf3>
     604:	27 e7       	ldi	r18, 0x77	; 119
     606:	3e eb       	ldi	r19, 0xBE	; 190
     608:	4f e9       	ldi	r20, 0x9F	; 159
     60a:	5c e3       	ldi	r21, 0x3C	; 60
     60c:	0e 94 75 06 	call	0xcea	; 0xcea <__divsf3>
     610:	0e 94 e7 06 	call	0xdce	; 0xdce <__fixsfsi>
     614:	70 93 c9 01 	sts	0x01C9, r23	; 0x8001c9 <f_i+0x1>
     618:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <f_i>
	f_d = (((((ADC/1024.0)*5.0)-0.4)/0.0195)-f_i)*100;
     61c:	68 81       	ld	r22, Y
     61e:	79 81       	ldd	r23, Y+1	; 0x01
     620:	c0 91 c8 01 	lds	r28, 0x01C8	; 0x8001c8 <f_i>
     624:	d0 91 c9 01 	lds	r29, 0x01C9	; 0x8001c9 <f_i+0x1>
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__floatunsisf>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	5a e3       	ldi	r21, 0x3A	; 58
     638:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 ea       	ldi	r20, 0xA0	; 160
     642:	50 e4       	ldi	r21, 0x40	; 64
     644:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     648:	2d ec       	ldi	r18, 0xCD	; 205
     64a:	3c ec       	ldi	r19, 0xCC	; 204
     64c:	4c ec       	ldi	r20, 0xCC	; 204
     64e:	5e e3       	ldi	r21, 0x3E	; 62
     650:	0e 94 08 06 	call	0xc10	; 0xc10 <__subsf3>
     654:	27 e7       	ldi	r18, 0x77	; 119
     656:	3e eb       	ldi	r19, 0xBE	; 190
     658:	4f e9       	ldi	r20, 0x9F	; 159
     65a:	5c e3       	ldi	r21, 0x3C	; 60
     65c:	0e 94 75 06 	call	0xcea	; 0xcea <__divsf3>
     660:	6b 01       	movw	r12, r22
     662:	7c 01       	movw	r14, r24
     664:	be 01       	movw	r22, r28
     666:	dd 0f       	add	r29, r29
     668:	88 0b       	sbc	r24, r24
     66a:	99 0b       	sbc	r25, r25
     66c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     670:	9b 01       	movw	r18, r22
     672:	ac 01       	movw	r20, r24
     674:	c7 01       	movw	r24, r14
     676:	b6 01       	movw	r22, r12
     678:	0e 94 08 06 	call	0xc10	; 0xc10 <__subsf3>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	48 ec       	ldi	r20, 0xC8	; 200
     682:	52 e4       	ldi	r21, 0x42	; 66
     684:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     688:	0e 94 e7 06 	call	0xdce	; 0xdce <__fixsfsi>
     68c:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <f_d+0x1>
     690:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <f_d>
	TWCR1 = (1<<TWINT1);
     694:	80 e8       	ldi	r24, 0x80	; 128
     696:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
}
     69a:	ff 91       	pop	r31
     69c:	ef 91       	pop	r30
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	bf 91       	pop	r27
     6a4:	af 91       	pop	r26
     6a6:	9f 91       	pop	r25
     6a8:	8f 91       	pop	r24
     6aa:	7f 91       	pop	r23
     6ac:	6f 91       	pop	r22
     6ae:	5f 91       	pop	r21
     6b0:	4f 91       	pop	r20
     6b2:	3f 91       	pop	r19
     6b4:	2f 91       	pop	r18
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <main>:
	SPDR0 = cData;
	while(!(SPSR0 & (1<<SPIF)));
}

int main(void)
{
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	2b 97       	sbiw	r28, 0x0b	; 11
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	ms_timer();
     6e8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <ms_timer>
	uart_init();
     6ec:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_init>
	i2c_init();
     6f0:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_init>
	adc_init();
     6f4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <adc_init>
	SPI_MasterInit();
     6f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SPI_MasterInit>
	
	sei();
     6fc:	78 94       	sei
	clear_buffer();
     6fe:	0e 94 24 01 	call	0x248	; 0x248 <clear_buffer>
	getstr();
     702:	0e 94 2d 01 	call	0x25a	; 0x25a <getstr>
	while (1)
	{
		if(r_ready == 1)
		{
			char a[2];
			a[0] = r_buffer[0];
     706:	0f 2e       	mov	r0, r31
     708:	f5 e2       	ldi	r31, 0x25	; 37
     70a:	6f 2e       	mov	r6, r31
     70c:	f2 e0       	ldi	r31, 0x02	; 2
     70e:	7f 2e       	mov	r7, r31
     710:	f0 2d       	mov	r31, r0
			a[1] = '\0';
			if(strcmp(a, "p") == 0)
			{
				temp_mode = !temp_mode;
     712:	bb 24       	eor	r11, r11
     714:	b3 94       	inc	r11
     716:	a1 2c       	mov	r10, r1
     718:	41 2c       	mov	r4, r1
     71a:	51 2c       	mov	r5, r1
     71c:	8b 2c       	mov	r8, r11
     71e:	3a 2c       	mov	r3, r10
     720:	24 2c       	mov	r2, r4
     722:	5b 82       	std	Y+3, r5	; 0x03
		if(read_temp == 1)
		{
			i2c_transmit(0x90, 0x00, 1);
			i2c_receive(0x90, a, 1);
			a_1 = *a;
			TWCR1 = (1<<TWIE1) | (1<<TWEN1) | (1<<TWSTA1);
     724:	0f 2e       	mov	r0, r31
     726:	fc ed       	ldi	r31, 0xDC	; 220
     728:	cf 2e       	mov	r12, r31
     72a:	d1 2c       	mov	r13, r1
     72c:	f0 2d       	mov	r31, r0
     72e:	0f 2e       	mov	r0, r31
     730:	f5 e2       	ldi	r31, 0x25	; 37
     732:	9f 2e       	mov	r9, r31
     734:	f0 2d       	mov	r31, r0
				int c = ((a_1*9.0/5.0 + 32.0)-b)*100;

				printf("[Temp(TC74): %d.%dF][Temp(MCP): %d.%dF][Converted Voltage: %d.%dV][DAC: %d.%dV]\n", b, c, f_i, f_d, Y_i, Y_d, dac_i, dac_d);
			}
			read_temp = 0;
			counter = 1000;
     736:	0f 2e       	mov	r0, r31
     738:	f8 ee       	ldi	r31, 0xE8	; 232
     73a:	ef 2e       	mov	r14, r31
     73c:	f3 e0       	ldi	r31, 0x03	; 3
     73e:	ff 2e       	mov	r15, r31
     740:	f0 2d       	mov	r31, r0
	sei();
	clear_buffer();
	getstr();
	while (1)
	{
		if(r_ready == 1)
     742:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <r_ready>
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	e1 f4       	brne	.+56     	; 0x782 <main+0xae>
		{
			char a[2];
			a[0] = r_buffer[0];
     74a:	f3 01       	movw	r30, r6
     74c:	80 81       	ld	r24, Z
     74e:	89 83       	std	Y+1, r24	; 0x01
			a[1] = '\0';
     750:	1a 82       	std	Y+2, r1	; 0x02
			if(strcmp(a, "p") == 0)
     752:	60 e1       	ldi	r22, 0x10	; 16
     754:	71 e0       	ldi	r23, 0x01	; 1
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	0e 94 18 08 	call	0x1030	; 0x1030 <strcmp>
     75e:	89 2b       	or	r24, r25
     760:	71 f4       	brne	.+28     	; 0x77e <main+0xaa>
			{
				temp_mode = !temp_mode;
     762:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <temp_mode>
     766:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <temp_mode+0x1>
     76a:	88 2d       	mov	r24, r8
     76c:	93 2d       	mov	r25, r3
     76e:	23 2b       	or	r18, r19
     770:	11 f0       	breq	.+4      	; 0x776 <main+0xa2>
     772:	82 2d       	mov	r24, r2
     774:	9b 81       	ldd	r25, Y+3	; 0x03
     776:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <temp_mode+0x1>
     77a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <temp_mode>
			}
			getstr();
     77e:	0e 94 2d 01 	call	0x25a	; 0x25a <getstr>
		}
		
		if(read_temp == 1)
     782:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <read_temp>
     786:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <read_temp+0x1>
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	d1 f6       	brne	.-76     	; 0x742 <main+0x6e>
		{
			i2c_transmit(0x90, 0x00, 1);
     78e:	4b 2d       	mov	r20, r11
     790:	5a 2d       	mov	r21, r10
     792:	b2 01       	movw	r22, r4
     794:	80 e9       	ldi	r24, 0x90	; 144
     796:	0e 94 c0 00 	call	0x180	; 0x180 <i2c_transmit>
			i2c_receive(0x90, a, 1);
     79a:	60 91 57 02 	lds	r22, 0x0257	; 0x800257 <a>
     79e:	70 91 58 02 	lds	r23, 0x0258	; 0x800258 <a+0x1>
     7a2:	4b 2d       	mov	r20, r11
     7a4:	5a 2d       	mov	r21, r10
     7a6:	80 e9       	ldi	r24, 0x90	; 144
     7a8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_receive>
			a_1 = *a;
     7ac:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <a>
     7b0:	f0 91 58 02 	lds	r31, 0x0258	; 0x800258 <a+0x1>
     7b4:	80 81       	ld	r24, Z
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <a_1+0x1>
     7bc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <a_1>
			TWCR1 = (1<<TWIE1) | (1<<TWEN1) | (1<<TWSTA1);
     7c0:	f6 01       	movw	r30, r12
     7c2:	90 82       	st	Z, r9
			if(temp_mode == 0)
     7c4:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <temp_mode>
     7c8:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <temp_mode+0x1>
     7cc:	89 2b       	or	r24, r25
     7ce:	b1 f5       	brne	.+108    	; 0x83c <main+0x168>
			{
				printf("[Temp(TC74): %dC][Temp(MCP): %d.%dF][Converted Voltage: %d.%dV][DAC: %d.%dV]\n", a_1, f_i, f_d, Y_i, Y_d, dac_i, dac_d);
     7d0:	a0 91 ba 01 	lds	r26, 0x01BA	; 0x8001ba <__data_end>
     7d4:	b0 91 bb 01 	lds	r27, 0x01BB	; 0x8001bb <__data_end+0x1>
     7d8:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <dac_i>
     7dc:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <dac_i+0x1>
     7e0:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <Y_d>
     7e4:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <Y_d+0x1>
     7e8:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <Y_i>
     7ec:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <Y_i+0x1>
     7f0:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <f_d>
     7f4:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <f_d+0x1>
     7f8:	00 91 c8 01 	lds	r16, 0x01C8	; 0x8001c8 <f_i>
     7fc:	10 91 c9 01 	lds	r17, 0x01C9	; 0x8001c9 <f_i+0x1>
     800:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <a_1>
     804:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <a_1+0x1>
     808:	bf 93       	push	r27
     80a:	af 93       	push	r26
     80c:	ff 93       	push	r31
     80e:	ef 93       	push	r30
     810:	7f 93       	push	r23
     812:	6f 93       	push	r22
     814:	5f 93       	push	r21
     816:	4f 93       	push	r20
     818:	3f 93       	push	r19
     81a:	2f 93       	push	r18
     81c:	1f 93       	push	r17
     81e:	0f 93       	push	r16
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	22 e1       	ldi	r18, 0x12	; 18
     826:	31 e0       	ldi	r19, 0x01	; 1
     828:	3f 93       	push	r19
     82a:	2f 93       	push	r18
     82c:	0e 94 91 08 	call	0x1122	; 0x1122 <printf>
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	96 c0       	rjmp	.+300    	; 0x968 <__stack+0x69>
			}
			else if(temp_mode == 1)
     83c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <temp_mode>
     840:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <temp_mode+0x1>
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	09 f0       	breq	.+2      	; 0x84a <main+0x176>
     848:	8f c0       	rjmp	.+286    	; 0x968 <__stack+0x69>
			{
				int b = a_1*9.0/5.0 + 32.0;
     84a:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <a_1>
     84e:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <a_1+0x1>
     852:	07 2e       	mov	r0, r23
     854:	00 0c       	add	r0, r0
     856:	88 0b       	sbc	r24, r24
     858:	99 0b       	sbc	r25, r25
     85a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 e1       	ldi	r20, 0x10	; 16
     864:	51 e4       	ldi	r21, 0x41	; 65
     866:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 ea       	ldi	r20, 0xA0	; 160
     870:	50 e4       	ldi	r21, 0x40	; 64
     872:	0e 94 75 06 	call	0xcea	; 0xcea <__divsf3>
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	52 e4       	ldi	r21, 0x42	; 66
     87e:	0e 94 09 06 	call	0xc12	; 0xc12 <__addsf3>
     882:	0e 94 e7 06 	call	0xdce	; 0xdce <__fixsfsi>
     886:	6c 83       	std	Y+4, r22	; 0x04
     888:	7d 83       	std	Y+5, r23	; 0x05
     88a:	8e 83       	std	Y+6, r24	; 0x06
     88c:	9f 83       	std	Y+7, r25	; 0x07
				int c = ((a_1*9.0/5.0 + 32.0)-b)*100;
     88e:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <a_1>
     892:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <a_1+0x1>

				printf("[Temp(TC74): %d.%dF][Temp(MCP): %d.%dF][Converted Voltage: %d.%dV][DAC: %d.%dV]\n", b, c, f_i, f_d, Y_i, Y_d, dac_i, dac_d);
     896:	a0 91 ba 01 	lds	r26, 0x01BA	; 0x8001ba <__data_end>
     89a:	b0 91 bb 01 	lds	r27, 0x01BB	; 0x8001bb <__data_end+0x1>
     89e:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <dac_i>
     8a2:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <dac_i+0x1>
     8a6:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <Y_d>
     8aa:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <Y_d+0x1>
     8ae:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <Y_i>
     8b2:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <Y_i+0x1>
     8b6:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <f_d>
     8ba:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <f_d+0x1>
     8be:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <f_i>
     8c2:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <f_i+0x1>
     8c6:	bf 93       	push	r27
     8c8:	af 93       	push	r26
     8ca:	ff 93       	push	r31
     8cc:	ef 93       	push	r30
     8ce:	7f 93       	push	r23
     8d0:	6f 93       	push	r22
     8d2:	5f 93       	push	r21
     8d4:	4f 93       	push	r20
     8d6:	3f 93       	push	r19
     8d8:	2f 93       	push	r18
     8da:	9f 93       	push	r25
     8dc:	8f 93       	push	r24
     8de:	b8 01       	movw	r22, r16
     8e0:	11 0f       	add	r17, r17
     8e2:	88 0b       	sbc	r24, r24
     8e4:	99 0b       	sbc	r25, r25
     8e6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 e1       	ldi	r20, 0x10	; 16
     8f0:	51 e4       	ldi	r21, 0x41	; 65
     8f2:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 ea       	ldi	r20, 0xA0	; 160
     8fc:	50 e4       	ldi	r21, 0x40	; 64
     8fe:	0e 94 75 06 	call	0xcea	; 0xcea <__divsf3>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	52 e4       	ldi	r21, 0x42	; 66
     90a:	0e 94 09 06 	call	0xc12	; 0xc12 <__addsf3>
     90e:	68 87       	std	Y+8, r22	; 0x08
     910:	79 87       	std	Y+9, r23	; 0x09
     912:	8a 87       	std	Y+10, r24	; 0x0a
     914:	9b 87       	std	Y+11, r25	; 0x0b
     916:	2c 81       	ldd	r18, Y+4	; 0x04
     918:	3d 81       	ldd	r19, Y+5	; 0x05
     91a:	b9 01       	movw	r22, r18
     91c:	33 0f       	add	r19, r19
     91e:	88 0b       	sbc	r24, r24
     920:	99 0b       	sbc	r25, r25
     922:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	68 85       	ldd	r22, Y+8	; 0x08
     92c:	79 85       	ldd	r23, Y+9	; 0x09
     92e:	8a 85       	ldd	r24, Y+10	; 0x0a
     930:	9b 85       	ldd	r25, Y+11	; 0x0b
     932:	0e 94 08 06 	call	0xc10	; 0xc10 <__subsf3>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	48 ec       	ldi	r20, 0xC8	; 200
     93c:	52 e4       	ldi	r21, 0x42	; 66
     93e:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     942:	0e 94 e7 06 	call	0xdce	; 0xdce <__fixsfsi>
     946:	7f 93       	push	r23
     948:	6f 93       	push	r22
     94a:	3d 81       	ldd	r19, Y+5	; 0x05
     94c:	3f 93       	push	r19
     94e:	8c 81       	ldd	r24, Y+4	; 0x04
     950:	8f 93       	push	r24
     952:	e0 e6       	ldi	r30, 0x60	; 96
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	ff 93       	push	r31
     958:	ef 93       	push	r30
     95a:	0e 94 91 08 	call	0x1122	; 0x1122 <printf>
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
			}
			read_temp = 0;
     968:	50 92 cd 01 	sts	0x01CD, r5	; 0x8001cd <read_temp+0x1>
     96c:	40 92 cc 01 	sts	0x01CC, r4	; 0x8001cc <read_temp>
			counter = 1000;
     970:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__data_start+0x1>
     974:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__data_start>
     978:	e4 ce       	rjmp	.-568    	; 0x742 <main+0x6e>

0000097a <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     97a:	cf 93       	push	r28
     97c:	c8 2f       	mov	r28, r24

  if (c == '\a')
     97e:	87 30       	cpi	r24, 0x07	; 7
     980:	69 f4       	brne	.+26     	; 0x99c <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
     982:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <__iob+0x4>
     986:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <__iob+0x5>
     98a:	47 e0       	ldi	r20, 0x07	; 7
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	81 eb       	ldi	r24, 0xB1	; 177
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 5d 08 	call	0x10ba	; 0x10ba <fwrite>
      return 0;
     99a:	0c c0       	rjmp	.+24     	; 0x9b4 <uart_putchar+0x3a>
    }

  if (c == '\n')
     99c:	8a 30       	cpi	r24, 0x0A	; 10
     99e:	19 f4       	brne	.+6      	; 0x9a6 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
     9a0:	8d e0       	ldi	r24, 0x0D	; 13
     9a2:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     9a6:	e0 ec       	ldi	r30, 0xC0	; 192
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	85 ff       	sbrs	r24, 5
     9ae:	fd cf       	rjmp	.-6      	; 0x9aa <uart_putchar+0x30>
  UDR0 = c;
     9b0:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

  return 0;
}
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     9bc:	6f 92       	push	r6
     9be:	7f 92       	push	r7
     9c0:	8f 92       	push	r8
     9c2:	9f 92       	push	r9
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     9d8:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <rxp.1828>
     9dc:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <rxp.1828+0x1>
     9e0:	23 2b       	or	r18, r19
     9e2:	09 f0       	breq	.+2      	; 0x9e6 <uart_getchar+0x2a>
     9e4:	da c0       	rjmp	.+436    	; 0xb9a <uart_getchar+0x1de>
     9e6:	8c 01       	movw	r16, r24
     9e8:	0f 2e       	mov	r0, r31
     9ea:	f2 ed       	ldi	r31, 0xD2	; 210
     9ec:	8f 2e       	mov	r8, r31
     9ee:	f1 e0       	ldi	r31, 0x01	; 1
     9f0:	9f 2e       	mov	r9, r31
     9f2:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     9f4:	c0 ec       	ldi	r28, 0xC0	; 192
     9f6:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
     9f8:	0f 2e       	mov	r0, r31
     9fa:	f6 ec       	ldi	r31, 0xC6	; 198
     9fc:	cf 2e       	mov	r12, r31
     9fe:	d1 2c       	mov	r13, r1
     a00:	f0 2d       	mov	r31, r0
     a02:	54 01       	movw	r10, r8
     a04:	0f 2e       	mov	r0, r31
     a06:	f1 ed       	ldi	r31, 0xD1	; 209
     a08:	6f 2e       	mov	r6, r31
     a0a:	f1 e0       	ldi	r31, 0x01	; 1
     a0c:	7f 2e       	mov	r7, r31
     a0e:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     a10:	88 81       	ld	r24, Y
     a12:	88 23       	and	r24, r24
     a14:	ec f7       	brge	.-6      	; 0xa10 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
     a16:	88 81       	ld	r24, Y
     a18:	84 fd       	sbrc	r24, 4
     a1a:	d2 c0       	rjmp	.+420    	; 0xbc0 <uart_getchar+0x204>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     a1c:	88 81       	ld	r24, Y
     a1e:	83 fd       	sbrc	r24, 3
     a20:	d2 c0       	rjmp	.+420    	; 0xbc6 <uart_getchar+0x20a>
	  return _FDEV_ERR;
	c = UDR0;
     a22:	f6 01       	movw	r30, r12
     a24:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     a26:	8d 30       	cpi	r24, 0x0D	; 13
     a28:	11 f0       	breq	.+4      	; 0xa2e <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
     a2a:	8a 30       	cpi	r24, 0x0A	; 10
     a2c:	69 f4       	brne	.+26     	; 0xa48 <uart_getchar+0x8c>
	  {
	    *cp = c;
     a2e:	8a e0       	ldi	r24, 0x0A	; 10
     a30:	f4 01       	movw	r30, r8
     a32:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     a34:	b8 01       	movw	r22, r16
     a36:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
	    rxp = b;
     a3a:	82 ed       	ldi	r24, 0xD2	; 210
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <rxp.1828+0x1>
     a42:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <rxp.1828>
	    break;
     a46:	a9 c0       	rjmp	.+338    	; 0xb9a <uart_getchar+0x1de>
	  }
	else if (c == '\t')
     a48:	89 30       	cpi	r24, 0x09	; 9
     a4a:	39 f0       	breq	.+14     	; 0xa5a <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     a4c:	90 ee       	ldi	r25, 0xE0	; 224
     a4e:	98 0f       	add	r25, r24
     a50:	9f 35       	cpi	r25, 0x5F	; 95
     a52:	20 f0       	brcs	.+8      	; 0xa5c <uart_getchar+0xa0>
     a54:	80 3a       	cpi	r24, 0xA0	; 160
     a56:	b8 f0       	brcs	.+46     	; 0xa86 <uart_getchar+0xca>
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
     a5a:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     a5c:	f1 e2       	ldi	r31, 0x21	; 33
     a5e:	8f 16       	cp	r8, r31
     a60:	f2 e0       	ldi	r31, 0x02	; 2
     a62:	9f 06       	cpc	r9, r31
     a64:	29 f4       	brne	.+10     	; 0xa70 <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
     a66:	b8 01       	movw	r22, r16
     a68:	87 e0       	ldi	r24, 0x07	; 7
     a6a:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
     a6e:	d0 cf       	rjmp	.-96     	; 0xa10 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
     a70:	74 01       	movw	r14, r8
     a72:	9f ef       	ldi	r25, 0xFF	; 255
     a74:	e9 1a       	sub	r14, r25
     a76:	f9 0a       	sbc	r15, r25
     a78:	f4 01       	movw	r30, r8
     a7a:	80 83       	st	Z, r24
		uart_putchar(c, stream);
     a7c:	b8 01       	movw	r22, r16
     a7e:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     a82:	47 01       	movw	r8, r14
     a84:	c5 cf       	rjmp	.-118    	; 0xa10 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
     a86:	82 31       	cpi	r24, 0x12	; 18
     a88:	d1 f1       	breq	.+116    	; 0xafe <uart_getchar+0x142>
     a8a:	30 f4       	brcc	.+12     	; 0xa98 <uart_getchar+0xdc>
     a8c:	83 30       	cpi	r24, 0x03	; 3
     a8e:	09 f4       	brne	.+2      	; 0xa92 <uart_getchar+0xd6>
     a90:	9d c0       	rjmp	.+314    	; 0xbcc <uart_getchar+0x210>
     a92:	88 30       	cpi	r24, 0x08	; 8
     a94:	e9 f0       	breq	.+58     	; 0xad0 <uart_getchar+0x114>
     a96:	bc cf       	rjmp	.-136    	; 0xa10 <uart_getchar+0x54>
     a98:	87 31       	cpi	r24, 0x17	; 23
     a9a:	29 f0       	breq	.+10     	; 0xaa6 <uart_getchar+0xea>
     a9c:	8f 37       	cpi	r24, 0x7F	; 127
     a9e:	c1 f0       	breq	.+48     	; 0xad0 <uart_getchar+0x114>
     aa0:	85 31       	cpi	r24, 0x15	; 21
     aa2:	79 f0       	breq	.+30     	; 0xac2 <uart_getchar+0x106>
     aa4:	b5 cf       	rjmp	.-150    	; 0xa10 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     aa6:	f2 ed       	ldi	r31, 0xD2	; 210
     aa8:	8f 16       	cp	r8, r31
     aaa:	f1 e0       	ldi	r31, 0x01	; 1
     aac:	9f 06       	cpc	r9, r31
     aae:	09 f0       	breq	.+2      	; 0xab2 <uart_getchar+0xf6>
     ab0:	08 f4       	brcc	.+2      	; 0xab4 <uart_getchar+0xf8>
     ab2:	ae cf       	rjmp	.-164    	; 0xa10 <uart_getchar+0x54>
     ab4:	f4 01       	movw	r30, r8
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	80 81       	ld	r24, Z
     aba:	80 32       	cpi	r24, 0x20	; 32
     abc:	09 f0       	breq	.+2      	; 0xac0 <uart_getchar+0x104>
     abe:	52 c0       	rjmp	.+164    	; 0xb64 <uart_getchar+0x1a8>
     ac0:	a7 cf       	rjmp	.-178    	; 0xa10 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     ac2:	82 ed       	ldi	r24, 0xD2	; 210
     ac4:	88 16       	cp	r8, r24
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	98 06       	cpc	r9, r24
     aca:	09 f0       	breq	.+2      	; 0xace <uart_getchar+0x112>
     acc:	98 f5       	brcc	.+102    	; 0xb34 <uart_getchar+0x178>
     ace:	a0 cf       	rjmp	.-192    	; 0xa10 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     ad0:	92 ed       	ldi	r25, 0xD2	; 210
     ad2:	89 16       	cp	r8, r25
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	99 06       	cpc	r9, r25
     ad8:	09 f0       	breq	.+2      	; 0xadc <uart_getchar+0x120>
     ada:	08 f4       	brcc	.+2      	; 0xade <uart_getchar+0x122>
     adc:	99 cf       	rjmp	.-206    	; 0xa10 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
     ade:	b8 01       	movw	r22, r16
     ae0:	88 e0       	ldi	r24, 0x08	; 8
     ae2:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
		uart_putchar(' ', stream);
     ae6:	b8 01       	movw	r22, r16
     ae8:	80 e2       	ldi	r24, 0x20	; 32
     aea:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
		uart_putchar('\b', stream);
     aee:	b8 01       	movw	r22, r16
     af0:	88 e0       	ldi	r24, 0x08	; 8
     af2:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
		cp--;
     af6:	e1 e0       	ldi	r30, 0x01	; 1
     af8:	8e 1a       	sub	r8, r30
     afa:	91 08       	sbc	r9, r1
     afc:	89 cf       	rjmp	.-238    	; 0xa10 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     afe:	b8 01       	movw	r22, r16
     b00:	8d e0       	ldi	r24, 0x0D	; 13
     b02:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     b06:	f2 ed       	ldi	r31, 0xD2	; 210
     b08:	8f 16       	cp	r8, r31
     b0a:	f1 e0       	ldi	r31, 0x01	; 1
     b0c:	9f 06       	cpc	r9, r31
     b0e:	09 f0       	breq	.+2      	; 0xb12 <uart_getchar+0x156>
     b10:	08 f4       	brcc	.+2      	; 0xb14 <uart_getchar+0x158>
     b12:	7e cf       	rjmp	.-260    	; 0xa10 <uart_getchar+0x54>
     b14:	0f 2e       	mov	r0, r31
     b16:	f2 ed       	ldi	r31, 0xD2	; 210
     b18:	ef 2e       	mov	r14, r31
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	ff 2e       	mov	r15, r31
     b1e:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
     b20:	b8 01       	movw	r22, r16
     b22:	f7 01       	movw	r30, r14
     b24:	81 91       	ld	r24, Z+
     b26:	7f 01       	movw	r14, r30
     b28:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     b2c:	8e 14       	cp	r8, r14
     b2e:	9f 04       	cpc	r9, r15
     b30:	b9 f7       	brne	.-18     	; 0xb20 <uart_getchar+0x164>
     b32:	6e cf       	rjmp	.-292    	; 0xa10 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     b34:	b8 01       	movw	r22, r16
     b36:	88 e0       	ldi	r24, 0x08	; 8
     b38:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
		uart_putchar(' ', stream);
     b3c:	b8 01       	movw	r22, r16
     b3e:	80 e2       	ldi	r24, 0x20	; 32
     b40:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
		uart_putchar('\b', stream);
     b44:	b8 01       	movw	r22, r16
     b46:	88 e0       	ldi	r24, 0x08	; 8
     b48:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
		cp--;
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	8f 1a       	sub	r8, r31
     b50:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     b52:	82 ed       	ldi	r24, 0xD2	; 210
     b54:	88 16       	cp	r8, r24
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	98 06       	cpc	r9, r24
     b5a:	61 f7       	brne	.-40     	; 0xb34 <uart_getchar+0x178>
     b5c:	f3 01       	movw	r30, r6
     b5e:	31 96       	adiw	r30, 0x01	; 1
     b60:	4f 01       	movw	r8, r30
     b62:	56 cf       	rjmp	.-340    	; 0xa10 <uart_getchar+0x54>
     b64:	74 01       	movw	r14, r8
     b66:	f1 e0       	ldi	r31, 0x01	; 1
     b68:	ef 1a       	sub	r14, r31
     b6a:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     b6c:	b8 01       	movw	r22, r16
     b6e:	88 e0       	ldi	r24, 0x08	; 8
     b70:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
		uart_putchar(' ', stream);
     b74:	b8 01       	movw	r22, r16
     b76:	80 e2       	ldi	r24, 0x20	; 32
     b78:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
		uart_putchar('\b', stream);
     b7c:	b8 01       	movw	r22, r16
     b7e:	88 e0       	ldi	r24, 0x08	; 8
     b80:	0e 94 bd 04 	call	0x97a	; 0x97a <uart_putchar>
		cp--;
     b84:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     b86:	ea 14       	cp	r14, r10
     b88:	fb 04       	cpc	r15, r11
     b8a:	09 f4       	brne	.+2      	; 0xb8e <uart_getchar+0x1d2>
     b8c:	41 cf       	rjmp	.-382    	; 0xa10 <uart_getchar+0x54>
     b8e:	f7 01       	movw	r30, r14
     b90:	82 91       	ld	r24, -Z
     b92:	7f 01       	movw	r14, r30
     b94:	80 32       	cpi	r24, 0x20	; 32
     b96:	51 f7       	brne	.-44     	; 0xb6c <uart_getchar+0x1b0>
     b98:	3b cf       	rjmp	.-394    	; 0xa10 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
     b9a:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <rxp.1828>
     b9e:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <rxp.1828+0x1>
     ba2:	cf 01       	movw	r24, r30
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <rxp.1828+0x1>
     baa:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <rxp.1828>
     bae:	80 81       	ld	r24, Z
  if (c == '\n')
     bb0:	8a 30       	cpi	r24, 0x0A	; 10
     bb2:	21 f4       	brne	.+8      	; 0xbbc <uart_getchar+0x200>
    rxp = 0;
     bb4:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <rxp.1828+0x1>
     bb8:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <rxp.1828>

  return c;
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	08 c0       	rjmp	.+16     	; 0xbd0 <uart_getchar+0x214>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     bc0:	8e ef       	ldi	r24, 0xFE	; 254
     bc2:	9f ef       	ldi	r25, 0xFF	; 255
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <uart_getchar+0x214>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	9f ef       	ldi	r25, 0xFF	; 255
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <uart_getchar+0x214>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	9f 90       	pop	r9
     be6:	8f 90       	pop	r8
     be8:	7f 90       	pop	r7
     bea:	6f 90       	pop	r6
     bec:	08 95       	ret

00000bee <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     bee:	87 e6       	ldi	r24, 0x67	; 103
     bf0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     bf4:	88 e1       	ldi	r24, 0x18	; 24
     bf6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  
  stdout = &uartFile;
     bfa:	e9 e5       	ldi	r30, 0x59	; 89
     bfc:	f2 e0       	ldi	r31, 0x02	; 2
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	93 83       	std	Z+3, r25	; 0x03
     c04:	82 83       	std	Z+2, r24	; 0x02
  stdin = &uartFile;
     c06:	91 83       	std	Z+1, r25	; 0x01
     c08:	80 83       	st	Z, r24
  stderr = &uartFile;
     c0a:	95 83       	std	Z+5, r25	; 0x05
     c0c:	84 83       	std	Z+4, r24	; 0x04
     c0e:	08 95       	ret

00000c10 <__subsf3>:
     c10:	50 58       	subi	r21, 0x80	; 128

00000c12 <__addsf3>:
     c12:	bb 27       	eor	r27, r27
     c14:	aa 27       	eor	r26, r26
     c16:	0e 94 20 06 	call	0xc40	; 0xc40 <__addsf3x>
     c1a:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_round>
     c1e:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_pscA>
     c22:	38 f0       	brcs	.+14     	; 0xc32 <__addsf3+0x20>
     c24:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_pscB>
     c28:	20 f0       	brcs	.+8      	; 0xc32 <__addsf3+0x20>
     c2a:	39 f4       	brne	.+14     	; 0xc3a <__addsf3+0x28>
     c2c:	9f 3f       	cpi	r25, 0xFF	; 255
     c2e:	19 f4       	brne	.+6      	; 0xc36 <__addsf3+0x24>
     c30:	26 f4       	brtc	.+8      	; 0xc3a <__addsf3+0x28>
     c32:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_nan>
     c36:	0e f4       	brtc	.+2      	; 0xc3a <__addsf3+0x28>
     c38:	e0 95       	com	r30
     c3a:	e7 fb       	bst	r30, 7
     c3c:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_inf>

00000c40 <__addsf3x>:
     c40:	e9 2f       	mov	r30, r25
     c42:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_split3>
     c46:	58 f3       	brcs	.-42     	; 0xc1e <__addsf3+0xc>
     c48:	ba 17       	cp	r27, r26
     c4a:	62 07       	cpc	r22, r18
     c4c:	73 07       	cpc	r23, r19
     c4e:	84 07       	cpc	r24, r20
     c50:	95 07       	cpc	r25, r21
     c52:	20 f0       	brcs	.+8      	; 0xc5c <__addsf3x+0x1c>
     c54:	79 f4       	brne	.+30     	; 0xc74 <__addsf3x+0x34>
     c56:	a6 f5       	brtc	.+104    	; 0xcc0 <__addsf3x+0x80>
     c58:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_zero>
     c5c:	0e f4       	brtc	.+2      	; 0xc60 <__addsf3x+0x20>
     c5e:	e0 95       	com	r30
     c60:	0b 2e       	mov	r0, r27
     c62:	ba 2f       	mov	r27, r26
     c64:	a0 2d       	mov	r26, r0
     c66:	0b 01       	movw	r0, r22
     c68:	b9 01       	movw	r22, r18
     c6a:	90 01       	movw	r18, r0
     c6c:	0c 01       	movw	r0, r24
     c6e:	ca 01       	movw	r24, r20
     c70:	a0 01       	movw	r20, r0
     c72:	11 24       	eor	r1, r1
     c74:	ff 27       	eor	r31, r31
     c76:	59 1b       	sub	r21, r25
     c78:	99 f0       	breq	.+38     	; 0xca0 <__addsf3x+0x60>
     c7a:	59 3f       	cpi	r21, 0xF9	; 249
     c7c:	50 f4       	brcc	.+20     	; 0xc92 <__addsf3x+0x52>
     c7e:	50 3e       	cpi	r21, 0xE0	; 224
     c80:	68 f1       	brcs	.+90     	; 0xcdc <__addsf3x+0x9c>
     c82:	1a 16       	cp	r1, r26
     c84:	f0 40       	sbci	r31, 0x00	; 0
     c86:	a2 2f       	mov	r26, r18
     c88:	23 2f       	mov	r18, r19
     c8a:	34 2f       	mov	r19, r20
     c8c:	44 27       	eor	r20, r20
     c8e:	58 5f       	subi	r21, 0xF8	; 248
     c90:	f3 cf       	rjmp	.-26     	; 0xc78 <__addsf3x+0x38>
     c92:	46 95       	lsr	r20
     c94:	37 95       	ror	r19
     c96:	27 95       	ror	r18
     c98:	a7 95       	ror	r26
     c9a:	f0 40       	sbci	r31, 0x00	; 0
     c9c:	53 95       	inc	r21
     c9e:	c9 f7       	brne	.-14     	; 0xc92 <__addsf3x+0x52>
     ca0:	7e f4       	brtc	.+30     	; 0xcc0 <__addsf3x+0x80>
     ca2:	1f 16       	cp	r1, r31
     ca4:	ba 0b       	sbc	r27, r26
     ca6:	62 0b       	sbc	r22, r18
     ca8:	73 0b       	sbc	r23, r19
     caa:	84 0b       	sbc	r24, r20
     cac:	ba f0       	brmi	.+46     	; 0xcdc <__addsf3x+0x9c>
     cae:	91 50       	subi	r25, 0x01	; 1
     cb0:	a1 f0       	breq	.+40     	; 0xcda <__addsf3x+0x9a>
     cb2:	ff 0f       	add	r31, r31
     cb4:	bb 1f       	adc	r27, r27
     cb6:	66 1f       	adc	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	88 1f       	adc	r24, r24
     cbc:	c2 f7       	brpl	.-16     	; 0xcae <__addsf3x+0x6e>
     cbe:	0e c0       	rjmp	.+28     	; 0xcdc <__addsf3x+0x9c>
     cc0:	ba 0f       	add	r27, r26
     cc2:	62 1f       	adc	r22, r18
     cc4:	73 1f       	adc	r23, r19
     cc6:	84 1f       	adc	r24, r20
     cc8:	48 f4       	brcc	.+18     	; 0xcdc <__addsf3x+0x9c>
     cca:	87 95       	ror	r24
     ccc:	77 95       	ror	r23
     cce:	67 95       	ror	r22
     cd0:	b7 95       	ror	r27
     cd2:	f7 95       	ror	r31
     cd4:	9e 3f       	cpi	r25, 0xFE	; 254
     cd6:	08 f0       	brcs	.+2      	; 0xcda <__addsf3x+0x9a>
     cd8:	b0 cf       	rjmp	.-160    	; 0xc3a <__addsf3+0x28>
     cda:	93 95       	inc	r25
     cdc:	88 0f       	add	r24, r24
     cde:	08 f0       	brcs	.+2      	; 0xce2 <__addsf3x+0xa2>
     ce0:	99 27       	eor	r25, r25
     ce2:	ee 0f       	add	r30, r30
     ce4:	97 95       	ror	r25
     ce6:	87 95       	ror	r24
     ce8:	08 95       	ret

00000cea <__divsf3>:
     cea:	0e 94 89 06 	call	0xd12	; 0xd12 <__divsf3x>
     cee:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_round>
     cf2:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_pscB>
     cf6:	58 f0       	brcs	.+22     	; 0xd0e <__divsf3+0x24>
     cf8:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_pscA>
     cfc:	40 f0       	brcs	.+16     	; 0xd0e <__divsf3+0x24>
     cfe:	29 f4       	brne	.+10     	; 0xd0a <__divsf3+0x20>
     d00:	5f 3f       	cpi	r21, 0xFF	; 255
     d02:	29 f0       	breq	.+10     	; 0xd0e <__divsf3+0x24>
     d04:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_inf>
     d08:	51 11       	cpse	r21, r1
     d0a:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>
     d0e:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_nan>

00000d12 <__divsf3x>:
     d12:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_split3>
     d16:	68 f3       	brcs	.-38     	; 0xcf2 <__divsf3+0x8>

00000d18 <__divsf3_pse>:
     d18:	99 23       	and	r25, r25
     d1a:	b1 f3       	breq	.-20     	; 0xd08 <__divsf3+0x1e>
     d1c:	55 23       	and	r21, r21
     d1e:	91 f3       	breq	.-28     	; 0xd04 <__divsf3+0x1a>
     d20:	95 1b       	sub	r25, r21
     d22:	55 0b       	sbc	r21, r21
     d24:	bb 27       	eor	r27, r27
     d26:	aa 27       	eor	r26, r26
     d28:	62 17       	cp	r22, r18
     d2a:	73 07       	cpc	r23, r19
     d2c:	84 07       	cpc	r24, r20
     d2e:	38 f0       	brcs	.+14     	; 0xd3e <__divsf3_pse+0x26>
     d30:	9f 5f       	subi	r25, 0xFF	; 255
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	44 1f       	adc	r20, r20
     d3a:	aa 1f       	adc	r26, r26
     d3c:	a9 f3       	breq	.-22     	; 0xd28 <__divsf3_pse+0x10>
     d3e:	35 d0       	rcall	.+106    	; 0xdaa <__divsf3_pse+0x92>
     d40:	0e 2e       	mov	r0, r30
     d42:	3a f0       	brmi	.+14     	; 0xd52 <__divsf3_pse+0x3a>
     d44:	e0 e8       	ldi	r30, 0x80	; 128
     d46:	32 d0       	rcall	.+100    	; 0xdac <__divsf3_pse+0x94>
     d48:	91 50       	subi	r25, 0x01	; 1
     d4a:	50 40       	sbci	r21, 0x00	; 0
     d4c:	e6 95       	lsr	r30
     d4e:	00 1c       	adc	r0, r0
     d50:	ca f7       	brpl	.-14     	; 0xd44 <__divsf3_pse+0x2c>
     d52:	2b d0       	rcall	.+86     	; 0xdaa <__divsf3_pse+0x92>
     d54:	fe 2f       	mov	r31, r30
     d56:	29 d0       	rcall	.+82     	; 0xdaa <__divsf3_pse+0x92>
     d58:	66 0f       	add	r22, r22
     d5a:	77 1f       	adc	r23, r23
     d5c:	88 1f       	adc	r24, r24
     d5e:	bb 1f       	adc	r27, r27
     d60:	26 17       	cp	r18, r22
     d62:	37 07       	cpc	r19, r23
     d64:	48 07       	cpc	r20, r24
     d66:	ab 07       	cpc	r26, r27
     d68:	b0 e8       	ldi	r27, 0x80	; 128
     d6a:	09 f0       	breq	.+2      	; 0xd6e <__divsf3_pse+0x56>
     d6c:	bb 0b       	sbc	r27, r27
     d6e:	80 2d       	mov	r24, r0
     d70:	bf 01       	movw	r22, r30
     d72:	ff 27       	eor	r31, r31
     d74:	93 58       	subi	r25, 0x83	; 131
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	3a f0       	brmi	.+14     	; 0xd88 <__divsf3_pse+0x70>
     d7a:	9e 3f       	cpi	r25, 0xFE	; 254
     d7c:	51 05       	cpc	r21, r1
     d7e:	78 f0       	brcs	.+30     	; 0xd9e <__divsf3_pse+0x86>
     d80:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_inf>
     d84:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>
     d88:	5f 3f       	cpi	r21, 0xFF	; 255
     d8a:	e4 f3       	brlt	.-8      	; 0xd84 <__divsf3_pse+0x6c>
     d8c:	98 3e       	cpi	r25, 0xE8	; 232
     d8e:	d4 f3       	brlt	.-12     	; 0xd84 <__divsf3_pse+0x6c>
     d90:	86 95       	lsr	r24
     d92:	77 95       	ror	r23
     d94:	67 95       	ror	r22
     d96:	b7 95       	ror	r27
     d98:	f7 95       	ror	r31
     d9a:	9f 5f       	subi	r25, 0xFF	; 255
     d9c:	c9 f7       	brne	.-14     	; 0xd90 <__divsf3_pse+0x78>
     d9e:	88 0f       	add	r24, r24
     da0:	91 1d       	adc	r25, r1
     da2:	96 95       	lsr	r25
     da4:	87 95       	ror	r24
     da6:	97 f9       	bld	r25, 7
     da8:	08 95       	ret
     daa:	e1 e0       	ldi	r30, 0x01	; 1
     dac:	66 0f       	add	r22, r22
     dae:	77 1f       	adc	r23, r23
     db0:	88 1f       	adc	r24, r24
     db2:	bb 1f       	adc	r27, r27
     db4:	62 17       	cp	r22, r18
     db6:	73 07       	cpc	r23, r19
     db8:	84 07       	cpc	r24, r20
     dba:	ba 07       	cpc	r27, r26
     dbc:	20 f0       	brcs	.+8      	; 0xdc6 <__divsf3_pse+0xae>
     dbe:	62 1b       	sub	r22, r18
     dc0:	73 0b       	sbc	r23, r19
     dc2:	84 0b       	sbc	r24, r20
     dc4:	ba 0b       	sbc	r27, r26
     dc6:	ee 1f       	adc	r30, r30
     dc8:	88 f7       	brcc	.-30     	; 0xdac <__divsf3_pse+0x94>
     dca:	e0 95       	com	r30
     dcc:	08 95       	ret

00000dce <__fixsfsi>:
     dce:	0e 94 ee 06 	call	0xddc	; 0xddc <__fixunssfsi>
     dd2:	68 94       	set
     dd4:	b1 11       	cpse	r27, r1
     dd6:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>
     dda:	08 95       	ret

00000ddc <__fixunssfsi>:
     ddc:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_splitA>
     de0:	88 f0       	brcs	.+34     	; 0xe04 <__fixunssfsi+0x28>
     de2:	9f 57       	subi	r25, 0x7F	; 127
     de4:	98 f0       	brcs	.+38     	; 0xe0c <__fixunssfsi+0x30>
     de6:	b9 2f       	mov	r27, r25
     de8:	99 27       	eor	r25, r25
     dea:	b7 51       	subi	r27, 0x17	; 23
     dec:	b0 f0       	brcs	.+44     	; 0xe1a <__fixunssfsi+0x3e>
     dee:	e1 f0       	breq	.+56     	; 0xe28 <__fixunssfsi+0x4c>
     df0:	66 0f       	add	r22, r22
     df2:	77 1f       	adc	r23, r23
     df4:	88 1f       	adc	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	1a f0       	brmi	.+6      	; 0xe00 <__fixunssfsi+0x24>
     dfa:	ba 95       	dec	r27
     dfc:	c9 f7       	brne	.-14     	; 0xdf0 <__fixunssfsi+0x14>
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <__fixunssfsi+0x4c>
     e00:	b1 30       	cpi	r27, 0x01	; 1
     e02:	91 f0       	breq	.+36     	; 0xe28 <__fixunssfsi+0x4c>
     e04:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_zero>
     e08:	b1 e0       	ldi	r27, 0x01	; 1
     e0a:	08 95       	ret
     e0c:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_zero>
     e10:	67 2f       	mov	r22, r23
     e12:	78 2f       	mov	r23, r24
     e14:	88 27       	eor	r24, r24
     e16:	b8 5f       	subi	r27, 0xF8	; 248
     e18:	39 f0       	breq	.+14     	; 0xe28 <__fixunssfsi+0x4c>
     e1a:	b9 3f       	cpi	r27, 0xF9	; 249
     e1c:	cc f3       	brlt	.-14     	; 0xe10 <__fixunssfsi+0x34>
     e1e:	86 95       	lsr	r24
     e20:	77 95       	ror	r23
     e22:	67 95       	ror	r22
     e24:	b3 95       	inc	r27
     e26:	d9 f7       	brne	.-10     	; 0xe1e <__fixunssfsi+0x42>
     e28:	3e f4       	brtc	.+14     	; 0xe38 <__fixunssfsi+0x5c>
     e2a:	90 95       	com	r25
     e2c:	80 95       	com	r24
     e2e:	70 95       	com	r23
     e30:	61 95       	neg	r22
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	8f 4f       	sbci	r24, 0xFF	; 255
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	08 95       	ret

00000e3a <__floatunsisf>:
     e3a:	e8 94       	clt
     e3c:	09 c0       	rjmp	.+18     	; 0xe50 <__floatsisf+0x12>

00000e3e <__floatsisf>:
     e3e:	97 fb       	bst	r25, 7
     e40:	3e f4       	brtc	.+14     	; 0xe50 <__floatsisf+0x12>
     e42:	90 95       	com	r25
     e44:	80 95       	com	r24
     e46:	70 95       	com	r23
     e48:	61 95       	neg	r22
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	8f 4f       	sbci	r24, 0xFF	; 255
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	99 23       	and	r25, r25
     e52:	a9 f0       	breq	.+42     	; 0xe7e <__floatsisf+0x40>
     e54:	f9 2f       	mov	r31, r25
     e56:	96 e9       	ldi	r25, 0x96	; 150
     e58:	bb 27       	eor	r27, r27
     e5a:	93 95       	inc	r25
     e5c:	f6 95       	lsr	r31
     e5e:	87 95       	ror	r24
     e60:	77 95       	ror	r23
     e62:	67 95       	ror	r22
     e64:	b7 95       	ror	r27
     e66:	f1 11       	cpse	r31, r1
     e68:	f8 cf       	rjmp	.-16     	; 0xe5a <__floatsisf+0x1c>
     e6a:	fa f4       	brpl	.+62     	; 0xeaa <__floatsisf+0x6c>
     e6c:	bb 0f       	add	r27, r27
     e6e:	11 f4       	brne	.+4      	; 0xe74 <__floatsisf+0x36>
     e70:	60 ff       	sbrs	r22, 0
     e72:	1b c0       	rjmp	.+54     	; 0xeaa <__floatsisf+0x6c>
     e74:	6f 5f       	subi	r22, 0xFF	; 255
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	8f 4f       	sbci	r24, 0xFF	; 255
     e7a:	9f 4f       	sbci	r25, 0xFF	; 255
     e7c:	16 c0       	rjmp	.+44     	; 0xeaa <__floatsisf+0x6c>
     e7e:	88 23       	and	r24, r24
     e80:	11 f0       	breq	.+4      	; 0xe86 <__floatsisf+0x48>
     e82:	96 e9       	ldi	r25, 0x96	; 150
     e84:	11 c0       	rjmp	.+34     	; 0xea8 <__floatsisf+0x6a>
     e86:	77 23       	and	r23, r23
     e88:	21 f0       	breq	.+8      	; 0xe92 <__floatsisf+0x54>
     e8a:	9e e8       	ldi	r25, 0x8E	; 142
     e8c:	87 2f       	mov	r24, r23
     e8e:	76 2f       	mov	r23, r22
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <__floatsisf+0x5e>
     e92:	66 23       	and	r22, r22
     e94:	71 f0       	breq	.+28     	; 0xeb2 <__floatsisf+0x74>
     e96:	96 e8       	ldi	r25, 0x86	; 134
     e98:	86 2f       	mov	r24, r22
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	2a f0       	brmi	.+10     	; 0xeaa <__floatsisf+0x6c>
     ea0:	9a 95       	dec	r25
     ea2:	66 0f       	add	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	da f7       	brpl	.-10     	; 0xea0 <__floatsisf+0x62>
     eaa:	88 0f       	add	r24, r24
     eac:	96 95       	lsr	r25
     eae:	87 95       	ror	r24
     eb0:	97 f9       	bld	r25, 7
     eb2:	08 95       	ret

00000eb4 <__fp_inf>:
     eb4:	97 f9       	bld	r25, 7
     eb6:	9f 67       	ori	r25, 0x7F	; 127
     eb8:	80 e8       	ldi	r24, 0x80	; 128
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	08 95       	ret

00000ec0 <__fp_nan>:
     ec0:	9f ef       	ldi	r25, 0xFF	; 255
     ec2:	80 ec       	ldi	r24, 0xC0	; 192
     ec4:	08 95       	ret

00000ec6 <__fp_pscA>:
     ec6:	00 24       	eor	r0, r0
     ec8:	0a 94       	dec	r0
     eca:	16 16       	cp	r1, r22
     ecc:	17 06       	cpc	r1, r23
     ece:	18 06       	cpc	r1, r24
     ed0:	09 06       	cpc	r0, r25
     ed2:	08 95       	ret

00000ed4 <__fp_pscB>:
     ed4:	00 24       	eor	r0, r0
     ed6:	0a 94       	dec	r0
     ed8:	12 16       	cp	r1, r18
     eda:	13 06       	cpc	r1, r19
     edc:	14 06       	cpc	r1, r20
     ede:	05 06       	cpc	r0, r21
     ee0:	08 95       	ret

00000ee2 <__fp_round>:
     ee2:	09 2e       	mov	r0, r25
     ee4:	03 94       	inc	r0
     ee6:	00 0c       	add	r0, r0
     ee8:	11 f4       	brne	.+4      	; 0xeee <__fp_round+0xc>
     eea:	88 23       	and	r24, r24
     eec:	52 f0       	brmi	.+20     	; 0xf02 <__fp_round+0x20>
     eee:	bb 0f       	add	r27, r27
     ef0:	40 f4       	brcc	.+16     	; 0xf02 <__fp_round+0x20>
     ef2:	bf 2b       	or	r27, r31
     ef4:	11 f4       	brne	.+4      	; 0xefa <__fp_round+0x18>
     ef6:	60 ff       	sbrs	r22, 0
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <__fp_round+0x20>
     efa:	6f 5f       	subi	r22, 0xFF	; 255
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	8f 4f       	sbci	r24, 0xFF	; 255
     f00:	9f 4f       	sbci	r25, 0xFF	; 255
     f02:	08 95       	ret

00000f04 <__fp_split3>:
     f04:	57 fd       	sbrc	r21, 7
     f06:	90 58       	subi	r25, 0x80	; 128
     f08:	44 0f       	add	r20, r20
     f0a:	55 1f       	adc	r21, r21
     f0c:	59 f0       	breq	.+22     	; 0xf24 <__fp_splitA+0x10>
     f0e:	5f 3f       	cpi	r21, 0xFF	; 255
     f10:	71 f0       	breq	.+28     	; 0xf2e <__fp_splitA+0x1a>
     f12:	47 95       	ror	r20

00000f14 <__fp_splitA>:
     f14:	88 0f       	add	r24, r24
     f16:	97 fb       	bst	r25, 7
     f18:	99 1f       	adc	r25, r25
     f1a:	61 f0       	breq	.+24     	; 0xf34 <__fp_splitA+0x20>
     f1c:	9f 3f       	cpi	r25, 0xFF	; 255
     f1e:	79 f0       	breq	.+30     	; 0xf3e <__fp_splitA+0x2a>
     f20:	87 95       	ror	r24
     f22:	08 95       	ret
     f24:	12 16       	cp	r1, r18
     f26:	13 06       	cpc	r1, r19
     f28:	14 06       	cpc	r1, r20
     f2a:	55 1f       	adc	r21, r21
     f2c:	f2 cf       	rjmp	.-28     	; 0xf12 <__fp_split3+0xe>
     f2e:	46 95       	lsr	r20
     f30:	f1 df       	rcall	.-30     	; 0xf14 <__fp_splitA>
     f32:	08 c0       	rjmp	.+16     	; 0xf44 <__fp_splitA+0x30>
     f34:	16 16       	cp	r1, r22
     f36:	17 06       	cpc	r1, r23
     f38:	18 06       	cpc	r1, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	f1 cf       	rjmp	.-30     	; 0xf20 <__fp_splitA+0xc>
     f3e:	86 95       	lsr	r24
     f40:	71 05       	cpc	r23, r1
     f42:	61 05       	cpc	r22, r1
     f44:	08 94       	sec
     f46:	08 95       	ret

00000f48 <__fp_zero>:
     f48:	e8 94       	clt

00000f4a <__fp_szero>:
     f4a:	bb 27       	eor	r27, r27
     f4c:	66 27       	eor	r22, r22
     f4e:	77 27       	eor	r23, r23
     f50:	cb 01       	movw	r24, r22
     f52:	97 f9       	bld	r25, 7
     f54:	08 95       	ret

00000f56 <__mulsf3>:
     f56:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3x>
     f5a:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_round>
     f5e:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_pscA>
     f62:	38 f0       	brcs	.+14     	; 0xf72 <__mulsf3+0x1c>
     f64:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_pscB>
     f68:	20 f0       	brcs	.+8      	; 0xf72 <__mulsf3+0x1c>
     f6a:	95 23       	and	r25, r21
     f6c:	11 f0       	breq	.+4      	; 0xf72 <__mulsf3+0x1c>
     f6e:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_inf>
     f72:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_nan>
     f76:	11 24       	eor	r1, r1
     f78:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>

00000f7c <__mulsf3x>:
     f7c:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_split3>
     f80:	70 f3       	brcs	.-36     	; 0xf5e <__mulsf3+0x8>

00000f82 <__mulsf3_pse>:
     f82:	95 9f       	mul	r25, r21
     f84:	c1 f3       	breq	.-16     	; 0xf76 <__mulsf3+0x20>
     f86:	95 0f       	add	r25, r21
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	55 1f       	adc	r21, r21
     f8c:	62 9f       	mul	r22, r18
     f8e:	f0 01       	movw	r30, r0
     f90:	72 9f       	mul	r23, r18
     f92:	bb 27       	eor	r27, r27
     f94:	f0 0d       	add	r31, r0
     f96:	b1 1d       	adc	r27, r1
     f98:	63 9f       	mul	r22, r19
     f9a:	aa 27       	eor	r26, r26
     f9c:	f0 0d       	add	r31, r0
     f9e:	b1 1d       	adc	r27, r1
     fa0:	aa 1f       	adc	r26, r26
     fa2:	64 9f       	mul	r22, r20
     fa4:	66 27       	eor	r22, r22
     fa6:	b0 0d       	add	r27, r0
     fa8:	a1 1d       	adc	r26, r1
     faa:	66 1f       	adc	r22, r22
     fac:	82 9f       	mul	r24, r18
     fae:	22 27       	eor	r18, r18
     fb0:	b0 0d       	add	r27, r0
     fb2:	a1 1d       	adc	r26, r1
     fb4:	62 1f       	adc	r22, r18
     fb6:	73 9f       	mul	r23, r19
     fb8:	b0 0d       	add	r27, r0
     fba:	a1 1d       	adc	r26, r1
     fbc:	62 1f       	adc	r22, r18
     fbe:	83 9f       	mul	r24, r19
     fc0:	a0 0d       	add	r26, r0
     fc2:	61 1d       	adc	r22, r1
     fc4:	22 1f       	adc	r18, r18
     fc6:	74 9f       	mul	r23, r20
     fc8:	33 27       	eor	r19, r19
     fca:	a0 0d       	add	r26, r0
     fcc:	61 1d       	adc	r22, r1
     fce:	23 1f       	adc	r18, r19
     fd0:	84 9f       	mul	r24, r20
     fd2:	60 0d       	add	r22, r0
     fd4:	21 1d       	adc	r18, r1
     fd6:	82 2f       	mov	r24, r18
     fd8:	76 2f       	mov	r23, r22
     fda:	6a 2f       	mov	r22, r26
     fdc:	11 24       	eor	r1, r1
     fde:	9f 57       	subi	r25, 0x7F	; 127
     fe0:	50 40       	sbci	r21, 0x00	; 0
     fe2:	9a f0       	brmi	.+38     	; 0x100a <__mulsf3_pse+0x88>
     fe4:	f1 f0       	breq	.+60     	; 0x1022 <__mulsf3_pse+0xa0>
     fe6:	88 23       	and	r24, r24
     fe8:	4a f0       	brmi	.+18     	; 0xffc <__mulsf3_pse+0x7a>
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	bb 1f       	adc	r27, r27
     ff0:	66 1f       	adc	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	91 50       	subi	r25, 0x01	; 1
     ff8:	50 40       	sbci	r21, 0x00	; 0
     ffa:	a9 f7       	brne	.-22     	; 0xfe6 <__mulsf3_pse+0x64>
     ffc:	9e 3f       	cpi	r25, 0xFE	; 254
     ffe:	51 05       	cpc	r21, r1
    1000:	80 f0       	brcs	.+32     	; 0x1022 <__mulsf3_pse+0xa0>
    1002:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_inf>
    1006:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>
    100a:	5f 3f       	cpi	r21, 0xFF	; 255
    100c:	e4 f3       	brlt	.-8      	; 0x1006 <__mulsf3_pse+0x84>
    100e:	98 3e       	cpi	r25, 0xE8	; 232
    1010:	d4 f3       	brlt	.-12     	; 0x1006 <__mulsf3_pse+0x84>
    1012:	86 95       	lsr	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b7 95       	ror	r27
    101a:	f7 95       	ror	r31
    101c:	e7 95       	ror	r30
    101e:	9f 5f       	subi	r25, 0xFF	; 255
    1020:	c1 f7       	brne	.-16     	; 0x1012 <__mulsf3_pse+0x90>
    1022:	fe 2b       	or	r31, r30
    1024:	88 0f       	add	r24, r24
    1026:	91 1d       	adc	r25, r1
    1028:	96 95       	lsr	r25
    102a:	87 95       	ror	r24
    102c:	97 f9       	bld	r25, 7
    102e:	08 95       	ret

00001030 <strcmp>:
    1030:	fb 01       	movw	r30, r22
    1032:	dc 01       	movw	r26, r24
    1034:	8d 91       	ld	r24, X+
    1036:	01 90       	ld	r0, Z+
    1038:	80 19       	sub	r24, r0
    103a:	01 10       	cpse	r0, r1
    103c:	d9 f3       	breq	.-10     	; 0x1034 <strcmp+0x4>
    103e:	99 0b       	sbc	r25, r25
    1040:	08 95       	ret

00001042 <fputc>:
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	fb 01       	movw	r30, r22
    104c:	23 81       	ldd	r18, Z+3	; 0x03
    104e:	21 fd       	sbrc	r18, 1
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <fputc+0x16>
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	9f ef       	ldi	r25, 0xFF	; 255
    1056:	2c c0       	rjmp	.+88     	; 0x10b0 <fputc+0x6e>
    1058:	22 ff       	sbrs	r18, 2
    105a:	16 c0       	rjmp	.+44     	; 0x1088 <fputc+0x46>
    105c:	46 81       	ldd	r20, Z+6	; 0x06
    105e:	57 81       	ldd	r21, Z+7	; 0x07
    1060:	24 81       	ldd	r18, Z+4	; 0x04
    1062:	35 81       	ldd	r19, Z+5	; 0x05
    1064:	42 17       	cp	r20, r18
    1066:	53 07       	cpc	r21, r19
    1068:	44 f4       	brge	.+16     	; 0x107a <fputc+0x38>
    106a:	a0 81       	ld	r26, Z
    106c:	b1 81       	ldd	r27, Z+1	; 0x01
    106e:	9d 01       	movw	r18, r26
    1070:	2f 5f       	subi	r18, 0xFF	; 255
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	31 83       	std	Z+1, r19	; 0x01
    1076:	20 83       	st	Z, r18
    1078:	8c 93       	st	X, r24
    107a:	26 81       	ldd	r18, Z+6	; 0x06
    107c:	37 81       	ldd	r19, Z+7	; 0x07
    107e:	2f 5f       	subi	r18, 0xFF	; 255
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	37 83       	std	Z+7, r19	; 0x07
    1084:	26 83       	std	Z+6, r18	; 0x06
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <fputc+0x6e>
    1088:	8b 01       	movw	r16, r22
    108a:	ec 01       	movw	r28, r24
    108c:	fb 01       	movw	r30, r22
    108e:	00 84       	ldd	r0, Z+8	; 0x08
    1090:	f1 85       	ldd	r31, Z+9	; 0x09
    1092:	e0 2d       	mov	r30, r0
    1094:	09 95       	icall
    1096:	89 2b       	or	r24, r25
    1098:	e1 f6       	brne	.-72     	; 0x1052 <fputc+0x10>
    109a:	d8 01       	movw	r26, r16
    109c:	16 96       	adiw	r26, 0x06	; 6
    109e:	8d 91       	ld	r24, X+
    10a0:	9c 91       	ld	r25, X
    10a2:	17 97       	sbiw	r26, 0x07	; 7
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	17 96       	adiw	r26, 0x07	; 7
    10a8:	9c 93       	st	X, r25
    10aa:	8e 93       	st	-X, r24
    10ac:	16 97       	sbiw	r26, 0x06	; 6
    10ae:	ce 01       	movw	r24, r28
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <fwrite>:
    10ba:	a0 e0       	ldi	r26, 0x00	; 0
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e3 e6       	ldi	r30, 0x63	; 99
    10c0:	f8 e0       	ldi	r31, 0x08	; 8
    10c2:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__prologue_saves__+0xc>
    10c6:	5b 01       	movw	r10, r22
    10c8:	4a 01       	movw	r8, r20
    10ca:	79 01       	movw	r14, r18
    10cc:	d9 01       	movw	r26, r18
    10ce:	13 96       	adiw	r26, 0x03	; 3
    10d0:	2c 91       	ld	r18, X
    10d2:	21 ff       	sbrs	r18, 1
    10d4:	1d c0       	rjmp	.+58     	; 0x1110 <fwrite+0x56>
    10d6:	c0 e0       	ldi	r28, 0x00	; 0
    10d8:	d0 e0       	ldi	r29, 0x00	; 0
    10da:	c8 15       	cp	r28, r8
    10dc:	d9 05       	cpc	r29, r9
    10de:	d9 f0       	breq	.+54     	; 0x1116 <fwrite+0x5c>
    10e0:	8c 01       	movw	r16, r24
    10e2:	6c 01       	movw	r12, r24
    10e4:	ca 0c       	add	r12, r10
    10e6:	db 1c       	adc	r13, r11
    10e8:	c8 01       	movw	r24, r16
    10ea:	0c 15       	cp	r16, r12
    10ec:	1d 05       	cpc	r17, r13
    10ee:	71 f0       	breq	.+28     	; 0x110c <fwrite+0x52>
    10f0:	0f 5f       	subi	r16, 0xFF	; 255
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	d7 01       	movw	r26, r14
    10f6:	18 96       	adiw	r26, 0x08	; 8
    10f8:	ed 91       	ld	r30, X+
    10fa:	fc 91       	ld	r31, X
    10fc:	19 97       	sbiw	r26, 0x09	; 9
    10fe:	b7 01       	movw	r22, r14
    1100:	dc 01       	movw	r26, r24
    1102:	8c 91       	ld	r24, X
    1104:	09 95       	icall
    1106:	89 2b       	or	r24, r25
    1108:	79 f3       	breq	.-34     	; 0x10e8 <fwrite+0x2e>
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <fwrite+0x5c>
    110c:	21 96       	adiw	r28, 0x01	; 1
    110e:	e5 cf       	rjmp	.-54     	; 0x10da <fwrite+0x20>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <fwrite+0x5e>
    1116:	ce 01       	movw	r24, r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	ec e0       	ldi	r30, 0x0C	; 12
    111e:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__epilogue_restores__+0xc>

00001122 <printf>:
    1122:	a0 e0       	ldi	r26, 0x00	; 0
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e7 e9       	ldi	r30, 0x97	; 151
    1128:	f8 e0       	ldi	r31, 0x08	; 8
    112a:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__prologue_saves__+0x20>
    112e:	ae 01       	movw	r20, r28
    1130:	4b 5f       	subi	r20, 0xFB	; 251
    1132:	5f 4f       	sbci	r21, 0xFF	; 255
    1134:	fa 01       	movw	r30, r20
    1136:	61 91       	ld	r22, Z+
    1138:	71 91       	ld	r23, Z+
    113a:	af 01       	movw	r20, r30
    113c:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <__iob+0x2>
    1140:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <__iob+0x3>
    1144:	0e 94 a7 08 	call	0x114e	; 0x114e <vfprintf>
    1148:	e2 e0       	ldi	r30, 0x02	; 2
    114a:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__epilogue_restores__+0x20>

0000114e <vfprintf>:
    114e:	ab e0       	ldi	r26, 0x0B	; 11
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ed ea       	ldi	r30, 0xAD	; 173
    1154:	f8 e0       	ldi	r31, 0x08	; 8
    1156:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__prologue_saves__>
    115a:	6c 01       	movw	r12, r24
    115c:	7b 01       	movw	r14, r22
    115e:	8a 01       	movw	r16, r20
    1160:	fc 01       	movw	r30, r24
    1162:	17 82       	std	Z+7, r1	; 0x07
    1164:	16 82       	std	Z+6, r1	; 0x06
    1166:	83 81       	ldd	r24, Z+3	; 0x03
    1168:	81 ff       	sbrs	r24, 1
    116a:	cc c1       	rjmp	.+920    	; 0x1504 <vfprintf+0x3b6>
    116c:	ce 01       	movw	r24, r28
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	3c 01       	movw	r6, r24
    1172:	f6 01       	movw	r30, r12
    1174:	93 81       	ldd	r25, Z+3	; 0x03
    1176:	f7 01       	movw	r30, r14
    1178:	93 fd       	sbrc	r25, 3
    117a:	85 91       	lpm	r24, Z+
    117c:	93 ff       	sbrs	r25, 3
    117e:	81 91       	ld	r24, Z+
    1180:	7f 01       	movw	r14, r30
    1182:	88 23       	and	r24, r24
    1184:	09 f4       	brne	.+2      	; 0x1188 <vfprintf+0x3a>
    1186:	ba c1       	rjmp	.+884    	; 0x14fc <vfprintf+0x3ae>
    1188:	85 32       	cpi	r24, 0x25	; 37
    118a:	39 f4       	brne	.+14     	; 0x119a <vfprintf+0x4c>
    118c:	93 fd       	sbrc	r25, 3
    118e:	85 91       	lpm	r24, Z+
    1190:	93 ff       	sbrs	r25, 3
    1192:	81 91       	ld	r24, Z+
    1194:	7f 01       	movw	r14, r30
    1196:	85 32       	cpi	r24, 0x25	; 37
    1198:	29 f4       	brne	.+10     	; 0x11a4 <vfprintf+0x56>
    119a:	b6 01       	movw	r22, r12
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
    11a2:	e7 cf       	rjmp	.-50     	; 0x1172 <vfprintf+0x24>
    11a4:	91 2c       	mov	r9, r1
    11a6:	21 2c       	mov	r2, r1
    11a8:	31 2c       	mov	r3, r1
    11aa:	ff e1       	ldi	r31, 0x1F	; 31
    11ac:	f3 15       	cp	r31, r3
    11ae:	d8 f0       	brcs	.+54     	; 0x11e6 <vfprintf+0x98>
    11b0:	8b 32       	cpi	r24, 0x2B	; 43
    11b2:	79 f0       	breq	.+30     	; 0x11d2 <vfprintf+0x84>
    11b4:	38 f4       	brcc	.+14     	; 0x11c4 <vfprintf+0x76>
    11b6:	80 32       	cpi	r24, 0x20	; 32
    11b8:	79 f0       	breq	.+30     	; 0x11d8 <vfprintf+0x8a>
    11ba:	83 32       	cpi	r24, 0x23	; 35
    11bc:	a1 f4       	brne	.+40     	; 0x11e6 <vfprintf+0x98>
    11be:	23 2d       	mov	r18, r3
    11c0:	20 61       	ori	r18, 0x10	; 16
    11c2:	1d c0       	rjmp	.+58     	; 0x11fe <vfprintf+0xb0>
    11c4:	8d 32       	cpi	r24, 0x2D	; 45
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <vfprintf+0x92>
    11c8:	80 33       	cpi	r24, 0x30	; 48
    11ca:	69 f4       	brne	.+26     	; 0x11e6 <vfprintf+0x98>
    11cc:	23 2d       	mov	r18, r3
    11ce:	21 60       	ori	r18, 0x01	; 1
    11d0:	16 c0       	rjmp	.+44     	; 0x11fe <vfprintf+0xb0>
    11d2:	83 2d       	mov	r24, r3
    11d4:	82 60       	ori	r24, 0x02	; 2
    11d6:	38 2e       	mov	r3, r24
    11d8:	e3 2d       	mov	r30, r3
    11da:	e4 60       	ori	r30, 0x04	; 4
    11dc:	3e 2e       	mov	r3, r30
    11de:	2a c0       	rjmp	.+84     	; 0x1234 <vfprintf+0xe6>
    11e0:	f3 2d       	mov	r31, r3
    11e2:	f8 60       	ori	r31, 0x08	; 8
    11e4:	1d c0       	rjmp	.+58     	; 0x1220 <vfprintf+0xd2>
    11e6:	37 fc       	sbrc	r3, 7
    11e8:	2d c0       	rjmp	.+90     	; 0x1244 <vfprintf+0xf6>
    11ea:	20 ed       	ldi	r18, 0xD0	; 208
    11ec:	28 0f       	add	r18, r24
    11ee:	2a 30       	cpi	r18, 0x0A	; 10
    11f0:	40 f0       	brcs	.+16     	; 0x1202 <vfprintf+0xb4>
    11f2:	8e 32       	cpi	r24, 0x2E	; 46
    11f4:	b9 f4       	brne	.+46     	; 0x1224 <vfprintf+0xd6>
    11f6:	36 fc       	sbrc	r3, 6
    11f8:	81 c1       	rjmp	.+770    	; 0x14fc <vfprintf+0x3ae>
    11fa:	23 2d       	mov	r18, r3
    11fc:	20 64       	ori	r18, 0x40	; 64
    11fe:	32 2e       	mov	r3, r18
    1200:	19 c0       	rjmp	.+50     	; 0x1234 <vfprintf+0xe6>
    1202:	36 fe       	sbrs	r3, 6
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <vfprintf+0xc4>
    1206:	8a e0       	ldi	r24, 0x0A	; 10
    1208:	98 9e       	mul	r9, r24
    120a:	20 0d       	add	r18, r0
    120c:	11 24       	eor	r1, r1
    120e:	92 2e       	mov	r9, r18
    1210:	11 c0       	rjmp	.+34     	; 0x1234 <vfprintf+0xe6>
    1212:	ea e0       	ldi	r30, 0x0A	; 10
    1214:	2e 9e       	mul	r2, r30
    1216:	20 0d       	add	r18, r0
    1218:	11 24       	eor	r1, r1
    121a:	22 2e       	mov	r2, r18
    121c:	f3 2d       	mov	r31, r3
    121e:	f0 62       	ori	r31, 0x20	; 32
    1220:	3f 2e       	mov	r3, r31
    1222:	08 c0       	rjmp	.+16     	; 0x1234 <vfprintf+0xe6>
    1224:	8c 36       	cpi	r24, 0x6C	; 108
    1226:	21 f4       	brne	.+8      	; 0x1230 <vfprintf+0xe2>
    1228:	83 2d       	mov	r24, r3
    122a:	80 68       	ori	r24, 0x80	; 128
    122c:	38 2e       	mov	r3, r24
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <vfprintf+0xe6>
    1230:	88 36       	cpi	r24, 0x68	; 104
    1232:	41 f4       	brne	.+16     	; 0x1244 <vfprintf+0xf6>
    1234:	f7 01       	movw	r30, r14
    1236:	93 fd       	sbrc	r25, 3
    1238:	85 91       	lpm	r24, Z+
    123a:	93 ff       	sbrs	r25, 3
    123c:	81 91       	ld	r24, Z+
    123e:	7f 01       	movw	r14, r30
    1240:	81 11       	cpse	r24, r1
    1242:	b3 cf       	rjmp	.-154    	; 0x11aa <vfprintf+0x5c>
    1244:	98 2f       	mov	r25, r24
    1246:	9f 7d       	andi	r25, 0xDF	; 223
    1248:	95 54       	subi	r25, 0x45	; 69
    124a:	93 30       	cpi	r25, 0x03	; 3
    124c:	28 f4       	brcc	.+10     	; 0x1258 <vfprintf+0x10a>
    124e:	0c 5f       	subi	r16, 0xFC	; 252
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	9f e3       	ldi	r25, 0x3F	; 63
    1254:	99 83       	std	Y+1, r25	; 0x01
    1256:	0d c0       	rjmp	.+26     	; 0x1272 <vfprintf+0x124>
    1258:	83 36       	cpi	r24, 0x63	; 99
    125a:	31 f0       	breq	.+12     	; 0x1268 <vfprintf+0x11a>
    125c:	83 37       	cpi	r24, 0x73	; 115
    125e:	71 f0       	breq	.+28     	; 0x127c <vfprintf+0x12e>
    1260:	83 35       	cpi	r24, 0x53	; 83
    1262:	09 f0       	breq	.+2      	; 0x1266 <vfprintf+0x118>
    1264:	59 c0       	rjmp	.+178    	; 0x1318 <vfprintf+0x1ca>
    1266:	21 c0       	rjmp	.+66     	; 0x12aa <vfprintf+0x15c>
    1268:	f8 01       	movw	r30, r16
    126a:	80 81       	ld	r24, Z
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	0e 5f       	subi	r16, 0xFE	; 254
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	88 24       	eor	r8, r8
    1274:	83 94       	inc	r8
    1276:	91 2c       	mov	r9, r1
    1278:	53 01       	movw	r10, r6
    127a:	13 c0       	rjmp	.+38     	; 0x12a2 <vfprintf+0x154>
    127c:	28 01       	movw	r4, r16
    127e:	f2 e0       	ldi	r31, 0x02	; 2
    1280:	4f 0e       	add	r4, r31
    1282:	51 1c       	adc	r5, r1
    1284:	f8 01       	movw	r30, r16
    1286:	a0 80       	ld	r10, Z
    1288:	b1 80       	ldd	r11, Z+1	; 0x01
    128a:	36 fe       	sbrs	r3, 6
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <vfprintf+0x146>
    128e:	69 2d       	mov	r22, r9
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <vfprintf+0x14a>
    1294:	6f ef       	ldi	r22, 0xFF	; 255
    1296:	7f ef       	ldi	r23, 0xFF	; 255
    1298:	c5 01       	movw	r24, r10
    129a:	0e 94 93 0a 	call	0x1526	; 0x1526 <strnlen>
    129e:	4c 01       	movw	r8, r24
    12a0:	82 01       	movw	r16, r4
    12a2:	f3 2d       	mov	r31, r3
    12a4:	ff 77       	andi	r31, 0x7F	; 127
    12a6:	3f 2e       	mov	r3, r31
    12a8:	16 c0       	rjmp	.+44     	; 0x12d6 <vfprintf+0x188>
    12aa:	28 01       	movw	r4, r16
    12ac:	22 e0       	ldi	r18, 0x02	; 2
    12ae:	42 0e       	add	r4, r18
    12b0:	51 1c       	adc	r5, r1
    12b2:	f8 01       	movw	r30, r16
    12b4:	a0 80       	ld	r10, Z
    12b6:	b1 80       	ldd	r11, Z+1	; 0x01
    12b8:	36 fe       	sbrs	r3, 6
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <vfprintf+0x174>
    12bc:	69 2d       	mov	r22, r9
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0x178>
    12c2:	6f ef       	ldi	r22, 0xFF	; 255
    12c4:	7f ef       	ldi	r23, 0xFF	; 255
    12c6:	c5 01       	movw	r24, r10
    12c8:	0e 94 88 0a 	call	0x1510	; 0x1510 <strnlen_P>
    12cc:	4c 01       	movw	r8, r24
    12ce:	f3 2d       	mov	r31, r3
    12d0:	f0 68       	ori	r31, 0x80	; 128
    12d2:	3f 2e       	mov	r3, r31
    12d4:	82 01       	movw	r16, r4
    12d6:	33 fc       	sbrc	r3, 3
    12d8:	1b c0       	rjmp	.+54     	; 0x1310 <vfprintf+0x1c2>
    12da:	82 2d       	mov	r24, r2
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	88 16       	cp	r8, r24
    12e0:	99 06       	cpc	r9, r25
    12e2:	b0 f4       	brcc	.+44     	; 0x1310 <vfprintf+0x1c2>
    12e4:	b6 01       	movw	r22, r12
    12e6:	80 e2       	ldi	r24, 0x20	; 32
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
    12ee:	2a 94       	dec	r2
    12f0:	f4 cf       	rjmp	.-24     	; 0x12da <vfprintf+0x18c>
    12f2:	f5 01       	movw	r30, r10
    12f4:	37 fc       	sbrc	r3, 7
    12f6:	85 91       	lpm	r24, Z+
    12f8:	37 fe       	sbrs	r3, 7
    12fa:	81 91       	ld	r24, Z+
    12fc:	5f 01       	movw	r10, r30
    12fe:	b6 01       	movw	r22, r12
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
    1306:	21 10       	cpse	r2, r1
    1308:	2a 94       	dec	r2
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	82 1a       	sub	r8, r18
    130e:	91 08       	sbc	r9, r1
    1310:	81 14       	cp	r8, r1
    1312:	91 04       	cpc	r9, r1
    1314:	71 f7       	brne	.-36     	; 0x12f2 <vfprintf+0x1a4>
    1316:	e8 c0       	rjmp	.+464    	; 0x14e8 <vfprintf+0x39a>
    1318:	84 36       	cpi	r24, 0x64	; 100
    131a:	11 f0       	breq	.+4      	; 0x1320 <vfprintf+0x1d2>
    131c:	89 36       	cpi	r24, 0x69	; 105
    131e:	41 f5       	brne	.+80     	; 0x1370 <vfprintf+0x222>
    1320:	f8 01       	movw	r30, r16
    1322:	37 fe       	sbrs	r3, 7
    1324:	07 c0       	rjmp	.+14     	; 0x1334 <vfprintf+0x1e6>
    1326:	60 81       	ld	r22, Z
    1328:	71 81       	ldd	r23, Z+1	; 0x01
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	0c 5f       	subi	r16, 0xFC	; 252
    1330:	1f 4f       	sbci	r17, 0xFF	; 255
    1332:	08 c0       	rjmp	.+16     	; 0x1344 <vfprintf+0x1f6>
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	07 2e       	mov	r0, r23
    133a:	00 0c       	add	r0, r0
    133c:	88 0b       	sbc	r24, r24
    133e:	99 0b       	sbc	r25, r25
    1340:	0e 5f       	subi	r16, 0xFE	; 254
    1342:	1f 4f       	sbci	r17, 0xFF	; 255
    1344:	f3 2d       	mov	r31, r3
    1346:	ff 76       	andi	r31, 0x6F	; 111
    1348:	3f 2e       	mov	r3, r31
    134a:	97 ff       	sbrs	r25, 7
    134c:	09 c0       	rjmp	.+18     	; 0x1360 <vfprintf+0x212>
    134e:	90 95       	com	r25
    1350:	80 95       	com	r24
    1352:	70 95       	com	r23
    1354:	61 95       	neg	r22
    1356:	7f 4f       	sbci	r23, 0xFF	; 255
    1358:	8f 4f       	sbci	r24, 0xFF	; 255
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	f0 68       	ori	r31, 0x80	; 128
    135e:	3f 2e       	mov	r3, r31
    1360:	2a e0       	ldi	r18, 0x0A	; 10
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	a3 01       	movw	r20, r6
    1366:	0e 94 9e 0a 	call	0x153c	; 0x153c <__ultoa_invert>
    136a:	88 2e       	mov	r8, r24
    136c:	86 18       	sub	r8, r6
    136e:	45 c0       	rjmp	.+138    	; 0x13fa <vfprintf+0x2ac>
    1370:	85 37       	cpi	r24, 0x75	; 117
    1372:	31 f4       	brne	.+12     	; 0x1380 <vfprintf+0x232>
    1374:	23 2d       	mov	r18, r3
    1376:	2f 7e       	andi	r18, 0xEF	; 239
    1378:	b2 2e       	mov	r11, r18
    137a:	2a e0       	ldi	r18, 0x0A	; 10
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	25 c0       	rjmp	.+74     	; 0x13ca <vfprintf+0x27c>
    1380:	93 2d       	mov	r25, r3
    1382:	99 7f       	andi	r25, 0xF9	; 249
    1384:	b9 2e       	mov	r11, r25
    1386:	8f 36       	cpi	r24, 0x6F	; 111
    1388:	c1 f0       	breq	.+48     	; 0x13ba <vfprintf+0x26c>
    138a:	18 f4       	brcc	.+6      	; 0x1392 <vfprintf+0x244>
    138c:	88 35       	cpi	r24, 0x58	; 88
    138e:	79 f0       	breq	.+30     	; 0x13ae <vfprintf+0x260>
    1390:	b5 c0       	rjmp	.+362    	; 0x14fc <vfprintf+0x3ae>
    1392:	80 37       	cpi	r24, 0x70	; 112
    1394:	19 f0       	breq	.+6      	; 0x139c <vfprintf+0x24e>
    1396:	88 37       	cpi	r24, 0x78	; 120
    1398:	21 f0       	breq	.+8      	; 0x13a2 <vfprintf+0x254>
    139a:	b0 c0       	rjmp	.+352    	; 0x14fc <vfprintf+0x3ae>
    139c:	e9 2f       	mov	r30, r25
    139e:	e0 61       	ori	r30, 0x10	; 16
    13a0:	be 2e       	mov	r11, r30
    13a2:	b4 fe       	sbrs	r11, 4
    13a4:	0d c0       	rjmp	.+26     	; 0x13c0 <vfprintf+0x272>
    13a6:	fb 2d       	mov	r31, r11
    13a8:	f4 60       	ori	r31, 0x04	; 4
    13aa:	bf 2e       	mov	r11, r31
    13ac:	09 c0       	rjmp	.+18     	; 0x13c0 <vfprintf+0x272>
    13ae:	34 fe       	sbrs	r3, 4
    13b0:	0a c0       	rjmp	.+20     	; 0x13c6 <vfprintf+0x278>
    13b2:	29 2f       	mov	r18, r25
    13b4:	26 60       	ori	r18, 0x06	; 6
    13b6:	b2 2e       	mov	r11, r18
    13b8:	06 c0       	rjmp	.+12     	; 0x13c6 <vfprintf+0x278>
    13ba:	28 e0       	ldi	r18, 0x08	; 8
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <vfprintf+0x27c>
    13c0:	20 e1       	ldi	r18, 0x10	; 16
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <vfprintf+0x27c>
    13c6:	20 e1       	ldi	r18, 0x10	; 16
    13c8:	32 e0       	ldi	r19, 0x02	; 2
    13ca:	f8 01       	movw	r30, r16
    13cc:	b7 fe       	sbrs	r11, 7
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <vfprintf+0x290>
    13d0:	60 81       	ld	r22, Z
    13d2:	71 81       	ldd	r23, Z+1	; 0x01
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	93 81       	ldd	r25, Z+3	; 0x03
    13d8:	0c 5f       	subi	r16, 0xFC	; 252
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	06 c0       	rjmp	.+12     	; 0x13ea <vfprintf+0x29c>
    13de:	60 81       	ld	r22, Z
    13e0:	71 81       	ldd	r23, Z+1	; 0x01
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 5f       	subi	r16, 0xFE	; 254
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	a3 01       	movw	r20, r6
    13ec:	0e 94 9e 0a 	call	0x153c	; 0x153c <__ultoa_invert>
    13f0:	88 2e       	mov	r8, r24
    13f2:	86 18       	sub	r8, r6
    13f4:	fb 2d       	mov	r31, r11
    13f6:	ff 77       	andi	r31, 0x7F	; 127
    13f8:	3f 2e       	mov	r3, r31
    13fa:	36 fe       	sbrs	r3, 6
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <vfprintf+0x2ca>
    13fe:	23 2d       	mov	r18, r3
    1400:	2e 7f       	andi	r18, 0xFE	; 254
    1402:	a2 2e       	mov	r10, r18
    1404:	89 14       	cp	r8, r9
    1406:	58 f4       	brcc	.+22     	; 0x141e <vfprintf+0x2d0>
    1408:	34 fe       	sbrs	r3, 4
    140a:	0b c0       	rjmp	.+22     	; 0x1422 <vfprintf+0x2d4>
    140c:	32 fc       	sbrc	r3, 2
    140e:	09 c0       	rjmp	.+18     	; 0x1422 <vfprintf+0x2d4>
    1410:	83 2d       	mov	r24, r3
    1412:	8e 7e       	andi	r24, 0xEE	; 238
    1414:	a8 2e       	mov	r10, r24
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <vfprintf+0x2d4>
    1418:	b8 2c       	mov	r11, r8
    141a:	a3 2c       	mov	r10, r3
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <vfprintf+0x2d6>
    141e:	b8 2c       	mov	r11, r8
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <vfprintf+0x2d6>
    1422:	b9 2c       	mov	r11, r9
    1424:	a4 fe       	sbrs	r10, 4
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <vfprintf+0x2f8>
    1428:	fe 01       	movw	r30, r28
    142a:	e8 0d       	add	r30, r8
    142c:	f1 1d       	adc	r31, r1
    142e:	80 81       	ld	r24, Z
    1430:	80 33       	cpi	r24, 0x30	; 48
    1432:	21 f4       	brne	.+8      	; 0x143c <vfprintf+0x2ee>
    1434:	9a 2d       	mov	r25, r10
    1436:	99 7e       	andi	r25, 0xE9	; 233
    1438:	a9 2e       	mov	r10, r25
    143a:	09 c0       	rjmp	.+18     	; 0x144e <vfprintf+0x300>
    143c:	a2 fe       	sbrs	r10, 2
    143e:	06 c0       	rjmp	.+12     	; 0x144c <vfprintf+0x2fe>
    1440:	b3 94       	inc	r11
    1442:	b3 94       	inc	r11
    1444:	04 c0       	rjmp	.+8      	; 0x144e <vfprintf+0x300>
    1446:	8a 2d       	mov	r24, r10
    1448:	86 78       	andi	r24, 0x86	; 134
    144a:	09 f0       	breq	.+2      	; 0x144e <vfprintf+0x300>
    144c:	b3 94       	inc	r11
    144e:	a3 fc       	sbrc	r10, 3
    1450:	11 c0       	rjmp	.+34     	; 0x1474 <vfprintf+0x326>
    1452:	a0 fe       	sbrs	r10, 0
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <vfprintf+0x314>
    1456:	b2 14       	cp	r11, r2
    1458:	88 f4       	brcc	.+34     	; 0x147c <vfprintf+0x32e>
    145a:	28 0c       	add	r2, r8
    145c:	92 2c       	mov	r9, r2
    145e:	9b 18       	sub	r9, r11
    1460:	0e c0       	rjmp	.+28     	; 0x147e <vfprintf+0x330>
    1462:	b2 14       	cp	r11, r2
    1464:	60 f4       	brcc	.+24     	; 0x147e <vfprintf+0x330>
    1466:	b6 01       	movw	r22, r12
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
    1470:	b3 94       	inc	r11
    1472:	f7 cf       	rjmp	.-18     	; 0x1462 <vfprintf+0x314>
    1474:	b2 14       	cp	r11, r2
    1476:	18 f4       	brcc	.+6      	; 0x147e <vfprintf+0x330>
    1478:	2b 18       	sub	r2, r11
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <vfprintf+0x332>
    147c:	98 2c       	mov	r9, r8
    147e:	21 2c       	mov	r2, r1
    1480:	a4 fe       	sbrs	r10, 4
    1482:	10 c0       	rjmp	.+32     	; 0x14a4 <vfprintf+0x356>
    1484:	b6 01       	movw	r22, r12
    1486:	80 e3       	ldi	r24, 0x30	; 48
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
    148e:	a2 fe       	sbrs	r10, 2
    1490:	17 c0       	rjmp	.+46     	; 0x14c0 <vfprintf+0x372>
    1492:	a1 fc       	sbrc	r10, 1
    1494:	03 c0       	rjmp	.+6      	; 0x149c <vfprintf+0x34e>
    1496:	88 e7       	ldi	r24, 0x78	; 120
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <vfprintf+0x352>
    149c:	88 e5       	ldi	r24, 0x58	; 88
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	b6 01       	movw	r22, r12
    14a2:	0c c0       	rjmp	.+24     	; 0x14bc <vfprintf+0x36e>
    14a4:	8a 2d       	mov	r24, r10
    14a6:	86 78       	andi	r24, 0x86	; 134
    14a8:	59 f0       	breq	.+22     	; 0x14c0 <vfprintf+0x372>
    14aa:	a1 fe       	sbrs	r10, 1
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <vfprintf+0x364>
    14ae:	8b e2       	ldi	r24, 0x2B	; 43
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <vfprintf+0x366>
    14b2:	80 e2       	ldi	r24, 0x20	; 32
    14b4:	a7 fc       	sbrc	r10, 7
    14b6:	8d e2       	ldi	r24, 0x2D	; 45
    14b8:	b6 01       	movw	r22, r12
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
    14c0:	89 14       	cp	r8, r9
    14c2:	38 f4       	brcc	.+14     	; 0x14d2 <vfprintf+0x384>
    14c4:	b6 01       	movw	r22, r12
    14c6:	80 e3       	ldi	r24, 0x30	; 48
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
    14ce:	9a 94       	dec	r9
    14d0:	f7 cf       	rjmp	.-18     	; 0x14c0 <vfprintf+0x372>
    14d2:	8a 94       	dec	r8
    14d4:	f3 01       	movw	r30, r6
    14d6:	e8 0d       	add	r30, r8
    14d8:	f1 1d       	adc	r31, r1
    14da:	80 81       	ld	r24, Z
    14dc:	b6 01       	movw	r22, r12
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
    14e4:	81 10       	cpse	r8, r1
    14e6:	f5 cf       	rjmp	.-22     	; 0x14d2 <vfprintf+0x384>
    14e8:	22 20       	and	r2, r2
    14ea:	09 f4       	brne	.+2      	; 0x14ee <vfprintf+0x3a0>
    14ec:	42 ce       	rjmp	.-892    	; 0x1172 <vfprintf+0x24>
    14ee:	b6 01       	movw	r22, r12
    14f0:	80 e2       	ldi	r24, 0x20	; 32
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 21 08 	call	0x1042	; 0x1042 <fputc>
    14f8:	2a 94       	dec	r2
    14fa:	f6 cf       	rjmp	.-20     	; 0x14e8 <vfprintf+0x39a>
    14fc:	f6 01       	movw	r30, r12
    14fe:	86 81       	ldd	r24, Z+6	; 0x06
    1500:	97 81       	ldd	r25, Z+7	; 0x07
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <vfprintf+0x3ba>
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	9f ef       	ldi	r25, 0xFF	; 255
    1508:	2b 96       	adiw	r28, 0x0b	; 11
    150a:	e2 e1       	ldi	r30, 0x12	; 18
    150c:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__epilogue_restores__>

00001510 <strnlen_P>:
    1510:	fc 01       	movw	r30, r24
    1512:	05 90       	lpm	r0, Z+
    1514:	61 50       	subi	r22, 0x01	; 1
    1516:	70 40       	sbci	r23, 0x00	; 0
    1518:	01 10       	cpse	r0, r1
    151a:	d8 f7       	brcc	.-10     	; 0x1512 <strnlen_P+0x2>
    151c:	80 95       	com	r24
    151e:	90 95       	com	r25
    1520:	8e 0f       	add	r24, r30
    1522:	9f 1f       	adc	r25, r31
    1524:	08 95       	ret

00001526 <strnlen>:
    1526:	fc 01       	movw	r30, r24
    1528:	61 50       	subi	r22, 0x01	; 1
    152a:	70 40       	sbci	r23, 0x00	; 0
    152c:	01 90       	ld	r0, Z+
    152e:	01 10       	cpse	r0, r1
    1530:	d8 f7       	brcc	.-10     	; 0x1528 <strnlen+0x2>
    1532:	80 95       	com	r24
    1534:	90 95       	com	r25
    1536:	8e 0f       	add	r24, r30
    1538:	9f 1f       	adc	r25, r31
    153a:	08 95       	ret

0000153c <__ultoa_invert>:
    153c:	fa 01       	movw	r30, r20
    153e:	aa 27       	eor	r26, r26
    1540:	28 30       	cpi	r18, 0x08	; 8
    1542:	51 f1       	breq	.+84     	; 0x1598 <__ultoa_invert+0x5c>
    1544:	20 31       	cpi	r18, 0x10	; 16
    1546:	81 f1       	breq	.+96     	; 0x15a8 <__ultoa_invert+0x6c>
    1548:	e8 94       	clt
    154a:	6f 93       	push	r22
    154c:	6e 7f       	andi	r22, 0xFE	; 254
    154e:	6e 5f       	subi	r22, 0xFE	; 254
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	af 4f       	sbci	r26, 0xFF	; 255
    1558:	b1 e0       	ldi	r27, 0x01	; 1
    155a:	3e d0       	rcall	.+124    	; 0x15d8 <__ultoa_invert+0x9c>
    155c:	b4 e0       	ldi	r27, 0x04	; 4
    155e:	3c d0       	rcall	.+120    	; 0x15d8 <__ultoa_invert+0x9c>
    1560:	67 0f       	add	r22, r23
    1562:	78 1f       	adc	r23, r24
    1564:	89 1f       	adc	r24, r25
    1566:	9a 1f       	adc	r25, r26
    1568:	a1 1d       	adc	r26, r1
    156a:	68 0f       	add	r22, r24
    156c:	79 1f       	adc	r23, r25
    156e:	8a 1f       	adc	r24, r26
    1570:	91 1d       	adc	r25, r1
    1572:	a1 1d       	adc	r26, r1
    1574:	6a 0f       	add	r22, r26
    1576:	71 1d       	adc	r23, r1
    1578:	81 1d       	adc	r24, r1
    157a:	91 1d       	adc	r25, r1
    157c:	a1 1d       	adc	r26, r1
    157e:	20 d0       	rcall	.+64     	; 0x15c0 <__ultoa_invert+0x84>
    1580:	09 f4       	brne	.+2      	; 0x1584 <__ultoa_invert+0x48>
    1582:	68 94       	set
    1584:	3f 91       	pop	r19
    1586:	2a e0       	ldi	r18, 0x0A	; 10
    1588:	26 9f       	mul	r18, r22
    158a:	11 24       	eor	r1, r1
    158c:	30 19       	sub	r19, r0
    158e:	30 5d       	subi	r19, 0xD0	; 208
    1590:	31 93       	st	Z+, r19
    1592:	de f6       	brtc	.-74     	; 0x154a <__ultoa_invert+0xe>
    1594:	cf 01       	movw	r24, r30
    1596:	08 95       	ret
    1598:	46 2f       	mov	r20, r22
    159a:	47 70       	andi	r20, 0x07	; 7
    159c:	40 5d       	subi	r20, 0xD0	; 208
    159e:	41 93       	st	Z+, r20
    15a0:	b3 e0       	ldi	r27, 0x03	; 3
    15a2:	0f d0       	rcall	.+30     	; 0x15c2 <__ultoa_invert+0x86>
    15a4:	c9 f7       	brne	.-14     	; 0x1598 <__ultoa_invert+0x5c>
    15a6:	f6 cf       	rjmp	.-20     	; 0x1594 <__ultoa_invert+0x58>
    15a8:	46 2f       	mov	r20, r22
    15aa:	4f 70       	andi	r20, 0x0F	; 15
    15ac:	40 5d       	subi	r20, 0xD0	; 208
    15ae:	4a 33       	cpi	r20, 0x3A	; 58
    15b0:	18 f0       	brcs	.+6      	; 0x15b8 <__ultoa_invert+0x7c>
    15b2:	49 5d       	subi	r20, 0xD9	; 217
    15b4:	31 fd       	sbrc	r19, 1
    15b6:	40 52       	subi	r20, 0x20	; 32
    15b8:	41 93       	st	Z+, r20
    15ba:	02 d0       	rcall	.+4      	; 0x15c0 <__ultoa_invert+0x84>
    15bc:	a9 f7       	brne	.-22     	; 0x15a8 <__ultoa_invert+0x6c>
    15be:	ea cf       	rjmp	.-44     	; 0x1594 <__ultoa_invert+0x58>
    15c0:	b4 e0       	ldi	r27, 0x04	; 4
    15c2:	a6 95       	lsr	r26
    15c4:	97 95       	ror	r25
    15c6:	87 95       	ror	r24
    15c8:	77 95       	ror	r23
    15ca:	67 95       	ror	r22
    15cc:	ba 95       	dec	r27
    15ce:	c9 f7       	brne	.-14     	; 0x15c2 <__ultoa_invert+0x86>
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	61 05       	cpc	r22, r1
    15d4:	71 05       	cpc	r23, r1
    15d6:	08 95       	ret
    15d8:	9b 01       	movw	r18, r22
    15da:	ac 01       	movw	r20, r24
    15dc:	0a 2e       	mov	r0, r26
    15de:	06 94       	lsr	r0
    15e0:	57 95       	ror	r21
    15e2:	47 95       	ror	r20
    15e4:	37 95       	ror	r19
    15e6:	27 95       	ror	r18
    15e8:	ba 95       	dec	r27
    15ea:	c9 f7       	brne	.-14     	; 0x15de <__ultoa_invert+0xa2>
    15ec:	62 0f       	add	r22, r18
    15ee:	73 1f       	adc	r23, r19
    15f0:	84 1f       	adc	r24, r20
    15f2:	95 1f       	adc	r25, r21
    15f4:	a0 1d       	adc	r26, r0
    15f6:	08 95       	ret

000015f8 <__prologue_saves__>:
    15f8:	2f 92       	push	r2
    15fa:	3f 92       	push	r3
    15fc:	4f 92       	push	r4
    15fe:	5f 92       	push	r5
    1600:	6f 92       	push	r6
    1602:	7f 92       	push	r7
    1604:	8f 92       	push	r8
    1606:	9f 92       	push	r9
    1608:	af 92       	push	r10
    160a:	bf 92       	push	r11
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	ca 1b       	sub	r28, r26
    1622:	db 0b       	sbc	r29, r27
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	09 94       	ijmp

00001630 <__epilogue_restores__>:
    1630:	2a 88       	ldd	r2, Y+18	; 0x12
    1632:	39 88       	ldd	r3, Y+17	; 0x11
    1634:	48 88       	ldd	r4, Y+16	; 0x10
    1636:	5f 84       	ldd	r5, Y+15	; 0x0f
    1638:	6e 84       	ldd	r6, Y+14	; 0x0e
    163a:	7d 84       	ldd	r7, Y+13	; 0x0d
    163c:	8c 84       	ldd	r8, Y+12	; 0x0c
    163e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1640:	aa 84       	ldd	r10, Y+10	; 0x0a
    1642:	b9 84       	ldd	r11, Y+9	; 0x09
    1644:	c8 84       	ldd	r12, Y+8	; 0x08
    1646:	df 80       	ldd	r13, Y+7	; 0x07
    1648:	ee 80       	ldd	r14, Y+6	; 0x06
    164a:	fd 80       	ldd	r15, Y+5	; 0x05
    164c:	0c 81       	ldd	r16, Y+4	; 0x04
    164e:	1b 81       	ldd	r17, Y+3	; 0x03
    1650:	aa 81       	ldd	r26, Y+2	; 0x02
    1652:	b9 81       	ldd	r27, Y+1	; 0x01
    1654:	ce 0f       	add	r28, r30
    1656:	d1 1d       	adc	r29, r1
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	ed 01       	movw	r28, r26
    1664:	08 95       	ret

00001666 <_exit>:
    1666:	f8 94       	cli

00001668 <__stop_program>:
    1668:	ff cf       	rjmp	.-2      	; 0x1668 <__stop_program>
