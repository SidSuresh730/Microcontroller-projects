
ECE3411LabTest6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00001696  0000172a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c1  008001d2  008001d2  000017fc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001661  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd3  00000000  00000000  00003019  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa5  00000000  00000000  00003dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00004894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000733  00000000  00000000  00004cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e45  00000000  00000000  000053eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_14>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_17>
      48:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__vector_40>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e6 e9       	ldi	r30, 0x96	; 150
      c8:	f6 e1       	ldi	r31, 0x16	; 22
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a2 3d       	cpi	r26, 0xD2	; 210
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	a2 ed       	ldi	r26, 0xD2	; 210
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a3 39       	cpi	r26, 0x93	; 147
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <main>
      ea:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR1 = (uint8_t)TWBR_val;
      f2:	88 e4       	ldi	r24, 0x48	; 72
      f4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
      f8:	08 95       	ret

000000fa <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR1 = 0;
      fa:	ec ed       	ldi	r30, 0xDC	; 220
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	10 82       	st	Z, r1
	// transmit START condition
	TWCR1 = (1<<TWINT1) | (1<<TWSTA1) | (1<<TWEN1);
     100:	94 ea       	ldi	r25, 0xA4	; 164
     102:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
     104:	90 81       	ld	r25, Z
     106:	99 23       	and	r25, r25
     108:	ec f7       	brge	.-6      	; 0x104 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR1 & 0xF8) != TW_START){ return 1; }
     10a:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
     10e:	98 7f       	andi	r25, 0xF8	; 248
     110:	98 30       	cpi	r25, 0x08	; 8
     112:	61 f4       	brne	.+24     	; 0x12c <i2c_start+0x32>
	
	// load slave address into data register
	TWDR1 = address;
     114:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	// start transmission of address
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
     118:	84 e8       	ldi	r24, 0x84	; 132
     11a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
     11e:	ec ed       	ldi	r30, 0xDC	; 220
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	88 23       	and	r24, r24
     126:	ec f7       	brge	.-6      	; 0x122 <i2c_start+0x28>
/*	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
*/
	return 0;
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	08 95       	ret
	TWCR1 = (1<<TWINT1) | (1<<TWSTA1) | (1<<TWEN1);
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR1 & 0xF8) != TW_START){ return 1; }
     12c:	81 e0       	ldi	r24, 0x01	; 1
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
*/
	return 0;
}
     12e:	08 95       	ret

00000130 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR1 = data;
     130:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	// start transmission of data
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
     134:	84 e8       	ldi	r24, 0x84	; 132
     136:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
     13a:	ec ed       	ldi	r30, 0xDC	; 220
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	88 23       	and	r24, r24
     142:	ec f7       	brge	.-6      	; 0x13e <i2c_write+0xe>
	
	if( (TWSR1 & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     144:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
     148:	98 7f       	andi	r25, 0xF8	; 248
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	98 32       	cpi	r25, 0x28	; 40
     14e:	09 f4       	brne	.+2      	; 0x152 <i2c_write+0x22>
     150:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     152:	08 95       	ret

00000154 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWEA1);
     154:	84 ec       	ldi	r24, 0xC4	; 196
     156:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
     15a:	ec ed       	ldi	r30, 0xDC	; 220
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	88 23       	and	r24, r24
     162:	ec f7       	brge	.-6      	; 0x15e <i2c_read_ack+0xa>
	// return received data from TWDR
	return TWDR1;
     164:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
     168:	08 95       	ret

0000016a <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR1 = (1<<TWINT1) | (1<<TWEN1);
     16a:	84 e8       	ldi	r24, 0x84	; 132
     16c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	// wait for end of transmission
	while( !(TWCR1 & (1<<TWINT1)) );
     170:	ec ed       	ldi	r30, 0xDC	; 220
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	88 23       	and	r24, r24
     178:	ec f7       	brge	.-6      	; 0x174 <i2c_read_nack+0xa>
	// return received data from TWDR
	return TWDR1;
     17a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
     17e:	08 95       	ret

00000180 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
     180:	cf 92       	push	r12
     182:	df 92       	push	r13
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	6b 01       	movw	r12, r22
     190:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
     192:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
     196:	f8 2e       	mov	r15, r24
     198:	81 11       	cpse	r24, r1
     19a:	12 c0       	rjmp	.+36     	; 0x1c0 <i2c_transmit+0x40>
	
	for (uint16_t i = 0; i < length; i++)
     19c:	01 15       	cp	r16, r1
     19e:	11 05       	cpc	r17, r1
     1a0:	59 f0       	breq	.+22     	; 0x1b8 <i2c_transmit+0x38>
     1a2:	e6 01       	movw	r28, r12
     1a4:	0c 0d       	add	r16, r12
     1a6:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
     1a8:	89 91       	ld	r24, Y+
     1aa:	0e 94 98 00 	call	0x130	; 0x130 <i2c_write>
     1ae:	81 11       	cpse	r24, r1
     1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <i2c_transmit+0x46>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
     1b2:	0c 17       	cp	r16, r28
     1b4:	1d 07       	cpc	r17, r29
     1b6:	c1 f7       	brne	.-16     	; 0x1a8 <i2c_transmit+0x28>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWSTO1);
     1b8:	84 e9       	ldi	r24, 0x94	; 148
     1ba:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
     1be:	05 c0       	rjmp	.+10     	; 0x1ca <i2c_transmit+0x4a>
	return TWDR1;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
     1c0:	ff 24       	eor	r15, r15
     1c2:	f3 94       	inc	r15
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <i2c_transmit+0x4a>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     1c6:	ff 24       	eor	r15, r15
     1c8:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
     1ca:	8f 2d       	mov	r24, r15
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	df 90       	pop	r13
     1d8:	cf 90       	pop	r12
     1da:	08 95       	ret

000001dc <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	df 92       	push	r13
     1e2:	ef 92       	push	r14
     1e4:	ff 92       	push	r15
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	5b 01       	movw	r10, r22
     1f0:	7a 01       	movw	r14, r20
	if (i2c_start(address | I2C_READ)) return 1;
     1f2:	81 60       	ori	r24, 0x01	; 1
     1f4:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
     1f8:	d8 2e       	mov	r13, r24
     1fa:	81 11       	cpse	r24, r1
     1fc:	18 c0       	rjmp	.+48     	; 0x22e <i2c_receive+0x52>
	
	for (uint16_t i = 0; i < (length-1); i++)
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	e8 1a       	sub	r14, r24
     202:	f1 08       	sbc	r15, r1
     204:	51 f0       	breq	.+20     	; 0x21a <i2c_receive+0x3e>
     206:	e5 01       	movw	r28, r10
     208:	85 01       	movw	r16, r10
     20a:	0e 0d       	add	r16, r14
     20c:	1f 1d       	adc	r17, r15
	{
		data[i] = i2c_read_ack();
     20e:	0e 94 aa 00 	call	0x154	; 0x154 <i2c_read_ack>
     212:	89 93       	st	Y+, r24

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
     214:	0c 17       	cp	r16, r28
     216:	1d 07       	cpc	r17, r29
     218:	d1 f7       	brne	.-12     	; 0x20e <i2c_receive+0x32>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     21a:	e5 01       	movw	r28, r10
     21c:	ce 0d       	add	r28, r14
     21e:	df 1d       	adc	r29, r15
     220:	0e 94 b5 00 	call	0x16a	; 0x16a <i2c_read_nack>
     224:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR1 = (1<<TWINT1) | (1<<TWEN1) | (1<<TWSTO1);
     226:	84 e9       	ldi	r24, 0x94	; 148
     228:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
     22c:	02 c0       	rjmp	.+4      	; 0x232 <i2c_receive+0x56>
	return 0;
}

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
     22e:	dd 24       	eor	r13, r13
     230:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     232:	8d 2d       	mov	r24, r13
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	ff 90       	pop	r15
     23e:	ef 90       	pop	r14
     240:	df 90       	pop	r13
     242:	bf 90       	pop	r11
     244:	af 90       	pop	r10
     246:	08 95       	ret

00000248 <InitTimer0>:
}

double celc_to_far(uint8_t celcius)
{
	return celcius*9.0/5.0 + 32;
}
     248:	84 b5       	in	r24, 0x24	; 36
     24a:	82 60       	ori	r24, 0x02	; 2
     24c:	84 bd       	out	0x24, r24	; 36
     24e:	89 ef       	ldi	r24, 0xF9	; 249
     250:	87 bd       	out	0x27, r24	; 39
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     258:	83 e0       	ldi	r24, 0x03	; 3
     25a:	85 bd       	out	0x25, r24	; 37
     25c:	08 95       	ret

0000025e <getstr>:
     25e:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <r_ready>
     262:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <r_index+0x1>
     266:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <r_index>
     26a:	e1 ec       	ldi	r30, 0xC1	; 193
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	80 68       	ori	r24, 0x80	; 128
     272:	80 83       	st	Z, r24
     274:	08 95       	ret

00000276 <setupADC>:
     276:	ea e7       	ldi	r30, 0x7A	; 122
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	8e 68       	ori	r24, 0x8E	; 142
     27e:	80 83       	st	Z, r24
     280:	87 e0       	ldi	r24, 0x07	; 7
     282:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     286:	08 95       	ret

00000288 <SPI_MasterInit>:
     288:	8d e2       	ldi	r24, 0x2D	; 45
     28a:	84 b9       	out	0x04, r24	; 4
     28c:	83 ed       	ldi	r24, 0xD3	; 211
     28e:	8c bd       	out	0x2c, r24	; 44
     290:	08 95       	ret

00000292 <startConversion>:
     292:	ea e7       	ldi	r30, 0x7A	; 122
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	80 64       	ori	r24, 0x40	; 64
     29a:	80 83       	st	Z, r24
     29c:	08 95       	ret

0000029e <SPI_sendFirstHalf>:
     29e:	2a 98       	cbi	0x05, 2	; 5
     2a0:	28 9a       	sbi	0x05, 0	; 5
     2a2:	90 67       	ori	r25, 0x70	; 112
     2a4:	9e bd       	out	0x2e, r25	; 46
     2a6:	08 95       	ret

000002a8 <writeMSG>:

void writeMSG()
{
     2a8:	2f 92       	push	r2
     2aa:	3f 92       	push	r3
     2ac:	4f 92       	push	r4
     2ae:	5f 92       	push	r5
     2b0:	6f 92       	push	r6
     2b2:	7f 92       	push	r7
     2b4:	8f 92       	push	r8
     2b6:	9f 92       	push	r9
     2b8:	af 92       	push	r10
     2ba:	bf 92       	push	r11
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	28 97       	sbiw	r28, 0x08	; 8
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	cd bf       	out	0x3d, r28	; 61
	int TC74_C = i2c_temp;										// celcius TC74 value
     2dc:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <i2c_temp>
     2e0:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <i2c_temp+0x1>
     2e4:	3a 83       	std	Y+2, r19	; 0x02
     2e6:	29 83       	std	Y+1, r18	; 0x01
	int MCP_int_C = (int)(adc_temp); 							// celcius MCP value truncated 
     2e8:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     2ec:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <__data_end+0x1>
     2f0:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <__data_end+0x2>
     2f4:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <__data_end+0x3>
     2f8:	8b 83       	std	Y+3, r24	; 0x03
     2fa:	9c 83       	std	Y+4, r25	; 0x04
     2fc:	ad 83       	std	Y+5, r26	; 0x05
     2fe:	be 83       	std	Y+6, r27	; 0x06
	int MCP_dec_C = ((int)(adc_temp*100))%100;					// celcius two decimal places of MCP value
     300:	40 90 d2 01 	lds	r4, 0x01D2	; 0x8001d2 <__data_end>
     304:	50 90 d3 01 	lds	r5, 0x01D3	; 0x8001d3 <__data_end+0x1>
     308:	60 90 d4 01 	lds	r6, 0x01D4	; 0x8001d4 <__data_end+0x2>
     30c:	70 90 d5 01 	lds	r7, 0x01D5	; 0x8001d5 <__data_end+0x3>
	int CV_int = (int)(i2c_volt);								// converted voltage truncated
     310:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <i2c_volt>
     314:	70 91 db 01 	lds	r23, 0x01DB	; 0x8001db <i2c_volt+0x1>
     318:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <i2c_volt+0x2>
     31c:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <i2c_volt+0x3>
     320:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     324:	c6 2e       	mov	r12, r22
     326:	d7 2e       	mov	r13, r23
	int CV_dec = ((int)(i2c_volt*100))%100;						// two decimal places of converted voltage
     328:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <i2c_volt>
     32c:	70 91 db 01 	lds	r23, 0x01DB	; 0x8001db <i2c_volt+0x1>
     330:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <i2c_volt+0x2>
     334:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <i2c_volt+0x3>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	48 ec       	ldi	r20, 0xC8	; 200
     33e:	52 e4       	ldi	r21, 0x42	; 66
     340:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     344:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     348:	cb 01       	movw	r24, r22
     34a:	64 e6       	ldi	r22, 0x64	; 100
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	0e 94 0f 08 	call	0x101e	; 0x101e <__divmodhi4>
     352:	18 2f       	mov	r17, r24
     354:	09 2f       	mov	r16, r25
	int DAC_int = (int)(dac_volt);								// dac voltage truncated
     356:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <dac_volt>
     35a:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <dac_volt+0x1>
     35e:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <dac_volt+0x2>
     362:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <dac_volt+0x3>
     366:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     36a:	f6 2e       	mov	r15, r22
     36c:	e7 2e       	mov	r14, r23
	int DAC_dec = ((int)(dac_volt*100))%100;					// two decimal places of dac voltage
     36e:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <dac_volt>
     372:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <dac_volt+0x1>
     376:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <dac_volt+0x2>
     37a:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <dac_volt+0x3>
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	48 ec       	ldi	r20, 0xC8	; 200
     384:	52 e4       	ldi	r21, 0x42	; 66
     386:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     38a:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     38e:	cb 01       	movw	r24, r22
     390:	64 e6       	ldi	r22, 0x64	; 100
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	0e 94 0f 08 	call	0x101e	; 0x101e <__divmodhi4>
     398:	28 2f       	mov	r18, r24
     39a:	39 2f       	mov	r19, r25
	int TC74_int_F = (int)celc_to_far(i2c_temp);				// faren TC74 truncated
     39c:	20 90 de 01 	lds	r2, 0x01DE	; 0x8001de <i2c_temp>
     3a0:	30 90 df 01 	lds	r3, 0x01DF	; 0x8001df <i2c_temp+0x1>
	int TC74_dec_F = ((int)(celc_to_far(i2c_temp)*100))%100;	// faren TC74 decimal places
     3a4:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <i2c_temp>
     3a8:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <i2c_temp+0x1>
     3ac:	b8 87       	std	Y+8, r27	; 0x08
     3ae:	af 83       	std	Y+7, r26	; 0x07
	int MCP_int_F = (int)(celc_to_far(adc_temp)); 				// faren MCP truncated			
     3b0:	80 90 d2 01 	lds	r8, 0x01D2	; 0x8001d2 <__data_end>
     3b4:	90 90 d3 01 	lds	r9, 0x01D3	; 0x8001d3 <__data_end+0x1>
     3b8:	a0 90 d4 01 	lds	r10, 0x01D4	; 0x8001d4 <__data_end+0x2>
     3bc:	b0 90 d5 01 	lds	r11, 0x01D5	; 0x8001d5 <__data_end+0x3>
	int MCP_dec_F = ((int)(celc_to_far(adc_temp)*100))%100;		// faren MCP decimal places
     3c0:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <__data_end>
     3c4:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <__data_end+0x1>
     3c8:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end+0x2>
     3cc:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__data_end+0x3>
	if(!changeUnitFlag)
     3d0:	40 91 e4 01 	lds	r20, 0x01E4	; 0x8001e4 <changeUnitFlag>
     3d4:	41 11       	cpse	r20, r1
     3d6:	31 c0       	rjmp	.+98     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	{
		printf("[Temp(TC74): %dC][Temp(MCP): %d.%.2dC][Converted Voltage: %d.%.2dV][DAC: %d.%.2dV]\n", 
     3d8:	3f 93       	push	r19
     3da:	2f 93       	push	r18
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	df 92       	push	r13
     3e6:	cf 92       	push	r12
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	48 ec       	ldi	r20, 0xC8	; 200
     3ee:	52 e4       	ldi	r21, 0x42	; 66
     3f0:	c3 01       	movw	r24, r6
     3f2:	b2 01       	movw	r22, r4
     3f4:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     3f8:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     3fc:	cb 01       	movw	r24, r22
     3fe:	64 e6       	ldi	r22, 0x64	; 100
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	0e 94 0f 08 	call	0x101e	; 0x101e <__divmodhi4>
     406:	9f 93       	push	r25
     408:	8f 93       	push	r24
     40a:	6b 81       	ldd	r22, Y+3	; 0x03
     40c:	7c 81       	ldd	r23, Y+4	; 0x04
     40e:	8d 81       	ldd	r24, Y+5	; 0x05
     410:	9e 81       	ldd	r25, Y+6	; 0x06
     412:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     416:	7f 93       	push	r23
     418:	6f 93       	push	r22
     41a:	ba 81       	ldd	r27, Y+2	; 0x02
     41c:	bf 93       	push	r27
     41e:	29 81       	ldd	r18, Y+1	; 0x01
     420:	2f 93       	push	r18
     422:	8c e1       	ldi	r24, 0x1C	; 28
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	9f 93       	push	r25
     428:	8f 93       	push	r24
     42a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <printf>
		TC74_C, MCP_int_C, MCP_dec_C, CV_int, CV_dec, DAC_int, DAC_dec);
		//printf("[Temp(TC74): %d C][Temp(MCP): %.2f C][Converted Voltage: %.2f V][DAC: %.2f V]\n", 
		//i2c_temp, adc_temp, i2c_volt, dac_volt);
		return;
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	a2 c0       	rjmp	.+324    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
	}
		printf("[Temp(TC74): %d.%.2dF][Temp(MCP): %d.%.2dF][Converted Voltage: %d.%.2dV][DAC: %d.%.2dV]\n", 
     43a:	3f 93       	push	r19
     43c:	2f 93       	push	r18
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	df 92       	push	r13
     448:	cf 92       	push	r12
     44a:	0e 94 e5 06 	call	0xdca	; 0xdca <__fixunssfsi>
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 16 07 	call	0xe2c	; 0xe2c <__floatsisf>
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e1       	ldi	r20, 0x10	; 16
     45e:	51 e4       	ldi	r21, 0x41	; 65
     460:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 ea       	ldi	r20, 0xA0	; 160
     46a:	50 e4       	ldi	r21, 0x40	; 64
     46c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3>
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	52 e4       	ldi	r21, 0x42	; 66
     478:	0e 94 00 06 	call	0xc00	; 0xc00 <__addsf3>
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	48 ec       	ldi	r20, 0xC8	; 200
     482:	52 e4       	ldi	r21, 0x42	; 66
     484:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     488:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     48c:	04 e6       	ldi	r16, 0x64	; 100
     48e:	10 e0       	ldi	r17, 0x00	; 0
     490:	cb 01       	movw	r24, r22
     492:	b8 01       	movw	r22, r16
     494:	0e 94 0f 08 	call	0x101e	; 0x101e <__divmodhi4>
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	c5 01       	movw	r24, r10
     49e:	b4 01       	movw	r22, r8
     4a0:	0e 94 e5 06 	call	0xdca	; 0xdca <__fixunssfsi>
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 16 07 	call	0xe2c	; 0xe2c <__floatsisf>
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e1       	ldi	r20, 0x10	; 16
     4b4:	51 e4       	ldi	r21, 0x41	; 65
     4b6:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 ea       	ldi	r20, 0xA0	; 160
     4c0:	50 e4       	ldi	r21, 0x40	; 64
     4c2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	52 e4       	ldi	r21, 0x42	; 66
     4ce:	0e 94 00 06 	call	0xc00	; 0xc00 <__addsf3>
     4d2:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     4d6:	7f 93       	push	r23
     4d8:	6f 93       	push	r22
     4da:	af 81       	ldd	r26, Y+7	; 0x07
     4dc:	b8 85       	ldd	r27, Y+8	; 0x08
     4de:	bb 27       	eor	r27, r27
     4e0:	bd 01       	movw	r22, r26
     4e2:	bb 0f       	add	r27, r27
     4e4:	88 0b       	sbc	r24, r24
     4e6:	99 0b       	sbc	r25, r25
     4e8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__floatsisf>
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e1       	ldi	r20, 0x10	; 16
     4f2:	51 e4       	ldi	r21, 0x41	; 65
     4f4:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 ea       	ldi	r20, 0xA0	; 160
     4fe:	50 e4       	ldi	r21, 0x40	; 64
     500:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3>
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	52 e4       	ldi	r21, 0x42	; 66
     50c:	0e 94 00 06 	call	0xc00	; 0xc00 <__addsf3>
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	48 ec       	ldi	r20, 0xC8	; 200
     516:	52 e4       	ldi	r21, 0x42	; 66
     518:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     51c:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     520:	cb 01       	movw	r24, r22
     522:	b8 01       	movw	r22, r16
     524:	0e 94 0f 08 	call	0x101e	; 0x101e <__divmodhi4>
     528:	9f 93       	push	r25
     52a:	8f 93       	push	r24
     52c:	b1 01       	movw	r22, r2
     52e:	77 27       	eor	r23, r23
     530:	07 2e       	mov	r0, r23
     532:	00 0c       	add	r0, r0
     534:	88 0b       	sbc	r24, r24
     536:	99 0b       	sbc	r25, r25
     538:	0e 94 16 07 	call	0xe2c	; 0xe2c <__floatsisf>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	40 e1       	ldi	r20, 0x10	; 16
     542:	51 e4       	ldi	r21, 0x41	; 65
     544:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 ea       	ldi	r20, 0xA0	; 160
     54e:	50 e4       	ldi	r21, 0x40	; 64
     550:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	52 e4       	ldi	r21, 0x42	; 66
     55c:	0e 94 00 06 	call	0xc00	; 0xc00 <__addsf3>
     560:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     564:	7f 93       	push	r23
     566:	6f 93       	push	r22
     568:	80 e7       	ldi	r24, 0x70	; 112
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <printf>
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
		TC74_int_F, TC74_dec_F, MCP_int_F, MCP_dec_F, CV_int, CV_dec, DAC_int, DAC_dec);
		//printf("[Temp(TC74): %.2f F][Temp(MCP): %.2f F][Converted Voltage: %.2f V][DAC: %.2f V]\n", 
		//celc_to_far(i2c_temp), celc_to_far(adc_temp), i2c_volt, dac_volt);
}
     57e:	28 96       	adiw	r28, 0x08	; 8
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	bf 90       	pop	r11
     59c:	af 90       	pop	r10
     59e:	9f 90       	pop	r9
     5a0:	8f 90       	pop	r8
     5a2:	7f 90       	pop	r7
     5a4:	6f 90       	pop	r6
     5a6:	5f 90       	pop	r5
     5a8:	4f 90       	pop	r4
     5aa:	3f 90       	pop	r3
     5ac:	2f 90       	pop	r2
     5ae:	08 95       	ret

000005b0 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
     5b0:	1f 92       	push	r1
     5b2:	0f 92       	push	r0
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	0f 92       	push	r0
     5b8:	11 24       	eor	r1, r1
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
	counter++;
     5be:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <counter>
     5c2:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <counter+0x1>
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <counter+0x1>
     5cc:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <counter>
}
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <__vector_18>:

ISR(USART0_RX_vect)
{
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	2f 93       	push	r18
     5ea:	3f 93       	push	r19
     5ec:	4f 93       	push	r20
     5ee:	5f 93       	push	r21
     5f0:	6f 93       	push	r22
     5f2:	7f 93       	push	r23
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	af 93       	push	r26
     5fa:	bf 93       	push	r27
     5fc:	ef 93       	push	r30
     5fe:	ff 93       	push	r31
	char r_char = UDR0;
     600:	e6 ec       	ldi	r30, 0xC6	; 198
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
	//Echo character back so that human  user can see
	UDR0 = r_char;
     606:	80 83       	st	Z, r24
	
	if(r_char != '\r' && r_char != 0) // Enter NOT pressed
     608:	8d 30       	cpi	r24, 0x0D	; 13
     60a:	c9 f1       	breq	.+114    	; 0x67e <__vector_18+0xa0>
     60c:	88 23       	and	r24, r24
     60e:	b9 f1       	breq	.+110    	; 0x67e <__vector_18+0xa0>
	{
		if(r_char == 8) // Backspace pressed
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	b1 f4       	brne	.+44     	; 0x640 <__vector_18+0x62>
		{
			if(r_index != 0)
     614:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <r_index>
     618:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <r_index+0x1>
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	29 f0       	breq	.+10     	; 0x62a <__vector_18+0x4c>
			--r_index; //move index back
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <r_index+0x1>
     626:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <r_index>
			uart_putchar(' ', &UART_Stream); //erase character on screen
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	71 e0       	ldi	r23, 0x01	; 1
     62e:	80 e2       	ldi	r24, 0x20	; 32
     630:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
			uart_putchar('\b', &UART_Stream); // backspace
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	88 e0       	ldi	r24, 0x08	; 8
     63a:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
     63e:	33 c0       	rjmp	.+102    	; 0x6a6 <__vector_18+0xc8>
			UCSR0B ^= (1<<RXCIE0); // disable receive interrupt
		}
		*/
		else
		{
			if(r_char == 'p')
     640:	80 37       	cpi	r24, 0x70	; 112
     642:	31 f4       	brne	.+12     	; 0x650 <__vector_18+0x72>
				changeUnitFlag ^= 1; // Toggle flag
     644:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <changeUnitFlag>
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	92 27       	eor	r25, r18
     64c:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <changeUnitFlag>
			r_buffer[r_index] = r_char;
     650:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <r_index>
     654:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <r_index+0x1>
     658:	f9 01       	movw	r30, r18
     65a:	e5 5c       	subi	r30, 0xC5	; 197
     65c:	fd 4f       	sbci	r31, 0xFD	; 253
     65e:	80 83       	st	Z, r24
			if(r_index < RX_BUFSIZE-1)
     660:	2f 34       	cpi	r18, 0x4F	; 79
     662:	31 05       	cpc	r19, r1
     664:	3c f4       	brge	.+14     	; 0x674 <__vector_18+0x96>
			{
				r_index++;
     666:	2f 5f       	subi	r18, 0xFF	; 255
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	30 93 39 02 	sts	0x0239, r19	; 0x800239 <r_index+0x1>
     66e:	20 93 38 02 	sts	0x0238, r18	; 0x800238 <r_index>
     672:	19 c0       	rjmp	.+50     	; 0x6a6 <__vector_18+0xc8>
			}
			else {r_index = 0;}
     674:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <r_index+0x1>
     678:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <r_index>
     67c:	14 c0       	rjmp	.+40     	; 0x6a6 <__vector_18+0xc8>
		}
	}
	else
	{
		uart_putchar('\n', &UART_Stream); // newline
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	71 e0       	ldi	r23, 0x01	; 1
     682:	8a e0       	ldi	r24, 0x0A	; 10
     684:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
		r_buffer[r_index] = 0; //terminate string with null character
     688:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <r_index>
     68c:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <r_index+0x1>
     690:	e5 5c       	subi	r30, 0xC5	; 197
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	10 82       	st	Z, r1
		r_ready = 1;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <r_ready>
		UCSR0B ^= (1<<RXCIE0); // disable receive interrupt
     69c:	e1 ec       	ldi	r30, 0xC1	; 193
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	80 58       	subi	r24, 0x80	; 128
     6a4:	80 83       	st	Z, r24
	}
}
     6a6:	ff 91       	pop	r31
     6a8:	ef 91       	pop	r30
     6aa:	bf 91       	pop	r27
     6ac:	af 91       	pop	r26
     6ae:	9f 91       	pop	r25
     6b0:	8f 91       	pop	r24
     6b2:	7f 91       	pop	r23
     6b4:	6f 91       	pop	r22
     6b6:	5f 91       	pop	r21
     6b8:	4f 91       	pop	r20
     6ba:	3f 91       	pop	r19
     6bc:	2f 91       	pop	r18
     6be:	0f 90       	pop	r0
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	0f 90       	pop	r0
     6c4:	1f 90       	pop	r1
     6c6:	18 95       	reti

000006c8 <__vector_40>:

ISR(TWI1_vect)
{
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	0f 92       	push	r0
     6d0:	11 24       	eor	r1, r1
     6d2:	2f 93       	push	r18
     6d4:	3f 93       	push	r19
     6d6:	4f 93       	push	r20
     6d8:	5f 93       	push	r21
     6da:	6f 93       	push	r22
     6dc:	7f 93       	push	r23
     6de:	8f 93       	push	r24
     6e0:	9f 93       	push	r25
     6e2:	af 93       	push	r26
     6e4:	bf 93       	push	r27
     6e6:	ef 93       	push	r30
     6e8:	ff 93       	push	r31
	if(TWSR1 & 0x50) //Data byte received, ack returned
     6ea:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
     6ee:	80 75       	andi	r24, 0x50	; 80
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <__vector_40+0x2c>
     6f2:	4a c0       	rjmp	.+148    	; 0x788 <__vector_40+0xc0>
	{
		i2c_temp = receive;
     6f4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <receive>
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <i2c_temp+0x1>
     6fe:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <i2c_temp>
		i2c_volt = 2 + 0.0195*i2c_temp;
     702:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <i2c_temp>
     706:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <i2c_temp+0x1>
     70a:	07 2e       	mov	r0, r23
     70c:	00 0c       	add	r0, r0
     70e:	88 0b       	sbc	r24, r24
     710:	99 0b       	sbc	r25, r25
     712:	0e 94 16 07 	call	0xe2c	; 0xe2c <__floatsisf>
     716:	27 e7       	ldi	r18, 0x77	; 119
     718:	3e eb       	ldi	r19, 0xBE	; 190
     71a:	4f e9       	ldi	r20, 0x9F	; 159
     71c:	5c e3       	ldi	r21, 0x3C	; 60
     71e:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	50 e4       	ldi	r21, 0x40	; 64
     72a:	0e 94 00 06 	call	0xc00	; 0xc00 <__addsf3>
     72e:	60 93 da 01 	sts	0x01DA, r22	; 0x8001da <i2c_volt>
     732:	70 93 db 01 	sts	0x01DB, r23	; 0x8001db <i2c_volt+0x1>
     736:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <i2c_volt+0x2>
     73a:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <i2c_volt+0x3>
		tempVar = (int)(i2c_volt*4096.0/5.0);
     73e:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <i2c_volt>
     742:	70 91 db 01 	lds	r23, 0x01DB	; 0x8001db <i2c_volt+0x1>
     746:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <i2c_volt+0x2>
     74a:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <i2c_volt+0x3>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e8       	ldi	r20, 0x80	; 128
     754:	55 e4       	ldi	r21, 0x45	; 69
     756:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 ea       	ldi	r20, 0xA0	; 160
     760:	50 e4       	ldi	r21, 0x40	; 64
     762:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3>
     766:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>
     76a:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <tempVar+0x1>
     76e:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <tempVar>
		SPI_sendFirstHalf(tempVar);
     772:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <tempVar>
     776:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <tempVar+0x1>
     77a:	0e 94 4f 01 	call	0x29e	; 0x29e <SPI_sendFirstHalf>
		TWCR1 |= (1<<TWINT1);
     77e:	ec ed       	ldi	r30, 0xDC	; 220
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	80 68       	ori	r24, 0x80	; 128
     786:	80 83       	st	Z, r24
	}
}
     788:	ff 91       	pop	r31
     78a:	ef 91       	pop	r30
     78c:	bf 91       	pop	r27
     78e:	af 91       	pop	r26
     790:	9f 91       	pop	r25
     792:	8f 91       	pop	r24
     794:	7f 91       	pop	r23
     796:	6f 91       	pop	r22
     798:	5f 91       	pop	r21
     79a:	4f 91       	pop	r20
     79c:	3f 91       	pop	r19
     79e:	2f 91       	pop	r18
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <__vector_17>:

ISR(SPI0_STC_vect)
{
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	0f 92       	push	r0
     7b2:	11 24       	eor	r1, r1
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	ef 93       	push	r30
     7ca:	ff 93       	push	r31
	if(!isSecondHalf)
     7cc:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <isSecondHalf>
     7d0:	81 11       	cpse	r24, r1
     7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <__vector_17+0x3c>
	{
		isSecondHalf = 1;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <isSecondHalf>
		SPI_sendSecondHalf(tempVar);
     7da:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <tempVar>
     7de:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <tempVar+0x1>

}

void SPI_sendSecondHalf(int cData)
{
	SPDR0 = cData;
     7e2:	8e bd       	out	0x2e, r24	; 46
     7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <__vector_17+0x4e>
		isSecondHalf = 1;
		SPI_sendSecondHalf(tempVar);
	}
	else
	{
		isSecondHalf = 0;
     7e6:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <isSecondHalf>
		PORTB |= (1<<SPI_SS); // Pull SS high again
     7ea:	2a 9a       	sbi	0x05, 2	; 5
		PORTB &= ~(1<<SPI_LDAC); // Pull LDAC low
     7ec:	28 98       	cbi	0x05, 0	; 5
		ADMUX = 7;
     7ee:	87 e0       	ldi	r24, 0x07	; 7
     7f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		startConversion();
     7f4:	0e 94 49 01 	call	0x292	; 0x292 <startConversion>
	}
}
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <__vector_21>:

ISR(ADC_vect)
{
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	11 24       	eor	r1, r1
     824:	2f 93       	push	r18
     826:	3f 93       	push	r19
     828:	4f 93       	push	r20
     82a:	5f 93       	push	r21
     82c:	6f 93       	push	r22
     82e:	7f 93       	push	r23
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	ef 93       	push	r30
     83a:	ff 93       	push	r31
	
	switch (ADMUX)
     83c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     840:	86 30       	cpi	r24, 0x06	; 6
     842:	19 f0       	breq	.+6      	; 0x84a <__vector_21+0x30>
     844:	87 30       	cpi	r24, 0x07	; 7
     846:	69 f1       	breq	.+90     	; 0x8a2 <__vector_21+0x88>
     848:	48 c0       	rjmp	.+144    	; 0x8da <__vector_21+0xc0>
	{
		case 6:
			adc_temp = (ADC*5.0/1024.0 - 0.4)/(.0195);
     84a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     84e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 14 07 	call	0xe28	; 0xe28 <__floatunsisf>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 ea       	ldi	r20, 0xA0	; 160
     860:	50 e4       	ldi	r21, 0x40	; 64
     862:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e8       	ldi	r20, 0x80	; 128
     86c:	5a e3       	ldi	r21, 0x3A	; 58
     86e:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     872:	2d ec       	ldi	r18, 0xCD	; 205
     874:	3c ec       	ldi	r19, 0xCC	; 204
     876:	4c ec       	ldi	r20, 0xCC	; 204
     878:	5e e3       	ldi	r21, 0x3E	; 62
     87a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__subsf3>
     87e:	27 e7       	ldi	r18, 0x77	; 119
     880:	3e eb       	ldi	r19, 0xBE	; 190
     882:	4f e9       	ldi	r20, 0x9F	; 159
     884:	5c e3       	ldi	r21, 0x3C	; 60
     886:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3>
     88a:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <__data_end>
     88e:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <__data_end+0x1>
     892:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end+0x2>
     896:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <__data_end+0x3>
			//writeMSG();
			writeMSGFlag = 1;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <writeMSGFlag>
			break;
     8a0:	1c c0       	rjmp	.+56     	; 0x8da <__vector_21+0xc0>
		case 7:
			dac_volt = ADC*(5.0/1024);
     8a2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     8a6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 14 07 	call	0xe28	; 0xe28 <__floatunsisf>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 ea       	ldi	r20, 0xA0	; 160
     8b8:	5b e3       	ldi	r21, 0x3B	; 59
     8ba:	0e 94 a2 07 	call	0xf44	; 0xf44 <__mulsf3>
     8be:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <dac_volt>
     8c2:	70 93 d7 01 	sts	0x01D7, r23	; 0x8001d7 <dac_volt+0x1>
     8c6:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <dac_volt+0x2>
     8ca:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <dac_volt+0x3>
			PORTB |= (1<<SPI_LDAC); //reassert LDAC
     8ce:	28 9a       	sbi	0x05, 0	; 5
			ADMUX = 6;
     8d0:	86 e0       	ldi	r24, 0x06	; 6
     8d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			startConversion();
     8d6:	0e 94 49 01 	call	0x292	; 0x292 <startConversion>
			break;
		default:
			break;
	}
}
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <main>:


int main(void)
{
    /* Replace with your application code */
	i2c_init();
     8fc:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_init>
	uart_init();
     900:	0e 94 ee 05 	call	0xbdc	; 0xbdc <uart_init>
	InitTimer0();
     904:	0e 94 24 01 	call	0x248	; 0x248 <InitTimer0>
	setupADC();
     908:	0e 94 3b 01 	call	0x276	; 0x276 <setupADC>
	getstr();
     90c:	0e 94 2f 01 	call	0x25e	; 0x25e <getstr>
	SPI_MasterInit();
     910:	0e 94 44 01 	call	0x288	; 0x288 <SPI_MasterInit>
	sei();
     914:	78 94       	sei
		if(counter >= 999)
		{
			counter = 0;
			i2c_transmit(slave_addr, 0x00, 8);
			i2c_receive(slave_addr, &receive, 8);
			TWCR1 |= (1<<TWIE1) | (1<<TWEN1) | (1<<TWSTA1);
     916:	cc ed       	ldi	r28, 0xDC	; 220
     918:	d0 e0       	ldi	r29, 0x00	; 0
	SPI_MasterInit();
	sei();

    while (1) 
    {
		if(counter >= 999)
     91a:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <counter>
     91e:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <counter+0x1>
     922:	87 3e       	cpi	r24, 0xE7	; 231
     924:	93 40       	sbci	r25, 0x03	; 3
     926:	bc f0       	brlt	.+46     	; 0x956 <__stack+0x57>
		{
			counter = 0;
     928:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <counter+0x1>
     92c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <counter>
			i2c_transmit(slave_addr, 0x00, 8);
     930:	48 e0       	ldi	r20, 0x08	; 8
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 e9       	ldi	r24, 0x90	; 144
     93a:	0e 94 c0 00 	call	0x180	; 0x180 <i2c_transmit>
			i2c_receive(slave_addr, &receive, 8);
     93e:	48 e0       	ldi	r20, 0x08	; 8
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	6a e3       	ldi	r22, 0x3A	; 58
     944:	72 e0       	ldi	r23, 0x02	; 2
     946:	80 e9       	ldi	r24, 0x90	; 144
     948:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_receive>
			TWCR1 |= (1<<TWIE1) | (1<<TWEN1) | (1<<TWSTA1);
     94c:	88 81       	ld	r24, Y
     94e:	85 62       	ori	r24, 0x25	; 37
     950:	88 83       	st	Y, r24
			getstr();
     952:	0e 94 2f 01 	call	0x25e	; 0x25e <getstr>
		}
		if(writeMSGFlag)
     956:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <writeMSGFlag>
     95a:	88 23       	and	r24, r24
     95c:	f1 f2       	breq	.-68     	; 0x91a <__stack+0x1b>
		{
			writeMSGFlag = 0;
     95e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <writeMSGFlag>
			writeMSG();	
     962:	0e 94 54 01 	call	0x2a8	; 0x2a8 <writeMSG>
     966:	d9 cf       	rjmp	.-78     	; 0x91a <__stack+0x1b>

00000968 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     968:	cf 93       	push	r28
     96a:	c8 2f       	mov	r28, r24

  if (c == '\a')
     96c:	87 30       	cpi	r24, 0x07	; 7
     96e:	69 f4       	brne	.+26     	; 0x98a <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
     970:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <__iob+0x4>
     974:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <__iob+0x5>
     978:	47 e0       	ldi	r20, 0x07	; 7
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	89 ec       	ldi	r24, 0xC9	; 201
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 37 08 	call	0x106e	; 0x106e <fwrite>
      return 0;
     988:	0c c0       	rjmp	.+24     	; 0x9a2 <uart_putchar+0x3a>
    }

  if (c == '\n')
     98a:	8a 30       	cpi	r24, 0x0A	; 10
     98c:	19 f4       	brne	.+6      	; 0x994 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
     98e:	8d e0       	ldi	r24, 0x0D	; 13
     990:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     994:	e0 ec       	ldi	r30, 0xC0	; 192
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	85 ff       	sbrs	r24, 5
     99c:	fd cf       	rjmp	.-6      	; 0x998 <uart_putchar+0x30>
  UDR0 = c;
     99e:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

  return 0;
}
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     9aa:	6f 92       	push	r6
     9ac:	7f 92       	push	r7
     9ae:	8f 92       	push	r8
     9b0:	9f 92       	push	r9
     9b2:	af 92       	push	r10
     9b4:	bf 92       	push	r11
     9b6:	cf 92       	push	r12
     9b8:	df 92       	push	r13
     9ba:	ef 92       	push	r14
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     9c6:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <rxp.1828>
     9ca:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <rxp.1828+0x1>
     9ce:	23 2b       	or	r18, r19
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <uart_getchar+0x2a>
     9d2:	da c0       	rjmp	.+436    	; 0xb88 <uart_getchar+0x1de>
     9d4:	8c 01       	movw	r16, r24
     9d6:	0f 2e       	mov	r0, r31
     9d8:	f5 ee       	ldi	r31, 0xE5	; 229
     9da:	8f 2e       	mov	r8, r31
     9dc:	f1 e0       	ldi	r31, 0x01	; 1
     9de:	9f 2e       	mov	r9, r31
     9e0:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     9e2:	c0 ec       	ldi	r28, 0xC0	; 192
     9e4:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
     9e6:	0f 2e       	mov	r0, r31
     9e8:	f6 ec       	ldi	r31, 0xC6	; 198
     9ea:	cf 2e       	mov	r12, r31
     9ec:	d1 2c       	mov	r13, r1
     9ee:	f0 2d       	mov	r31, r0
     9f0:	54 01       	movw	r10, r8
     9f2:	0f 2e       	mov	r0, r31
     9f4:	f4 ee       	ldi	r31, 0xE4	; 228
     9f6:	6f 2e       	mov	r6, r31
     9f8:	f1 e0       	ldi	r31, 0x01	; 1
     9fa:	7f 2e       	mov	r7, r31
     9fc:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     9fe:	88 81       	ld	r24, Y
     a00:	88 23       	and	r24, r24
     a02:	ec f7       	brge	.-6      	; 0x9fe <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
     a04:	88 81       	ld	r24, Y
     a06:	84 fd       	sbrc	r24, 4
     a08:	d2 c0       	rjmp	.+420    	; 0xbae <uart_getchar+0x204>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     a0a:	88 81       	ld	r24, Y
     a0c:	83 fd       	sbrc	r24, 3
     a0e:	d2 c0       	rjmp	.+420    	; 0xbb4 <uart_getchar+0x20a>
	  return _FDEV_ERR;
	c = UDR0;
     a10:	f6 01       	movw	r30, r12
     a12:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     a14:	8d 30       	cpi	r24, 0x0D	; 13
     a16:	11 f0       	breq	.+4      	; 0xa1c <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
     a18:	8a 30       	cpi	r24, 0x0A	; 10
     a1a:	69 f4       	brne	.+26     	; 0xa36 <uart_getchar+0x8c>
	  {
	    *cp = c;
     a1c:	8a e0       	ldi	r24, 0x0A	; 10
     a1e:	f4 01       	movw	r30, r8
     a20:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     a22:	b8 01       	movw	r22, r16
     a24:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
	    rxp = b;
     a28:	85 ee       	ldi	r24, 0xE5	; 229
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <rxp.1828+0x1>
     a30:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <rxp.1828>
	    break;
     a34:	a9 c0       	rjmp	.+338    	; 0xb88 <uart_getchar+0x1de>
	  }
	else if (c == '\t')
     a36:	89 30       	cpi	r24, 0x09	; 9
     a38:	39 f0       	breq	.+14     	; 0xa48 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     a3a:	90 ee       	ldi	r25, 0xE0	; 224
     a3c:	98 0f       	add	r25, r24
     a3e:	9f 35       	cpi	r25, 0x5F	; 95
     a40:	20 f0       	brcs	.+8      	; 0xa4a <uart_getchar+0xa0>
     a42:	80 3a       	cpi	r24, 0xA0	; 160
     a44:	b8 f0       	brcs	.+46     	; 0xa74 <uart_getchar+0xca>
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
     a48:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     a4a:	f4 e3       	ldi	r31, 0x34	; 52
     a4c:	8f 16       	cp	r8, r31
     a4e:	f2 e0       	ldi	r31, 0x02	; 2
     a50:	9f 06       	cpc	r9, r31
     a52:	29 f4       	brne	.+10     	; 0xa5e <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
     a54:	b8 01       	movw	r22, r16
     a56:	87 e0       	ldi	r24, 0x07	; 7
     a58:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
     a5c:	d0 cf       	rjmp	.-96     	; 0x9fe <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
     a5e:	74 01       	movw	r14, r8
     a60:	9f ef       	ldi	r25, 0xFF	; 255
     a62:	e9 1a       	sub	r14, r25
     a64:	f9 0a       	sbc	r15, r25
     a66:	f4 01       	movw	r30, r8
     a68:	80 83       	st	Z, r24
		uart_putchar(c, stream);
     a6a:	b8 01       	movw	r22, r16
     a6c:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     a70:	47 01       	movw	r8, r14
     a72:	c5 cf       	rjmp	.-118    	; 0x9fe <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
     a74:	82 31       	cpi	r24, 0x12	; 18
     a76:	d1 f1       	breq	.+116    	; 0xaec <uart_getchar+0x142>
     a78:	30 f4       	brcc	.+12     	; 0xa86 <uart_getchar+0xdc>
     a7a:	83 30       	cpi	r24, 0x03	; 3
     a7c:	09 f4       	brne	.+2      	; 0xa80 <uart_getchar+0xd6>
     a7e:	9d c0       	rjmp	.+314    	; 0xbba <uart_getchar+0x210>
     a80:	88 30       	cpi	r24, 0x08	; 8
     a82:	e9 f0       	breq	.+58     	; 0xabe <uart_getchar+0x114>
     a84:	bc cf       	rjmp	.-136    	; 0x9fe <uart_getchar+0x54>
     a86:	87 31       	cpi	r24, 0x17	; 23
     a88:	29 f0       	breq	.+10     	; 0xa94 <uart_getchar+0xea>
     a8a:	8f 37       	cpi	r24, 0x7F	; 127
     a8c:	c1 f0       	breq	.+48     	; 0xabe <uart_getchar+0x114>
     a8e:	85 31       	cpi	r24, 0x15	; 21
     a90:	79 f0       	breq	.+30     	; 0xab0 <uart_getchar+0x106>
     a92:	b5 cf       	rjmp	.-150    	; 0x9fe <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a94:	f5 ee       	ldi	r31, 0xE5	; 229
     a96:	8f 16       	cp	r8, r31
     a98:	f1 e0       	ldi	r31, 0x01	; 1
     a9a:	9f 06       	cpc	r9, r31
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <uart_getchar+0xf6>
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <uart_getchar+0xf8>
     aa0:	ae cf       	rjmp	.-164    	; 0x9fe <uart_getchar+0x54>
     aa2:	f4 01       	movw	r30, r8
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	80 81       	ld	r24, Z
     aa8:	80 32       	cpi	r24, 0x20	; 32
     aaa:	09 f0       	breq	.+2      	; 0xaae <uart_getchar+0x104>
     aac:	52 c0       	rjmp	.+164    	; 0xb52 <uart_getchar+0x1a8>
     aae:	a7 cf       	rjmp	.-178    	; 0x9fe <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     ab0:	85 ee       	ldi	r24, 0xE5	; 229
     ab2:	88 16       	cp	r8, r24
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	98 06       	cpc	r9, r24
     ab8:	09 f0       	breq	.+2      	; 0xabc <uart_getchar+0x112>
     aba:	98 f5       	brcc	.+102    	; 0xb22 <uart_getchar+0x178>
     abc:	a0 cf       	rjmp	.-192    	; 0x9fe <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     abe:	95 ee       	ldi	r25, 0xE5	; 229
     ac0:	89 16       	cp	r8, r25
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	99 06       	cpc	r9, r25
     ac6:	09 f0       	breq	.+2      	; 0xaca <uart_getchar+0x120>
     ac8:	08 f4       	brcc	.+2      	; 0xacc <uart_getchar+0x122>
     aca:	99 cf       	rjmp	.-206    	; 0x9fe <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
     acc:	b8 01       	movw	r22, r16
     ace:	88 e0       	ldi	r24, 0x08	; 8
     ad0:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
		uart_putchar(' ', stream);
     ad4:	b8 01       	movw	r22, r16
     ad6:	80 e2       	ldi	r24, 0x20	; 32
     ad8:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
		uart_putchar('\b', stream);
     adc:	b8 01       	movw	r22, r16
     ade:	88 e0       	ldi	r24, 0x08	; 8
     ae0:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
		cp--;
     ae4:	e1 e0       	ldi	r30, 0x01	; 1
     ae6:	8e 1a       	sub	r8, r30
     ae8:	91 08       	sbc	r9, r1
     aea:	89 cf       	rjmp	.-238    	; 0x9fe <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     aec:	b8 01       	movw	r22, r16
     aee:	8d e0       	ldi	r24, 0x0D	; 13
     af0:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     af4:	f5 ee       	ldi	r31, 0xE5	; 229
     af6:	8f 16       	cp	r8, r31
     af8:	f1 e0       	ldi	r31, 0x01	; 1
     afa:	9f 06       	cpc	r9, r31
     afc:	09 f0       	breq	.+2      	; 0xb00 <uart_getchar+0x156>
     afe:	08 f4       	brcc	.+2      	; 0xb02 <uart_getchar+0x158>
     b00:	7e cf       	rjmp	.-260    	; 0x9fe <uart_getchar+0x54>
     b02:	0f 2e       	mov	r0, r31
     b04:	f5 ee       	ldi	r31, 0xE5	; 229
     b06:	ef 2e       	mov	r14, r31
     b08:	f1 e0       	ldi	r31, 0x01	; 1
     b0a:	ff 2e       	mov	r15, r31
     b0c:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
     b0e:	b8 01       	movw	r22, r16
     b10:	f7 01       	movw	r30, r14
     b12:	81 91       	ld	r24, Z+
     b14:	7f 01       	movw	r14, r30
     b16:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     b1a:	8e 14       	cp	r8, r14
     b1c:	9f 04       	cpc	r9, r15
     b1e:	b9 f7       	brne	.-18     	; 0xb0e <uart_getchar+0x164>
     b20:	6e cf       	rjmp	.-292    	; 0x9fe <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     b22:	b8 01       	movw	r22, r16
     b24:	88 e0       	ldi	r24, 0x08	; 8
     b26:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
		uart_putchar(' ', stream);
     b2a:	b8 01       	movw	r22, r16
     b2c:	80 e2       	ldi	r24, 0x20	; 32
     b2e:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
		uart_putchar('\b', stream);
     b32:	b8 01       	movw	r22, r16
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
		cp--;
     b3a:	f1 e0       	ldi	r31, 0x01	; 1
     b3c:	8f 1a       	sub	r8, r31
     b3e:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     b40:	85 ee       	ldi	r24, 0xE5	; 229
     b42:	88 16       	cp	r8, r24
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	98 06       	cpc	r9, r24
     b48:	61 f7       	brne	.-40     	; 0xb22 <uart_getchar+0x178>
     b4a:	f3 01       	movw	r30, r6
     b4c:	31 96       	adiw	r30, 0x01	; 1
     b4e:	4f 01       	movw	r8, r30
     b50:	56 cf       	rjmp	.-340    	; 0x9fe <uart_getchar+0x54>
     b52:	74 01       	movw	r14, r8
     b54:	f1 e0       	ldi	r31, 0x01	; 1
     b56:	ef 1a       	sub	r14, r31
     b58:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     b5a:	b8 01       	movw	r22, r16
     b5c:	88 e0       	ldi	r24, 0x08	; 8
     b5e:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
		uart_putchar(' ', stream);
     b62:	b8 01       	movw	r22, r16
     b64:	80 e2       	ldi	r24, 0x20	; 32
     b66:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
		uart_putchar('\b', stream);
     b6a:	b8 01       	movw	r22, r16
     b6c:	88 e0       	ldi	r24, 0x08	; 8
     b6e:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
		cp--;
     b72:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     b74:	ea 14       	cp	r14, r10
     b76:	fb 04       	cpc	r15, r11
     b78:	09 f4       	brne	.+2      	; 0xb7c <uart_getchar+0x1d2>
     b7a:	41 cf       	rjmp	.-382    	; 0x9fe <uart_getchar+0x54>
     b7c:	f7 01       	movw	r30, r14
     b7e:	82 91       	ld	r24, -Z
     b80:	7f 01       	movw	r14, r30
     b82:	80 32       	cpi	r24, 0x20	; 32
     b84:	51 f7       	brne	.-44     	; 0xb5a <uart_getchar+0x1b0>
     b86:	3b cf       	rjmp	.-394    	; 0x9fe <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
     b88:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <rxp.1828>
     b8c:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <rxp.1828+0x1>
     b90:	cf 01       	movw	r24, r30
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <rxp.1828+0x1>
     b98:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <rxp.1828>
     b9c:	80 81       	ld	r24, Z
  if (c == '\n')
     b9e:	8a 30       	cpi	r24, 0x0A	; 10
     ba0:	21 f4       	brne	.+8      	; 0xbaa <uart_getchar+0x200>
    rxp = 0;
     ba2:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <rxp.1828+0x1>
     ba6:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <rxp.1828>

  return c;
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <uart_getchar+0x214>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     bae:	8e ef       	ldi	r24, 0xFE	; 254
     bb0:	9f ef       	ldi	r25, 0xFF	; 255
     bb2:	05 c0       	rjmp	.+10     	; 0xbbe <uart_getchar+0x214>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	9f ef       	ldi	r25, 0xFF	; 255
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <uart_getchar+0x214>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	df 90       	pop	r13
     bcc:	cf 90       	pop	r12
     bce:	bf 90       	pop	r11
     bd0:	af 90       	pop	r10
     bd2:	9f 90       	pop	r9
     bd4:	8f 90       	pop	r8
     bd6:	7f 90       	pop	r7
     bd8:	6f 90       	pop	r6
     bda:	08 95       	ret

00000bdc <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     bdc:	87 e6       	ldi	r24, 0x67	; 103
     bde:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     be2:	88 e1       	ldi	r24, 0x18	; 24
     be4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  
  stdout = &uartFile;
     be8:	ed e8       	ldi	r30, 0x8D	; 141
     bea:	f2 e0       	ldi	r31, 0x02	; 2
     bec:	8e e0       	ldi	r24, 0x0E	; 14
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	93 83       	std	Z+3, r25	; 0x03
     bf2:	82 83       	std	Z+2, r24	; 0x02
  stdin = &uartFile;
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24
  stderr = &uartFile;
     bf8:	95 83       	std	Z+5, r25	; 0x05
     bfa:	84 83       	std	Z+4, r24	; 0x04
     bfc:	08 95       	ret

00000bfe <__subsf3>:
     bfe:	50 58       	subi	r21, 0x80	; 128

00000c00 <__addsf3>:
     c00:	bb 27       	eor	r27, r27
     c02:	aa 27       	eor	r26, r26
     c04:	0e 94 17 06 	call	0xc2e	; 0xc2e <__addsf3x>
     c08:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_round>
     c0c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_pscA>
     c10:	38 f0       	brcs	.+14     	; 0xc20 <__addsf3+0x20>
     c12:	0e 94 61 07 	call	0xec2	; 0xec2 <__fp_pscB>
     c16:	20 f0       	brcs	.+8      	; 0xc20 <__addsf3+0x20>
     c18:	39 f4       	brne	.+14     	; 0xc28 <__addsf3+0x28>
     c1a:	9f 3f       	cpi	r25, 0xFF	; 255
     c1c:	19 f4       	brne	.+6      	; 0xc24 <__addsf3+0x24>
     c1e:	26 f4       	brtc	.+8      	; 0xc28 <__addsf3+0x28>
     c20:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_nan>
     c24:	0e f4       	brtc	.+2      	; 0xc28 <__addsf3+0x28>
     c26:	e0 95       	com	r30
     c28:	e7 fb       	bst	r30, 7
     c2a:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_inf>

00000c2e <__addsf3x>:
     c2e:	e9 2f       	mov	r30, r25
     c30:	0e 94 79 07 	call	0xef2	; 0xef2 <__fp_split3>
     c34:	58 f3       	brcs	.-42     	; 0xc0c <__addsf3+0xc>
     c36:	ba 17       	cp	r27, r26
     c38:	62 07       	cpc	r22, r18
     c3a:	73 07       	cpc	r23, r19
     c3c:	84 07       	cpc	r24, r20
     c3e:	95 07       	cpc	r25, r21
     c40:	20 f0       	brcs	.+8      	; 0xc4a <__addsf3x+0x1c>
     c42:	79 f4       	brne	.+30     	; 0xc62 <__addsf3x+0x34>
     c44:	a6 f5       	brtc	.+104    	; 0xcae <__addsf3x+0x80>
     c46:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_zero>
     c4a:	0e f4       	brtc	.+2      	; 0xc4e <__addsf3x+0x20>
     c4c:	e0 95       	com	r30
     c4e:	0b 2e       	mov	r0, r27
     c50:	ba 2f       	mov	r27, r26
     c52:	a0 2d       	mov	r26, r0
     c54:	0b 01       	movw	r0, r22
     c56:	b9 01       	movw	r22, r18
     c58:	90 01       	movw	r18, r0
     c5a:	0c 01       	movw	r0, r24
     c5c:	ca 01       	movw	r24, r20
     c5e:	a0 01       	movw	r20, r0
     c60:	11 24       	eor	r1, r1
     c62:	ff 27       	eor	r31, r31
     c64:	59 1b       	sub	r21, r25
     c66:	99 f0       	breq	.+38     	; 0xc8e <__addsf3x+0x60>
     c68:	59 3f       	cpi	r21, 0xF9	; 249
     c6a:	50 f4       	brcc	.+20     	; 0xc80 <__addsf3x+0x52>
     c6c:	50 3e       	cpi	r21, 0xE0	; 224
     c6e:	68 f1       	brcs	.+90     	; 0xcca <__addsf3x+0x9c>
     c70:	1a 16       	cp	r1, r26
     c72:	f0 40       	sbci	r31, 0x00	; 0
     c74:	a2 2f       	mov	r26, r18
     c76:	23 2f       	mov	r18, r19
     c78:	34 2f       	mov	r19, r20
     c7a:	44 27       	eor	r20, r20
     c7c:	58 5f       	subi	r21, 0xF8	; 248
     c7e:	f3 cf       	rjmp	.-26     	; 0xc66 <__addsf3x+0x38>
     c80:	46 95       	lsr	r20
     c82:	37 95       	ror	r19
     c84:	27 95       	ror	r18
     c86:	a7 95       	ror	r26
     c88:	f0 40       	sbci	r31, 0x00	; 0
     c8a:	53 95       	inc	r21
     c8c:	c9 f7       	brne	.-14     	; 0xc80 <__addsf3x+0x52>
     c8e:	7e f4       	brtc	.+30     	; 0xcae <__addsf3x+0x80>
     c90:	1f 16       	cp	r1, r31
     c92:	ba 0b       	sbc	r27, r26
     c94:	62 0b       	sbc	r22, r18
     c96:	73 0b       	sbc	r23, r19
     c98:	84 0b       	sbc	r24, r20
     c9a:	ba f0       	brmi	.+46     	; 0xcca <__addsf3x+0x9c>
     c9c:	91 50       	subi	r25, 0x01	; 1
     c9e:	a1 f0       	breq	.+40     	; 0xcc8 <__addsf3x+0x9a>
     ca0:	ff 0f       	add	r31, r31
     ca2:	bb 1f       	adc	r27, r27
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	88 1f       	adc	r24, r24
     caa:	c2 f7       	brpl	.-16     	; 0xc9c <__addsf3x+0x6e>
     cac:	0e c0       	rjmp	.+28     	; 0xcca <__addsf3x+0x9c>
     cae:	ba 0f       	add	r27, r26
     cb0:	62 1f       	adc	r22, r18
     cb2:	73 1f       	adc	r23, r19
     cb4:	84 1f       	adc	r24, r20
     cb6:	48 f4       	brcc	.+18     	; 0xcca <__addsf3x+0x9c>
     cb8:	87 95       	ror	r24
     cba:	77 95       	ror	r23
     cbc:	67 95       	ror	r22
     cbe:	b7 95       	ror	r27
     cc0:	f7 95       	ror	r31
     cc2:	9e 3f       	cpi	r25, 0xFE	; 254
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <__addsf3x+0x9a>
     cc6:	b0 cf       	rjmp	.-160    	; 0xc28 <__addsf3+0x28>
     cc8:	93 95       	inc	r25
     cca:	88 0f       	add	r24, r24
     ccc:	08 f0       	brcs	.+2      	; 0xcd0 <__addsf3x+0xa2>
     cce:	99 27       	eor	r25, r25
     cd0:	ee 0f       	add	r30, r30
     cd2:	97 95       	ror	r25
     cd4:	87 95       	ror	r24
     cd6:	08 95       	ret

00000cd8 <__divsf3>:
     cd8:	0e 94 80 06 	call	0xd00	; 0xd00 <__divsf3x>
     cdc:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_round>
     ce0:	0e 94 61 07 	call	0xec2	; 0xec2 <__fp_pscB>
     ce4:	58 f0       	brcs	.+22     	; 0xcfc <__divsf3+0x24>
     ce6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_pscA>
     cea:	40 f0       	brcs	.+16     	; 0xcfc <__divsf3+0x24>
     cec:	29 f4       	brne	.+10     	; 0xcf8 <__divsf3+0x20>
     cee:	5f 3f       	cpi	r21, 0xFF	; 255
     cf0:	29 f0       	breq	.+10     	; 0xcfc <__divsf3+0x24>
     cf2:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_inf>
     cf6:	51 11       	cpse	r21, r1
     cf8:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__fp_szero>
     cfc:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_nan>

00000d00 <__divsf3x>:
     d00:	0e 94 79 07 	call	0xef2	; 0xef2 <__fp_split3>
     d04:	68 f3       	brcs	.-38     	; 0xce0 <__divsf3+0x8>

00000d06 <__divsf3_pse>:
     d06:	99 23       	and	r25, r25
     d08:	b1 f3       	breq	.-20     	; 0xcf6 <__divsf3+0x1e>
     d0a:	55 23       	and	r21, r21
     d0c:	91 f3       	breq	.-28     	; 0xcf2 <__divsf3+0x1a>
     d0e:	95 1b       	sub	r25, r21
     d10:	55 0b       	sbc	r21, r21
     d12:	bb 27       	eor	r27, r27
     d14:	aa 27       	eor	r26, r26
     d16:	62 17       	cp	r22, r18
     d18:	73 07       	cpc	r23, r19
     d1a:	84 07       	cpc	r24, r20
     d1c:	38 f0       	brcs	.+14     	; 0xd2c <__divsf3_pse+0x26>
     d1e:	9f 5f       	subi	r25, 0xFF	; 255
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	44 1f       	adc	r20, r20
     d28:	aa 1f       	adc	r26, r26
     d2a:	a9 f3       	breq	.-22     	; 0xd16 <__divsf3_pse+0x10>
     d2c:	35 d0       	rcall	.+106    	; 0xd98 <__divsf3_pse+0x92>
     d2e:	0e 2e       	mov	r0, r30
     d30:	3a f0       	brmi	.+14     	; 0xd40 <__divsf3_pse+0x3a>
     d32:	e0 e8       	ldi	r30, 0x80	; 128
     d34:	32 d0       	rcall	.+100    	; 0xd9a <__divsf3_pse+0x94>
     d36:	91 50       	subi	r25, 0x01	; 1
     d38:	50 40       	sbci	r21, 0x00	; 0
     d3a:	e6 95       	lsr	r30
     d3c:	00 1c       	adc	r0, r0
     d3e:	ca f7       	brpl	.-14     	; 0xd32 <__divsf3_pse+0x2c>
     d40:	2b d0       	rcall	.+86     	; 0xd98 <__divsf3_pse+0x92>
     d42:	fe 2f       	mov	r31, r30
     d44:	29 d0       	rcall	.+82     	; 0xd98 <__divsf3_pse+0x92>
     d46:	66 0f       	add	r22, r22
     d48:	77 1f       	adc	r23, r23
     d4a:	88 1f       	adc	r24, r24
     d4c:	bb 1f       	adc	r27, r27
     d4e:	26 17       	cp	r18, r22
     d50:	37 07       	cpc	r19, r23
     d52:	48 07       	cpc	r20, r24
     d54:	ab 07       	cpc	r26, r27
     d56:	b0 e8       	ldi	r27, 0x80	; 128
     d58:	09 f0       	breq	.+2      	; 0xd5c <__divsf3_pse+0x56>
     d5a:	bb 0b       	sbc	r27, r27
     d5c:	80 2d       	mov	r24, r0
     d5e:	bf 01       	movw	r22, r30
     d60:	ff 27       	eor	r31, r31
     d62:	93 58       	subi	r25, 0x83	; 131
     d64:	5f 4f       	sbci	r21, 0xFF	; 255
     d66:	3a f0       	brmi	.+14     	; 0xd76 <__divsf3_pse+0x70>
     d68:	9e 3f       	cpi	r25, 0xFE	; 254
     d6a:	51 05       	cpc	r21, r1
     d6c:	78 f0       	brcs	.+30     	; 0xd8c <__divsf3_pse+0x86>
     d6e:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_inf>
     d72:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__fp_szero>
     d76:	5f 3f       	cpi	r21, 0xFF	; 255
     d78:	e4 f3       	brlt	.-8      	; 0xd72 <__divsf3_pse+0x6c>
     d7a:	98 3e       	cpi	r25, 0xE8	; 232
     d7c:	d4 f3       	brlt	.-12     	; 0xd72 <__divsf3_pse+0x6c>
     d7e:	86 95       	lsr	r24
     d80:	77 95       	ror	r23
     d82:	67 95       	ror	r22
     d84:	b7 95       	ror	r27
     d86:	f7 95       	ror	r31
     d88:	9f 5f       	subi	r25, 0xFF	; 255
     d8a:	c9 f7       	brne	.-14     	; 0xd7e <__divsf3_pse+0x78>
     d8c:	88 0f       	add	r24, r24
     d8e:	91 1d       	adc	r25, r1
     d90:	96 95       	lsr	r25
     d92:	87 95       	ror	r24
     d94:	97 f9       	bld	r25, 7
     d96:	08 95       	ret
     d98:	e1 e0       	ldi	r30, 0x01	; 1
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	bb 1f       	adc	r27, r27
     da2:	62 17       	cp	r22, r18
     da4:	73 07       	cpc	r23, r19
     da6:	84 07       	cpc	r24, r20
     da8:	ba 07       	cpc	r27, r26
     daa:	20 f0       	brcs	.+8      	; 0xdb4 <__divsf3_pse+0xae>
     dac:	62 1b       	sub	r22, r18
     dae:	73 0b       	sbc	r23, r19
     db0:	84 0b       	sbc	r24, r20
     db2:	ba 0b       	sbc	r27, r26
     db4:	ee 1f       	adc	r30, r30
     db6:	88 f7       	brcc	.-30     	; 0xd9a <__divsf3_pse+0x94>
     db8:	e0 95       	com	r30
     dba:	08 95       	ret

00000dbc <__fixsfsi>:
     dbc:	0e 94 e5 06 	call	0xdca	; 0xdca <__fixunssfsi>
     dc0:	68 94       	set
     dc2:	b1 11       	cpse	r27, r1
     dc4:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__fp_szero>
     dc8:	08 95       	ret

00000dca <__fixunssfsi>:
     dca:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_splitA>
     dce:	88 f0       	brcs	.+34     	; 0xdf2 <__fixunssfsi+0x28>
     dd0:	9f 57       	subi	r25, 0x7F	; 127
     dd2:	98 f0       	brcs	.+38     	; 0xdfa <__fixunssfsi+0x30>
     dd4:	b9 2f       	mov	r27, r25
     dd6:	99 27       	eor	r25, r25
     dd8:	b7 51       	subi	r27, 0x17	; 23
     dda:	b0 f0       	brcs	.+44     	; 0xe08 <__fixunssfsi+0x3e>
     ddc:	e1 f0       	breq	.+56     	; 0xe16 <__fixunssfsi+0x4c>
     dde:	66 0f       	add	r22, r22
     de0:	77 1f       	adc	r23, r23
     de2:	88 1f       	adc	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	1a f0       	brmi	.+6      	; 0xdee <__fixunssfsi+0x24>
     de8:	ba 95       	dec	r27
     dea:	c9 f7       	brne	.-14     	; 0xdde <__fixunssfsi+0x14>
     dec:	14 c0       	rjmp	.+40     	; 0xe16 <__fixunssfsi+0x4c>
     dee:	b1 30       	cpi	r27, 0x01	; 1
     df0:	91 f0       	breq	.+36     	; 0xe16 <__fixunssfsi+0x4c>
     df2:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fp_zero>
     df6:	b1 e0       	ldi	r27, 0x01	; 1
     df8:	08 95       	ret
     dfa:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_zero>
     dfe:	67 2f       	mov	r22, r23
     e00:	78 2f       	mov	r23, r24
     e02:	88 27       	eor	r24, r24
     e04:	b8 5f       	subi	r27, 0xF8	; 248
     e06:	39 f0       	breq	.+14     	; 0xe16 <__fixunssfsi+0x4c>
     e08:	b9 3f       	cpi	r27, 0xF9	; 249
     e0a:	cc f3       	brlt	.-14     	; 0xdfe <__fixunssfsi+0x34>
     e0c:	86 95       	lsr	r24
     e0e:	77 95       	ror	r23
     e10:	67 95       	ror	r22
     e12:	b3 95       	inc	r27
     e14:	d9 f7       	brne	.-10     	; 0xe0c <__fixunssfsi+0x42>
     e16:	3e f4       	brtc	.+14     	; 0xe26 <__fixunssfsi+0x5c>
     e18:	90 95       	com	r25
     e1a:	80 95       	com	r24
     e1c:	70 95       	com	r23
     e1e:	61 95       	neg	r22
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	8f 4f       	sbci	r24, 0xFF	; 255
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	08 95       	ret

00000e28 <__floatunsisf>:
     e28:	e8 94       	clt
     e2a:	09 c0       	rjmp	.+18     	; 0xe3e <__floatsisf+0x12>

00000e2c <__floatsisf>:
     e2c:	97 fb       	bst	r25, 7
     e2e:	3e f4       	brtc	.+14     	; 0xe3e <__floatsisf+0x12>
     e30:	90 95       	com	r25
     e32:	80 95       	com	r24
     e34:	70 95       	com	r23
     e36:	61 95       	neg	r22
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	8f 4f       	sbci	r24, 0xFF	; 255
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	99 23       	and	r25, r25
     e40:	a9 f0       	breq	.+42     	; 0xe6c <__floatsisf+0x40>
     e42:	f9 2f       	mov	r31, r25
     e44:	96 e9       	ldi	r25, 0x96	; 150
     e46:	bb 27       	eor	r27, r27
     e48:	93 95       	inc	r25
     e4a:	f6 95       	lsr	r31
     e4c:	87 95       	ror	r24
     e4e:	77 95       	ror	r23
     e50:	67 95       	ror	r22
     e52:	b7 95       	ror	r27
     e54:	f1 11       	cpse	r31, r1
     e56:	f8 cf       	rjmp	.-16     	; 0xe48 <__floatsisf+0x1c>
     e58:	fa f4       	brpl	.+62     	; 0xe98 <__floatsisf+0x6c>
     e5a:	bb 0f       	add	r27, r27
     e5c:	11 f4       	brne	.+4      	; 0xe62 <__floatsisf+0x36>
     e5e:	60 ff       	sbrs	r22, 0
     e60:	1b c0       	rjmp	.+54     	; 0xe98 <__floatsisf+0x6c>
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	8f 4f       	sbci	r24, 0xFF	; 255
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	16 c0       	rjmp	.+44     	; 0xe98 <__floatsisf+0x6c>
     e6c:	88 23       	and	r24, r24
     e6e:	11 f0       	breq	.+4      	; 0xe74 <__floatsisf+0x48>
     e70:	96 e9       	ldi	r25, 0x96	; 150
     e72:	11 c0       	rjmp	.+34     	; 0xe96 <__floatsisf+0x6a>
     e74:	77 23       	and	r23, r23
     e76:	21 f0       	breq	.+8      	; 0xe80 <__floatsisf+0x54>
     e78:	9e e8       	ldi	r25, 0x8E	; 142
     e7a:	87 2f       	mov	r24, r23
     e7c:	76 2f       	mov	r23, r22
     e7e:	05 c0       	rjmp	.+10     	; 0xe8a <__floatsisf+0x5e>
     e80:	66 23       	and	r22, r22
     e82:	71 f0       	breq	.+28     	; 0xea0 <__floatsisf+0x74>
     e84:	96 e8       	ldi	r25, 0x86	; 134
     e86:	86 2f       	mov	r24, r22
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	2a f0       	brmi	.+10     	; 0xe98 <__floatsisf+0x6c>
     e8e:	9a 95       	dec	r25
     e90:	66 0f       	add	r22, r22
     e92:	77 1f       	adc	r23, r23
     e94:	88 1f       	adc	r24, r24
     e96:	da f7       	brpl	.-10     	; 0xe8e <__floatsisf+0x62>
     e98:	88 0f       	add	r24, r24
     e9a:	96 95       	lsr	r25
     e9c:	87 95       	ror	r24
     e9e:	97 f9       	bld	r25, 7
     ea0:	08 95       	ret

00000ea2 <__fp_inf>:
     ea2:	97 f9       	bld	r25, 7
     ea4:	9f 67       	ori	r25, 0x7F	; 127
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	08 95       	ret

00000eae <__fp_nan>:
     eae:	9f ef       	ldi	r25, 0xFF	; 255
     eb0:	80 ec       	ldi	r24, 0xC0	; 192
     eb2:	08 95       	ret

00000eb4 <__fp_pscA>:
     eb4:	00 24       	eor	r0, r0
     eb6:	0a 94       	dec	r0
     eb8:	16 16       	cp	r1, r22
     eba:	17 06       	cpc	r1, r23
     ebc:	18 06       	cpc	r1, r24
     ebe:	09 06       	cpc	r0, r25
     ec0:	08 95       	ret

00000ec2 <__fp_pscB>:
     ec2:	00 24       	eor	r0, r0
     ec4:	0a 94       	dec	r0
     ec6:	12 16       	cp	r1, r18
     ec8:	13 06       	cpc	r1, r19
     eca:	14 06       	cpc	r1, r20
     ecc:	05 06       	cpc	r0, r21
     ece:	08 95       	ret

00000ed0 <__fp_round>:
     ed0:	09 2e       	mov	r0, r25
     ed2:	03 94       	inc	r0
     ed4:	00 0c       	add	r0, r0
     ed6:	11 f4       	brne	.+4      	; 0xedc <__fp_round+0xc>
     ed8:	88 23       	and	r24, r24
     eda:	52 f0       	brmi	.+20     	; 0xef0 <__fp_round+0x20>
     edc:	bb 0f       	add	r27, r27
     ede:	40 f4       	brcc	.+16     	; 0xef0 <__fp_round+0x20>
     ee0:	bf 2b       	or	r27, r31
     ee2:	11 f4       	brne	.+4      	; 0xee8 <__fp_round+0x18>
     ee4:	60 ff       	sbrs	r22, 0
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <__fp_round+0x20>
     ee8:	6f 5f       	subi	r22, 0xFF	; 255
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	8f 4f       	sbci	r24, 0xFF	; 255
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	08 95       	ret

00000ef2 <__fp_split3>:
     ef2:	57 fd       	sbrc	r21, 7
     ef4:	90 58       	subi	r25, 0x80	; 128
     ef6:	44 0f       	add	r20, r20
     ef8:	55 1f       	adc	r21, r21
     efa:	59 f0       	breq	.+22     	; 0xf12 <__fp_splitA+0x10>
     efc:	5f 3f       	cpi	r21, 0xFF	; 255
     efe:	71 f0       	breq	.+28     	; 0xf1c <__fp_splitA+0x1a>
     f00:	47 95       	ror	r20

00000f02 <__fp_splitA>:
     f02:	88 0f       	add	r24, r24
     f04:	97 fb       	bst	r25, 7
     f06:	99 1f       	adc	r25, r25
     f08:	61 f0       	breq	.+24     	; 0xf22 <__fp_splitA+0x20>
     f0a:	9f 3f       	cpi	r25, 0xFF	; 255
     f0c:	79 f0       	breq	.+30     	; 0xf2c <__fp_splitA+0x2a>
     f0e:	87 95       	ror	r24
     f10:	08 95       	ret
     f12:	12 16       	cp	r1, r18
     f14:	13 06       	cpc	r1, r19
     f16:	14 06       	cpc	r1, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	f2 cf       	rjmp	.-28     	; 0xf00 <__fp_split3+0xe>
     f1c:	46 95       	lsr	r20
     f1e:	f1 df       	rcall	.-30     	; 0xf02 <__fp_splitA>
     f20:	08 c0       	rjmp	.+16     	; 0xf32 <__fp_splitA+0x30>
     f22:	16 16       	cp	r1, r22
     f24:	17 06       	cpc	r1, r23
     f26:	18 06       	cpc	r1, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	f1 cf       	rjmp	.-30     	; 0xf0e <__fp_splitA+0xc>
     f2c:	86 95       	lsr	r24
     f2e:	71 05       	cpc	r23, r1
     f30:	61 05       	cpc	r22, r1
     f32:	08 94       	sec
     f34:	08 95       	ret

00000f36 <__fp_zero>:
     f36:	e8 94       	clt

00000f38 <__fp_szero>:
     f38:	bb 27       	eor	r27, r27
     f3a:	66 27       	eor	r22, r22
     f3c:	77 27       	eor	r23, r23
     f3e:	cb 01       	movw	r24, r22
     f40:	97 f9       	bld	r25, 7
     f42:	08 95       	ret

00000f44 <__mulsf3>:
     f44:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__mulsf3x>
     f48:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_round>
     f4c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_pscA>
     f50:	38 f0       	brcs	.+14     	; 0xf60 <__mulsf3+0x1c>
     f52:	0e 94 61 07 	call	0xec2	; 0xec2 <__fp_pscB>
     f56:	20 f0       	brcs	.+8      	; 0xf60 <__mulsf3+0x1c>
     f58:	95 23       	and	r25, r21
     f5a:	11 f0       	breq	.+4      	; 0xf60 <__mulsf3+0x1c>
     f5c:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_inf>
     f60:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_nan>
     f64:	11 24       	eor	r1, r1
     f66:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__fp_szero>

00000f6a <__mulsf3x>:
     f6a:	0e 94 79 07 	call	0xef2	; 0xef2 <__fp_split3>
     f6e:	70 f3       	brcs	.-36     	; 0xf4c <__mulsf3+0x8>

00000f70 <__mulsf3_pse>:
     f70:	95 9f       	mul	r25, r21
     f72:	c1 f3       	breq	.-16     	; 0xf64 <__mulsf3+0x20>
     f74:	95 0f       	add	r25, r21
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	55 1f       	adc	r21, r21
     f7a:	62 9f       	mul	r22, r18
     f7c:	f0 01       	movw	r30, r0
     f7e:	72 9f       	mul	r23, r18
     f80:	bb 27       	eor	r27, r27
     f82:	f0 0d       	add	r31, r0
     f84:	b1 1d       	adc	r27, r1
     f86:	63 9f       	mul	r22, r19
     f88:	aa 27       	eor	r26, r26
     f8a:	f0 0d       	add	r31, r0
     f8c:	b1 1d       	adc	r27, r1
     f8e:	aa 1f       	adc	r26, r26
     f90:	64 9f       	mul	r22, r20
     f92:	66 27       	eor	r22, r22
     f94:	b0 0d       	add	r27, r0
     f96:	a1 1d       	adc	r26, r1
     f98:	66 1f       	adc	r22, r22
     f9a:	82 9f       	mul	r24, r18
     f9c:	22 27       	eor	r18, r18
     f9e:	b0 0d       	add	r27, r0
     fa0:	a1 1d       	adc	r26, r1
     fa2:	62 1f       	adc	r22, r18
     fa4:	73 9f       	mul	r23, r19
     fa6:	b0 0d       	add	r27, r0
     fa8:	a1 1d       	adc	r26, r1
     faa:	62 1f       	adc	r22, r18
     fac:	83 9f       	mul	r24, r19
     fae:	a0 0d       	add	r26, r0
     fb0:	61 1d       	adc	r22, r1
     fb2:	22 1f       	adc	r18, r18
     fb4:	74 9f       	mul	r23, r20
     fb6:	33 27       	eor	r19, r19
     fb8:	a0 0d       	add	r26, r0
     fba:	61 1d       	adc	r22, r1
     fbc:	23 1f       	adc	r18, r19
     fbe:	84 9f       	mul	r24, r20
     fc0:	60 0d       	add	r22, r0
     fc2:	21 1d       	adc	r18, r1
     fc4:	82 2f       	mov	r24, r18
     fc6:	76 2f       	mov	r23, r22
     fc8:	6a 2f       	mov	r22, r26
     fca:	11 24       	eor	r1, r1
     fcc:	9f 57       	subi	r25, 0x7F	; 127
     fce:	50 40       	sbci	r21, 0x00	; 0
     fd0:	9a f0       	brmi	.+38     	; 0xff8 <__mulsf3_pse+0x88>
     fd2:	f1 f0       	breq	.+60     	; 0x1010 <__mulsf3_pse+0xa0>
     fd4:	88 23       	and	r24, r24
     fd6:	4a f0       	brmi	.+18     	; 0xfea <__mulsf3_pse+0x7a>
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	bb 1f       	adc	r27, r27
     fde:	66 1f       	adc	r22, r22
     fe0:	77 1f       	adc	r23, r23
     fe2:	88 1f       	adc	r24, r24
     fe4:	91 50       	subi	r25, 0x01	; 1
     fe6:	50 40       	sbci	r21, 0x00	; 0
     fe8:	a9 f7       	brne	.-22     	; 0xfd4 <__mulsf3_pse+0x64>
     fea:	9e 3f       	cpi	r25, 0xFE	; 254
     fec:	51 05       	cpc	r21, r1
     fee:	80 f0       	brcs	.+32     	; 0x1010 <__mulsf3_pse+0xa0>
     ff0:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_inf>
     ff4:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__fp_szero>
     ff8:	5f 3f       	cpi	r21, 0xFF	; 255
     ffa:	e4 f3       	brlt	.-8      	; 0xff4 <__mulsf3_pse+0x84>
     ffc:	98 3e       	cpi	r25, 0xE8	; 232
     ffe:	d4 f3       	brlt	.-12     	; 0xff4 <__mulsf3_pse+0x84>
    1000:	86 95       	lsr	r24
    1002:	77 95       	ror	r23
    1004:	67 95       	ror	r22
    1006:	b7 95       	ror	r27
    1008:	f7 95       	ror	r31
    100a:	e7 95       	ror	r30
    100c:	9f 5f       	subi	r25, 0xFF	; 255
    100e:	c1 f7       	brne	.-16     	; 0x1000 <__mulsf3_pse+0x90>
    1010:	fe 2b       	or	r31, r30
    1012:	88 0f       	add	r24, r24
    1014:	91 1d       	adc	r25, r1
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
    101a:	97 f9       	bld	r25, 7
    101c:	08 95       	ret

0000101e <__divmodhi4>:
    101e:	97 fb       	bst	r25, 7
    1020:	07 2e       	mov	r0, r23
    1022:	16 f4       	brtc	.+4      	; 0x1028 <__divmodhi4+0xa>
    1024:	00 94       	com	r0
    1026:	07 d0       	rcall	.+14     	; 0x1036 <__divmodhi4_neg1>
    1028:	77 fd       	sbrc	r23, 7
    102a:	09 d0       	rcall	.+18     	; 0x103e <__divmodhi4_neg2>
    102c:	0e 94 23 08 	call	0x1046	; 0x1046 <__udivmodhi4>
    1030:	07 fc       	sbrc	r0, 7
    1032:	05 d0       	rcall	.+10     	; 0x103e <__divmodhi4_neg2>
    1034:	3e f4       	brtc	.+14     	; 0x1044 <__divmodhi4_exit>

00001036 <__divmodhi4_neg1>:
    1036:	90 95       	com	r25
    1038:	81 95       	neg	r24
    103a:	9f 4f       	sbci	r25, 0xFF	; 255
    103c:	08 95       	ret

0000103e <__divmodhi4_neg2>:
    103e:	70 95       	com	r23
    1040:	61 95       	neg	r22
    1042:	7f 4f       	sbci	r23, 0xFF	; 255

00001044 <__divmodhi4_exit>:
    1044:	08 95       	ret

00001046 <__udivmodhi4>:
    1046:	aa 1b       	sub	r26, r26
    1048:	bb 1b       	sub	r27, r27
    104a:	51 e1       	ldi	r21, 0x11	; 17
    104c:	07 c0       	rjmp	.+14     	; 0x105c <__udivmodhi4_ep>

0000104e <__udivmodhi4_loop>:
    104e:	aa 1f       	adc	r26, r26
    1050:	bb 1f       	adc	r27, r27
    1052:	a6 17       	cp	r26, r22
    1054:	b7 07       	cpc	r27, r23
    1056:	10 f0       	brcs	.+4      	; 0x105c <__udivmodhi4_ep>
    1058:	a6 1b       	sub	r26, r22
    105a:	b7 0b       	sbc	r27, r23

0000105c <__udivmodhi4_ep>:
    105c:	88 1f       	adc	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	5a 95       	dec	r21
    1062:	a9 f7       	brne	.-22     	; 0x104e <__udivmodhi4_loop>
    1064:	80 95       	com	r24
    1066:	90 95       	com	r25
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	08 95       	ret

0000106e <fwrite>:
    106e:	a0 e0       	ldi	r26, 0x00	; 0
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ed e3       	ldi	r30, 0x3D	; 61
    1074:	f8 e0       	ldi	r31, 0x08	; 8
    1076:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__prologue_saves__+0xc>
    107a:	5b 01       	movw	r10, r22
    107c:	4a 01       	movw	r8, r20
    107e:	79 01       	movw	r14, r18
    1080:	d9 01       	movw	r26, r18
    1082:	13 96       	adiw	r26, 0x03	; 3
    1084:	2c 91       	ld	r18, X
    1086:	21 ff       	sbrs	r18, 1
    1088:	1d c0       	rjmp	.+58     	; 0x10c4 <fwrite+0x56>
    108a:	c0 e0       	ldi	r28, 0x00	; 0
    108c:	d0 e0       	ldi	r29, 0x00	; 0
    108e:	c8 15       	cp	r28, r8
    1090:	d9 05       	cpc	r29, r9
    1092:	d9 f0       	breq	.+54     	; 0x10ca <fwrite+0x5c>
    1094:	8c 01       	movw	r16, r24
    1096:	6c 01       	movw	r12, r24
    1098:	ca 0c       	add	r12, r10
    109a:	db 1c       	adc	r13, r11
    109c:	c8 01       	movw	r24, r16
    109e:	0c 15       	cp	r16, r12
    10a0:	1d 05       	cpc	r17, r13
    10a2:	71 f0       	breq	.+28     	; 0x10c0 <fwrite+0x52>
    10a4:	0f 5f       	subi	r16, 0xFF	; 255
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	d7 01       	movw	r26, r14
    10aa:	18 96       	adiw	r26, 0x08	; 8
    10ac:	ed 91       	ld	r30, X+
    10ae:	fc 91       	ld	r31, X
    10b0:	19 97       	sbiw	r26, 0x09	; 9
    10b2:	b7 01       	movw	r22, r14
    10b4:	dc 01       	movw	r26, r24
    10b6:	8c 91       	ld	r24, X
    10b8:	09 95       	icall
    10ba:	89 2b       	or	r24, r25
    10bc:	79 f3       	breq	.-34     	; 0x109c <fwrite+0x2e>
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <fwrite+0x5c>
    10c0:	21 96       	adiw	r28, 0x01	; 1
    10c2:	e5 cf       	rjmp	.-54     	; 0x108e <fwrite+0x20>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <fwrite+0x5e>
    10ca:	ce 01       	movw	r24, r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	ec e0       	ldi	r30, 0x0C	; 12
    10d2:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__epilogue_restores__+0xc>

000010d6 <printf>:
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e1 e7       	ldi	r30, 0x71	; 113
    10dc:	f8 e0       	ldi	r31, 0x08	; 8
    10de:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__prologue_saves__+0x20>
    10e2:	ae 01       	movw	r20, r28
    10e4:	4b 5f       	subi	r20, 0xFB	; 251
    10e6:	5f 4f       	sbci	r21, 0xFF	; 255
    10e8:	fa 01       	movw	r30, r20
    10ea:	61 91       	ld	r22, Z+
    10ec:	71 91       	ld	r23, Z+
    10ee:	af 01       	movw	r20, r30
    10f0:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <__iob+0x2>
    10f4:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <__iob+0x3>
    10f8:	0e 94 81 08 	call	0x1102	; 0x1102 <vfprintf>
    10fc:	e2 e0       	ldi	r30, 0x02	; 2
    10fe:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__epilogue_restores__+0x20>

00001102 <vfprintf>:
    1102:	ab e0       	ldi	r26, 0x0B	; 11
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e7 e8       	ldi	r30, 0x87	; 135
    1108:	f8 e0       	ldi	r31, 0x08	; 8
    110a:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__prologue_saves__>
    110e:	6c 01       	movw	r12, r24
    1110:	7b 01       	movw	r14, r22
    1112:	8a 01       	movw	r16, r20
    1114:	fc 01       	movw	r30, r24
    1116:	17 82       	std	Z+7, r1	; 0x07
    1118:	16 82       	std	Z+6, r1	; 0x06
    111a:	83 81       	ldd	r24, Z+3	; 0x03
    111c:	81 ff       	sbrs	r24, 1
    111e:	cc c1       	rjmp	.+920    	; 0x14b8 <vfprintf+0x3b6>
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	3c 01       	movw	r6, r24
    1126:	f6 01       	movw	r30, r12
    1128:	93 81       	ldd	r25, Z+3	; 0x03
    112a:	f7 01       	movw	r30, r14
    112c:	93 fd       	sbrc	r25, 3
    112e:	85 91       	lpm	r24, Z+
    1130:	93 ff       	sbrs	r25, 3
    1132:	81 91       	ld	r24, Z+
    1134:	7f 01       	movw	r14, r30
    1136:	88 23       	and	r24, r24
    1138:	09 f4       	brne	.+2      	; 0x113c <vfprintf+0x3a>
    113a:	ba c1       	rjmp	.+884    	; 0x14b0 <vfprintf+0x3ae>
    113c:	85 32       	cpi	r24, 0x25	; 37
    113e:	39 f4       	brne	.+14     	; 0x114e <vfprintf+0x4c>
    1140:	93 fd       	sbrc	r25, 3
    1142:	85 91       	lpm	r24, Z+
    1144:	93 ff       	sbrs	r25, 3
    1146:	81 91       	ld	r24, Z+
    1148:	7f 01       	movw	r14, r30
    114a:	85 32       	cpi	r24, 0x25	; 37
    114c:	29 f4       	brne	.+10     	; 0x1158 <vfprintf+0x56>
    114e:	b6 01       	movw	r22, r12
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
    1156:	e7 cf       	rjmp	.-50     	; 0x1126 <vfprintf+0x24>
    1158:	91 2c       	mov	r9, r1
    115a:	21 2c       	mov	r2, r1
    115c:	31 2c       	mov	r3, r1
    115e:	ff e1       	ldi	r31, 0x1F	; 31
    1160:	f3 15       	cp	r31, r3
    1162:	d8 f0       	brcs	.+54     	; 0x119a <vfprintf+0x98>
    1164:	8b 32       	cpi	r24, 0x2B	; 43
    1166:	79 f0       	breq	.+30     	; 0x1186 <vfprintf+0x84>
    1168:	38 f4       	brcc	.+14     	; 0x1178 <vfprintf+0x76>
    116a:	80 32       	cpi	r24, 0x20	; 32
    116c:	79 f0       	breq	.+30     	; 0x118c <vfprintf+0x8a>
    116e:	83 32       	cpi	r24, 0x23	; 35
    1170:	a1 f4       	brne	.+40     	; 0x119a <vfprintf+0x98>
    1172:	23 2d       	mov	r18, r3
    1174:	20 61       	ori	r18, 0x10	; 16
    1176:	1d c0       	rjmp	.+58     	; 0x11b2 <vfprintf+0xb0>
    1178:	8d 32       	cpi	r24, 0x2D	; 45
    117a:	61 f0       	breq	.+24     	; 0x1194 <vfprintf+0x92>
    117c:	80 33       	cpi	r24, 0x30	; 48
    117e:	69 f4       	brne	.+26     	; 0x119a <vfprintf+0x98>
    1180:	23 2d       	mov	r18, r3
    1182:	21 60       	ori	r18, 0x01	; 1
    1184:	16 c0       	rjmp	.+44     	; 0x11b2 <vfprintf+0xb0>
    1186:	83 2d       	mov	r24, r3
    1188:	82 60       	ori	r24, 0x02	; 2
    118a:	38 2e       	mov	r3, r24
    118c:	e3 2d       	mov	r30, r3
    118e:	e4 60       	ori	r30, 0x04	; 4
    1190:	3e 2e       	mov	r3, r30
    1192:	2a c0       	rjmp	.+84     	; 0x11e8 <vfprintf+0xe6>
    1194:	f3 2d       	mov	r31, r3
    1196:	f8 60       	ori	r31, 0x08	; 8
    1198:	1d c0       	rjmp	.+58     	; 0x11d4 <vfprintf+0xd2>
    119a:	37 fc       	sbrc	r3, 7
    119c:	2d c0       	rjmp	.+90     	; 0x11f8 <vfprintf+0xf6>
    119e:	20 ed       	ldi	r18, 0xD0	; 208
    11a0:	28 0f       	add	r18, r24
    11a2:	2a 30       	cpi	r18, 0x0A	; 10
    11a4:	40 f0       	brcs	.+16     	; 0x11b6 <vfprintf+0xb4>
    11a6:	8e 32       	cpi	r24, 0x2E	; 46
    11a8:	b9 f4       	brne	.+46     	; 0x11d8 <vfprintf+0xd6>
    11aa:	36 fc       	sbrc	r3, 6
    11ac:	81 c1       	rjmp	.+770    	; 0x14b0 <vfprintf+0x3ae>
    11ae:	23 2d       	mov	r18, r3
    11b0:	20 64       	ori	r18, 0x40	; 64
    11b2:	32 2e       	mov	r3, r18
    11b4:	19 c0       	rjmp	.+50     	; 0x11e8 <vfprintf+0xe6>
    11b6:	36 fe       	sbrs	r3, 6
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <vfprintf+0xc4>
    11ba:	8a e0       	ldi	r24, 0x0A	; 10
    11bc:	98 9e       	mul	r9, r24
    11be:	20 0d       	add	r18, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	92 2e       	mov	r9, r18
    11c4:	11 c0       	rjmp	.+34     	; 0x11e8 <vfprintf+0xe6>
    11c6:	ea e0       	ldi	r30, 0x0A	; 10
    11c8:	2e 9e       	mul	r2, r30
    11ca:	20 0d       	add	r18, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	22 2e       	mov	r2, r18
    11d0:	f3 2d       	mov	r31, r3
    11d2:	f0 62       	ori	r31, 0x20	; 32
    11d4:	3f 2e       	mov	r3, r31
    11d6:	08 c0       	rjmp	.+16     	; 0x11e8 <vfprintf+0xe6>
    11d8:	8c 36       	cpi	r24, 0x6C	; 108
    11da:	21 f4       	brne	.+8      	; 0x11e4 <vfprintf+0xe2>
    11dc:	83 2d       	mov	r24, r3
    11de:	80 68       	ori	r24, 0x80	; 128
    11e0:	38 2e       	mov	r3, r24
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <vfprintf+0xe6>
    11e4:	88 36       	cpi	r24, 0x68	; 104
    11e6:	41 f4       	brne	.+16     	; 0x11f8 <vfprintf+0xf6>
    11e8:	f7 01       	movw	r30, r14
    11ea:	93 fd       	sbrc	r25, 3
    11ec:	85 91       	lpm	r24, Z+
    11ee:	93 ff       	sbrs	r25, 3
    11f0:	81 91       	ld	r24, Z+
    11f2:	7f 01       	movw	r14, r30
    11f4:	81 11       	cpse	r24, r1
    11f6:	b3 cf       	rjmp	.-154    	; 0x115e <vfprintf+0x5c>
    11f8:	98 2f       	mov	r25, r24
    11fa:	9f 7d       	andi	r25, 0xDF	; 223
    11fc:	95 54       	subi	r25, 0x45	; 69
    11fe:	93 30       	cpi	r25, 0x03	; 3
    1200:	28 f4       	brcc	.+10     	; 0x120c <vfprintf+0x10a>
    1202:	0c 5f       	subi	r16, 0xFC	; 252
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	9f e3       	ldi	r25, 0x3F	; 63
    1208:	99 83       	std	Y+1, r25	; 0x01
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <vfprintf+0x124>
    120c:	83 36       	cpi	r24, 0x63	; 99
    120e:	31 f0       	breq	.+12     	; 0x121c <vfprintf+0x11a>
    1210:	83 37       	cpi	r24, 0x73	; 115
    1212:	71 f0       	breq	.+28     	; 0x1230 <vfprintf+0x12e>
    1214:	83 35       	cpi	r24, 0x53	; 83
    1216:	09 f0       	breq	.+2      	; 0x121a <vfprintf+0x118>
    1218:	59 c0       	rjmp	.+178    	; 0x12cc <vfprintf+0x1ca>
    121a:	21 c0       	rjmp	.+66     	; 0x125e <vfprintf+0x15c>
    121c:	f8 01       	movw	r30, r16
    121e:	80 81       	ld	r24, Z
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	0e 5f       	subi	r16, 0xFE	; 254
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	88 24       	eor	r8, r8
    1228:	83 94       	inc	r8
    122a:	91 2c       	mov	r9, r1
    122c:	53 01       	movw	r10, r6
    122e:	13 c0       	rjmp	.+38     	; 0x1256 <vfprintf+0x154>
    1230:	28 01       	movw	r4, r16
    1232:	f2 e0       	ldi	r31, 0x02	; 2
    1234:	4f 0e       	add	r4, r31
    1236:	51 1c       	adc	r5, r1
    1238:	f8 01       	movw	r30, r16
    123a:	a0 80       	ld	r10, Z
    123c:	b1 80       	ldd	r11, Z+1	; 0x01
    123e:	36 fe       	sbrs	r3, 6
    1240:	03 c0       	rjmp	.+6      	; 0x1248 <vfprintf+0x146>
    1242:	69 2d       	mov	r22, r9
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <vfprintf+0x14a>
    1248:	6f ef       	ldi	r22, 0xFF	; 255
    124a:	7f ef       	ldi	r23, 0xFF	; 255
    124c:	c5 01       	movw	r24, r10
    124e:	0e 94 6d 0a 	call	0x14da	; 0x14da <strnlen>
    1252:	4c 01       	movw	r8, r24
    1254:	82 01       	movw	r16, r4
    1256:	f3 2d       	mov	r31, r3
    1258:	ff 77       	andi	r31, 0x7F	; 127
    125a:	3f 2e       	mov	r3, r31
    125c:	16 c0       	rjmp	.+44     	; 0x128a <vfprintf+0x188>
    125e:	28 01       	movw	r4, r16
    1260:	22 e0       	ldi	r18, 0x02	; 2
    1262:	42 0e       	add	r4, r18
    1264:	51 1c       	adc	r5, r1
    1266:	f8 01       	movw	r30, r16
    1268:	a0 80       	ld	r10, Z
    126a:	b1 80       	ldd	r11, Z+1	; 0x01
    126c:	36 fe       	sbrs	r3, 6
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <vfprintf+0x174>
    1270:	69 2d       	mov	r22, r9
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	02 c0       	rjmp	.+4      	; 0x127a <vfprintf+0x178>
    1276:	6f ef       	ldi	r22, 0xFF	; 255
    1278:	7f ef       	ldi	r23, 0xFF	; 255
    127a:	c5 01       	movw	r24, r10
    127c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <strnlen_P>
    1280:	4c 01       	movw	r8, r24
    1282:	f3 2d       	mov	r31, r3
    1284:	f0 68       	ori	r31, 0x80	; 128
    1286:	3f 2e       	mov	r3, r31
    1288:	82 01       	movw	r16, r4
    128a:	33 fc       	sbrc	r3, 3
    128c:	1b c0       	rjmp	.+54     	; 0x12c4 <vfprintf+0x1c2>
    128e:	82 2d       	mov	r24, r2
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	88 16       	cp	r8, r24
    1294:	99 06       	cpc	r9, r25
    1296:	b0 f4       	brcc	.+44     	; 0x12c4 <vfprintf+0x1c2>
    1298:	b6 01       	movw	r22, r12
    129a:	80 e2       	ldi	r24, 0x20	; 32
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
    12a2:	2a 94       	dec	r2
    12a4:	f4 cf       	rjmp	.-24     	; 0x128e <vfprintf+0x18c>
    12a6:	f5 01       	movw	r30, r10
    12a8:	37 fc       	sbrc	r3, 7
    12aa:	85 91       	lpm	r24, Z+
    12ac:	37 fe       	sbrs	r3, 7
    12ae:	81 91       	ld	r24, Z+
    12b0:	5f 01       	movw	r10, r30
    12b2:	b6 01       	movw	r22, r12
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
    12ba:	21 10       	cpse	r2, r1
    12bc:	2a 94       	dec	r2
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	82 1a       	sub	r8, r18
    12c2:	91 08       	sbc	r9, r1
    12c4:	81 14       	cp	r8, r1
    12c6:	91 04       	cpc	r9, r1
    12c8:	71 f7       	brne	.-36     	; 0x12a6 <vfprintf+0x1a4>
    12ca:	e8 c0       	rjmp	.+464    	; 0x149c <vfprintf+0x39a>
    12cc:	84 36       	cpi	r24, 0x64	; 100
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <vfprintf+0x1d2>
    12d0:	89 36       	cpi	r24, 0x69	; 105
    12d2:	41 f5       	brne	.+80     	; 0x1324 <vfprintf+0x222>
    12d4:	f8 01       	movw	r30, r16
    12d6:	37 fe       	sbrs	r3, 7
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <vfprintf+0x1e6>
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	0c 5f       	subi	r16, 0xFC	; 252
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <vfprintf+0x1f6>
    12e8:	60 81       	ld	r22, Z
    12ea:	71 81       	ldd	r23, Z+1	; 0x01
    12ec:	07 2e       	mov	r0, r23
    12ee:	00 0c       	add	r0, r0
    12f0:	88 0b       	sbc	r24, r24
    12f2:	99 0b       	sbc	r25, r25
    12f4:	0e 5f       	subi	r16, 0xFE	; 254
    12f6:	1f 4f       	sbci	r17, 0xFF	; 255
    12f8:	f3 2d       	mov	r31, r3
    12fa:	ff 76       	andi	r31, 0x6F	; 111
    12fc:	3f 2e       	mov	r3, r31
    12fe:	97 ff       	sbrs	r25, 7
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <vfprintf+0x212>
    1302:	90 95       	com	r25
    1304:	80 95       	com	r24
    1306:	70 95       	com	r23
    1308:	61 95       	neg	r22
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	8f 4f       	sbci	r24, 0xFF	; 255
    130e:	9f 4f       	sbci	r25, 0xFF	; 255
    1310:	f0 68       	ori	r31, 0x80	; 128
    1312:	3f 2e       	mov	r3, r31
    1314:	2a e0       	ldi	r18, 0x0A	; 10
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	a3 01       	movw	r20, r6
    131a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__ultoa_invert>
    131e:	88 2e       	mov	r8, r24
    1320:	86 18       	sub	r8, r6
    1322:	45 c0       	rjmp	.+138    	; 0x13ae <vfprintf+0x2ac>
    1324:	85 37       	cpi	r24, 0x75	; 117
    1326:	31 f4       	brne	.+12     	; 0x1334 <vfprintf+0x232>
    1328:	23 2d       	mov	r18, r3
    132a:	2f 7e       	andi	r18, 0xEF	; 239
    132c:	b2 2e       	mov	r11, r18
    132e:	2a e0       	ldi	r18, 0x0A	; 10
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	25 c0       	rjmp	.+74     	; 0x137e <vfprintf+0x27c>
    1334:	93 2d       	mov	r25, r3
    1336:	99 7f       	andi	r25, 0xF9	; 249
    1338:	b9 2e       	mov	r11, r25
    133a:	8f 36       	cpi	r24, 0x6F	; 111
    133c:	c1 f0       	breq	.+48     	; 0x136e <vfprintf+0x26c>
    133e:	18 f4       	brcc	.+6      	; 0x1346 <vfprintf+0x244>
    1340:	88 35       	cpi	r24, 0x58	; 88
    1342:	79 f0       	breq	.+30     	; 0x1362 <vfprintf+0x260>
    1344:	b5 c0       	rjmp	.+362    	; 0x14b0 <vfprintf+0x3ae>
    1346:	80 37       	cpi	r24, 0x70	; 112
    1348:	19 f0       	breq	.+6      	; 0x1350 <vfprintf+0x24e>
    134a:	88 37       	cpi	r24, 0x78	; 120
    134c:	21 f0       	breq	.+8      	; 0x1356 <vfprintf+0x254>
    134e:	b0 c0       	rjmp	.+352    	; 0x14b0 <vfprintf+0x3ae>
    1350:	e9 2f       	mov	r30, r25
    1352:	e0 61       	ori	r30, 0x10	; 16
    1354:	be 2e       	mov	r11, r30
    1356:	b4 fe       	sbrs	r11, 4
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <vfprintf+0x272>
    135a:	fb 2d       	mov	r31, r11
    135c:	f4 60       	ori	r31, 0x04	; 4
    135e:	bf 2e       	mov	r11, r31
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <vfprintf+0x272>
    1362:	34 fe       	sbrs	r3, 4
    1364:	0a c0       	rjmp	.+20     	; 0x137a <vfprintf+0x278>
    1366:	29 2f       	mov	r18, r25
    1368:	26 60       	ori	r18, 0x06	; 6
    136a:	b2 2e       	mov	r11, r18
    136c:	06 c0       	rjmp	.+12     	; 0x137a <vfprintf+0x278>
    136e:	28 e0       	ldi	r18, 0x08	; 8
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	05 c0       	rjmp	.+10     	; 0x137e <vfprintf+0x27c>
    1374:	20 e1       	ldi	r18, 0x10	; 16
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <vfprintf+0x27c>
    137a:	20 e1       	ldi	r18, 0x10	; 16
    137c:	32 e0       	ldi	r19, 0x02	; 2
    137e:	f8 01       	movw	r30, r16
    1380:	b7 fe       	sbrs	r11, 7
    1382:	07 c0       	rjmp	.+14     	; 0x1392 <vfprintf+0x290>
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	82 81       	ldd	r24, Z+2	; 0x02
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	0c 5f       	subi	r16, 0xFC	; 252
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	06 c0       	rjmp	.+12     	; 0x139e <vfprintf+0x29c>
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 5f       	subi	r16, 0xFE	; 254
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	a3 01       	movw	r20, r6
    13a0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__ultoa_invert>
    13a4:	88 2e       	mov	r8, r24
    13a6:	86 18       	sub	r8, r6
    13a8:	fb 2d       	mov	r31, r11
    13aa:	ff 77       	andi	r31, 0x7F	; 127
    13ac:	3f 2e       	mov	r3, r31
    13ae:	36 fe       	sbrs	r3, 6
    13b0:	0d c0       	rjmp	.+26     	; 0x13cc <vfprintf+0x2ca>
    13b2:	23 2d       	mov	r18, r3
    13b4:	2e 7f       	andi	r18, 0xFE	; 254
    13b6:	a2 2e       	mov	r10, r18
    13b8:	89 14       	cp	r8, r9
    13ba:	58 f4       	brcc	.+22     	; 0x13d2 <vfprintf+0x2d0>
    13bc:	34 fe       	sbrs	r3, 4
    13be:	0b c0       	rjmp	.+22     	; 0x13d6 <vfprintf+0x2d4>
    13c0:	32 fc       	sbrc	r3, 2
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <vfprintf+0x2d4>
    13c4:	83 2d       	mov	r24, r3
    13c6:	8e 7e       	andi	r24, 0xEE	; 238
    13c8:	a8 2e       	mov	r10, r24
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <vfprintf+0x2d4>
    13cc:	b8 2c       	mov	r11, r8
    13ce:	a3 2c       	mov	r10, r3
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <vfprintf+0x2d6>
    13d2:	b8 2c       	mov	r11, r8
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <vfprintf+0x2d6>
    13d6:	b9 2c       	mov	r11, r9
    13d8:	a4 fe       	sbrs	r10, 4
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <vfprintf+0x2f8>
    13dc:	fe 01       	movw	r30, r28
    13de:	e8 0d       	add	r30, r8
    13e0:	f1 1d       	adc	r31, r1
    13e2:	80 81       	ld	r24, Z
    13e4:	80 33       	cpi	r24, 0x30	; 48
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <vfprintf+0x2ee>
    13e8:	9a 2d       	mov	r25, r10
    13ea:	99 7e       	andi	r25, 0xE9	; 233
    13ec:	a9 2e       	mov	r10, r25
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <vfprintf+0x300>
    13f0:	a2 fe       	sbrs	r10, 2
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <vfprintf+0x2fe>
    13f4:	b3 94       	inc	r11
    13f6:	b3 94       	inc	r11
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <vfprintf+0x300>
    13fa:	8a 2d       	mov	r24, r10
    13fc:	86 78       	andi	r24, 0x86	; 134
    13fe:	09 f0       	breq	.+2      	; 0x1402 <vfprintf+0x300>
    1400:	b3 94       	inc	r11
    1402:	a3 fc       	sbrc	r10, 3
    1404:	11 c0       	rjmp	.+34     	; 0x1428 <vfprintf+0x326>
    1406:	a0 fe       	sbrs	r10, 0
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <vfprintf+0x314>
    140a:	b2 14       	cp	r11, r2
    140c:	88 f4       	brcc	.+34     	; 0x1430 <vfprintf+0x32e>
    140e:	28 0c       	add	r2, r8
    1410:	92 2c       	mov	r9, r2
    1412:	9b 18       	sub	r9, r11
    1414:	0e c0       	rjmp	.+28     	; 0x1432 <vfprintf+0x330>
    1416:	b2 14       	cp	r11, r2
    1418:	60 f4       	brcc	.+24     	; 0x1432 <vfprintf+0x330>
    141a:	b6 01       	movw	r22, r12
    141c:	80 e2       	ldi	r24, 0x20	; 32
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
    1424:	b3 94       	inc	r11
    1426:	f7 cf       	rjmp	.-18     	; 0x1416 <vfprintf+0x314>
    1428:	b2 14       	cp	r11, r2
    142a:	18 f4       	brcc	.+6      	; 0x1432 <vfprintf+0x330>
    142c:	2b 18       	sub	r2, r11
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0x332>
    1430:	98 2c       	mov	r9, r8
    1432:	21 2c       	mov	r2, r1
    1434:	a4 fe       	sbrs	r10, 4
    1436:	10 c0       	rjmp	.+32     	; 0x1458 <vfprintf+0x356>
    1438:	b6 01       	movw	r22, r12
    143a:	80 e3       	ldi	r24, 0x30	; 48
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
    1442:	a2 fe       	sbrs	r10, 2
    1444:	17 c0       	rjmp	.+46     	; 0x1474 <vfprintf+0x372>
    1446:	a1 fc       	sbrc	r10, 1
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <vfprintf+0x34e>
    144a:	88 e7       	ldi	r24, 0x78	; 120
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <vfprintf+0x352>
    1450:	88 e5       	ldi	r24, 0x58	; 88
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	b6 01       	movw	r22, r12
    1456:	0c c0       	rjmp	.+24     	; 0x1470 <vfprintf+0x36e>
    1458:	8a 2d       	mov	r24, r10
    145a:	86 78       	andi	r24, 0x86	; 134
    145c:	59 f0       	breq	.+22     	; 0x1474 <vfprintf+0x372>
    145e:	a1 fe       	sbrs	r10, 1
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <vfprintf+0x364>
    1462:	8b e2       	ldi	r24, 0x2B	; 43
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <vfprintf+0x366>
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	a7 fc       	sbrc	r10, 7
    146a:	8d e2       	ldi	r24, 0x2D	; 45
    146c:	b6 01       	movw	r22, r12
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
    1474:	89 14       	cp	r8, r9
    1476:	38 f4       	brcc	.+14     	; 0x1486 <vfprintf+0x384>
    1478:	b6 01       	movw	r22, r12
    147a:	80 e3       	ldi	r24, 0x30	; 48
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
    1482:	9a 94       	dec	r9
    1484:	f7 cf       	rjmp	.-18     	; 0x1474 <vfprintf+0x372>
    1486:	8a 94       	dec	r8
    1488:	f3 01       	movw	r30, r6
    148a:	e8 0d       	add	r30, r8
    148c:	f1 1d       	adc	r31, r1
    148e:	80 81       	ld	r24, Z
    1490:	b6 01       	movw	r22, r12
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
    1498:	81 10       	cpse	r8, r1
    149a:	f5 cf       	rjmp	.-22     	; 0x1486 <vfprintf+0x384>
    149c:	22 20       	and	r2, r2
    149e:	09 f4       	brne	.+2      	; 0x14a2 <vfprintf+0x3a0>
    14a0:	42 ce       	rjmp	.-892    	; 0x1126 <vfprintf+0x24>
    14a2:	b6 01       	movw	r22, r12
    14a4:	80 e2       	ldi	r24, 0x20	; 32
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fputc>
    14ac:	2a 94       	dec	r2
    14ae:	f6 cf       	rjmp	.-20     	; 0x149c <vfprintf+0x39a>
    14b0:	f6 01       	movw	r30, r12
    14b2:	86 81       	ldd	r24, Z+6	; 0x06
    14b4:	97 81       	ldd	r25, Z+7	; 0x07
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <vfprintf+0x3ba>
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	9f ef       	ldi	r25, 0xFF	; 255
    14bc:	2b 96       	adiw	r28, 0x0b	; 11
    14be:	e2 e1       	ldi	r30, 0x12	; 18
    14c0:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__epilogue_restores__>

000014c4 <strnlen_P>:
    14c4:	fc 01       	movw	r30, r24
    14c6:	05 90       	lpm	r0, Z+
    14c8:	61 50       	subi	r22, 0x01	; 1
    14ca:	70 40       	sbci	r23, 0x00	; 0
    14cc:	01 10       	cpse	r0, r1
    14ce:	d8 f7       	brcc	.-10     	; 0x14c6 <strnlen_P+0x2>
    14d0:	80 95       	com	r24
    14d2:	90 95       	com	r25
    14d4:	8e 0f       	add	r24, r30
    14d6:	9f 1f       	adc	r25, r31
    14d8:	08 95       	ret

000014da <strnlen>:
    14da:	fc 01       	movw	r30, r24
    14dc:	61 50       	subi	r22, 0x01	; 1
    14de:	70 40       	sbci	r23, 0x00	; 0
    14e0:	01 90       	ld	r0, Z+
    14e2:	01 10       	cpse	r0, r1
    14e4:	d8 f7       	brcc	.-10     	; 0x14dc <strnlen+0x2>
    14e6:	80 95       	com	r24
    14e8:	90 95       	com	r25
    14ea:	8e 0f       	add	r24, r30
    14ec:	9f 1f       	adc	r25, r31
    14ee:	08 95       	ret

000014f0 <fputc>:
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	fb 01       	movw	r30, r22
    14fa:	23 81       	ldd	r18, Z+3	; 0x03
    14fc:	21 fd       	sbrc	r18, 1
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <fputc+0x16>
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	9f ef       	ldi	r25, 0xFF	; 255
    1504:	2c c0       	rjmp	.+88     	; 0x155e <fputc+0x6e>
    1506:	22 ff       	sbrs	r18, 2
    1508:	16 c0       	rjmp	.+44     	; 0x1536 <fputc+0x46>
    150a:	46 81       	ldd	r20, Z+6	; 0x06
    150c:	57 81       	ldd	r21, Z+7	; 0x07
    150e:	24 81       	ldd	r18, Z+4	; 0x04
    1510:	35 81       	ldd	r19, Z+5	; 0x05
    1512:	42 17       	cp	r20, r18
    1514:	53 07       	cpc	r21, r19
    1516:	44 f4       	brge	.+16     	; 0x1528 <fputc+0x38>
    1518:	a0 81       	ld	r26, Z
    151a:	b1 81       	ldd	r27, Z+1	; 0x01
    151c:	9d 01       	movw	r18, r26
    151e:	2f 5f       	subi	r18, 0xFF	; 255
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	31 83       	std	Z+1, r19	; 0x01
    1524:	20 83       	st	Z, r18
    1526:	8c 93       	st	X, r24
    1528:	26 81       	ldd	r18, Z+6	; 0x06
    152a:	37 81       	ldd	r19, Z+7	; 0x07
    152c:	2f 5f       	subi	r18, 0xFF	; 255
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	37 83       	std	Z+7, r19	; 0x07
    1532:	26 83       	std	Z+6, r18	; 0x06
    1534:	14 c0       	rjmp	.+40     	; 0x155e <fputc+0x6e>
    1536:	8b 01       	movw	r16, r22
    1538:	ec 01       	movw	r28, r24
    153a:	fb 01       	movw	r30, r22
    153c:	00 84       	ldd	r0, Z+8	; 0x08
    153e:	f1 85       	ldd	r31, Z+9	; 0x09
    1540:	e0 2d       	mov	r30, r0
    1542:	09 95       	icall
    1544:	89 2b       	or	r24, r25
    1546:	e1 f6       	brne	.-72     	; 0x1500 <fputc+0x10>
    1548:	d8 01       	movw	r26, r16
    154a:	16 96       	adiw	r26, 0x06	; 6
    154c:	8d 91       	ld	r24, X+
    154e:	9c 91       	ld	r25, X
    1550:	17 97       	sbiw	r26, 0x07	; 7
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	17 96       	adiw	r26, 0x07	; 7
    1556:	9c 93       	st	X, r25
    1558:	8e 93       	st	-X, r24
    155a:	16 97       	sbiw	r26, 0x06	; 6
    155c:	ce 01       	movw	r24, r28
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <__ultoa_invert>:
    1568:	fa 01       	movw	r30, r20
    156a:	aa 27       	eor	r26, r26
    156c:	28 30       	cpi	r18, 0x08	; 8
    156e:	51 f1       	breq	.+84     	; 0x15c4 <__ultoa_invert+0x5c>
    1570:	20 31       	cpi	r18, 0x10	; 16
    1572:	81 f1       	breq	.+96     	; 0x15d4 <__ultoa_invert+0x6c>
    1574:	e8 94       	clt
    1576:	6f 93       	push	r22
    1578:	6e 7f       	andi	r22, 0xFE	; 254
    157a:	6e 5f       	subi	r22, 0xFE	; 254
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	8f 4f       	sbci	r24, 0xFF	; 255
    1580:	9f 4f       	sbci	r25, 0xFF	; 255
    1582:	af 4f       	sbci	r26, 0xFF	; 255
    1584:	b1 e0       	ldi	r27, 0x01	; 1
    1586:	3e d0       	rcall	.+124    	; 0x1604 <__ultoa_invert+0x9c>
    1588:	b4 e0       	ldi	r27, 0x04	; 4
    158a:	3c d0       	rcall	.+120    	; 0x1604 <__ultoa_invert+0x9c>
    158c:	67 0f       	add	r22, r23
    158e:	78 1f       	adc	r23, r24
    1590:	89 1f       	adc	r24, r25
    1592:	9a 1f       	adc	r25, r26
    1594:	a1 1d       	adc	r26, r1
    1596:	68 0f       	add	r22, r24
    1598:	79 1f       	adc	r23, r25
    159a:	8a 1f       	adc	r24, r26
    159c:	91 1d       	adc	r25, r1
    159e:	a1 1d       	adc	r26, r1
    15a0:	6a 0f       	add	r22, r26
    15a2:	71 1d       	adc	r23, r1
    15a4:	81 1d       	adc	r24, r1
    15a6:	91 1d       	adc	r25, r1
    15a8:	a1 1d       	adc	r26, r1
    15aa:	20 d0       	rcall	.+64     	; 0x15ec <__ultoa_invert+0x84>
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <__ultoa_invert+0x48>
    15ae:	68 94       	set
    15b0:	3f 91       	pop	r19
    15b2:	2a e0       	ldi	r18, 0x0A	; 10
    15b4:	26 9f       	mul	r18, r22
    15b6:	11 24       	eor	r1, r1
    15b8:	30 19       	sub	r19, r0
    15ba:	30 5d       	subi	r19, 0xD0	; 208
    15bc:	31 93       	st	Z+, r19
    15be:	de f6       	brtc	.-74     	; 0x1576 <__ultoa_invert+0xe>
    15c0:	cf 01       	movw	r24, r30
    15c2:	08 95       	ret
    15c4:	46 2f       	mov	r20, r22
    15c6:	47 70       	andi	r20, 0x07	; 7
    15c8:	40 5d       	subi	r20, 0xD0	; 208
    15ca:	41 93       	st	Z+, r20
    15cc:	b3 e0       	ldi	r27, 0x03	; 3
    15ce:	0f d0       	rcall	.+30     	; 0x15ee <__ultoa_invert+0x86>
    15d0:	c9 f7       	brne	.-14     	; 0x15c4 <__ultoa_invert+0x5c>
    15d2:	f6 cf       	rjmp	.-20     	; 0x15c0 <__ultoa_invert+0x58>
    15d4:	46 2f       	mov	r20, r22
    15d6:	4f 70       	andi	r20, 0x0F	; 15
    15d8:	40 5d       	subi	r20, 0xD0	; 208
    15da:	4a 33       	cpi	r20, 0x3A	; 58
    15dc:	18 f0       	brcs	.+6      	; 0x15e4 <__ultoa_invert+0x7c>
    15de:	49 5d       	subi	r20, 0xD9	; 217
    15e0:	31 fd       	sbrc	r19, 1
    15e2:	40 52       	subi	r20, 0x20	; 32
    15e4:	41 93       	st	Z+, r20
    15e6:	02 d0       	rcall	.+4      	; 0x15ec <__ultoa_invert+0x84>
    15e8:	a9 f7       	brne	.-22     	; 0x15d4 <__ultoa_invert+0x6c>
    15ea:	ea cf       	rjmp	.-44     	; 0x15c0 <__ultoa_invert+0x58>
    15ec:	b4 e0       	ldi	r27, 0x04	; 4
    15ee:	a6 95       	lsr	r26
    15f0:	97 95       	ror	r25
    15f2:	87 95       	ror	r24
    15f4:	77 95       	ror	r23
    15f6:	67 95       	ror	r22
    15f8:	ba 95       	dec	r27
    15fa:	c9 f7       	brne	.-14     	; 0x15ee <__ultoa_invert+0x86>
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	61 05       	cpc	r22, r1
    1600:	71 05       	cpc	r23, r1
    1602:	08 95       	ret
    1604:	9b 01       	movw	r18, r22
    1606:	ac 01       	movw	r20, r24
    1608:	0a 2e       	mov	r0, r26
    160a:	06 94       	lsr	r0
    160c:	57 95       	ror	r21
    160e:	47 95       	ror	r20
    1610:	37 95       	ror	r19
    1612:	27 95       	ror	r18
    1614:	ba 95       	dec	r27
    1616:	c9 f7       	brne	.-14     	; 0x160a <__ultoa_invert+0xa2>
    1618:	62 0f       	add	r22, r18
    161a:	73 1f       	adc	r23, r19
    161c:	84 1f       	adc	r24, r20
    161e:	95 1f       	adc	r25, r21
    1620:	a0 1d       	adc	r26, r0
    1622:	08 95       	ret

00001624 <__prologue_saves__>:
    1624:	2f 92       	push	r2
    1626:	3f 92       	push	r3
    1628:	4f 92       	push	r4
    162a:	5f 92       	push	r5
    162c:	6f 92       	push	r6
    162e:	7f 92       	push	r7
    1630:	8f 92       	push	r8
    1632:	9f 92       	push	r9
    1634:	af 92       	push	r10
    1636:	bf 92       	push	r11
    1638:	cf 92       	push	r12
    163a:	df 92       	push	r13
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	ca 1b       	sub	r28, r26
    164e:	db 0b       	sbc	r29, r27
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	09 94       	ijmp

0000165c <__epilogue_restores__>:
    165c:	2a 88       	ldd	r2, Y+18	; 0x12
    165e:	39 88       	ldd	r3, Y+17	; 0x11
    1660:	48 88       	ldd	r4, Y+16	; 0x10
    1662:	5f 84       	ldd	r5, Y+15	; 0x0f
    1664:	6e 84       	ldd	r6, Y+14	; 0x0e
    1666:	7d 84       	ldd	r7, Y+13	; 0x0d
    1668:	8c 84       	ldd	r8, Y+12	; 0x0c
    166a:	9b 84       	ldd	r9, Y+11	; 0x0b
    166c:	aa 84       	ldd	r10, Y+10	; 0x0a
    166e:	b9 84       	ldd	r11, Y+9	; 0x09
    1670:	c8 84       	ldd	r12, Y+8	; 0x08
    1672:	df 80       	ldd	r13, Y+7	; 0x07
    1674:	ee 80       	ldd	r14, Y+6	; 0x06
    1676:	fd 80       	ldd	r15, Y+5	; 0x05
    1678:	0c 81       	ldd	r16, Y+4	; 0x04
    167a:	1b 81       	ldd	r17, Y+3	; 0x03
    167c:	aa 81       	ldd	r26, Y+2	; 0x02
    167e:	b9 81       	ldd	r27, Y+1	; 0x01
    1680:	ce 0f       	add	r28, r30
    1682:	d1 1d       	adc	r29, r1
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	ed 01       	movw	r28, r26
    1690:	08 95       	ret

00001692 <_exit>:
    1692:	f8 94       	cli

00001694 <__stop_program>:
    1694:	ff cf       	rjmp	.-2      	; 0x1694 <__stop_program>
