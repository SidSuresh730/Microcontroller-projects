
ECE3411LabPractice8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000512  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000586  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a70  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097d  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033d  00000000  00000000  00001a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ca  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022d  00000000  00000000  00002382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000025af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_11>
  30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_12>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_21>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  d4:	0c 94 87 02 	jmp	0x50e	; 0x50e <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <startConversion>:
	startConversion();
}

void startConversion(void)
{
	ADCSRA |= (1<<ADSC);
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <setupADC>:

volatile int dutyCycle = 0;
volatile int counter = 0;
void setupADC(void)
{
	ADMUX |= (1<<MUX2) | (1<<MUX1); // ADC6 
  e8:	ec e7       	ldi	r30, 0x7C	; 124
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	86 60       	ori	r24, 0x06	; 6
  f0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | // ADC enable, interrupt enable
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8e 68       	ori	r24, 0x8E	; 142
  fa:	80 83       	st	Z, r24
				(1<<ADPS1); // prescaler = 64
				
	startConversion();
  fc:	0e 94 6e 00 	call	0xdc	; 0xdc <startConversion>
 100:	08 95       	ret

00000102 <InitTimer1>:
{
	//WGM = Fast PWM w/ TOP at OCR1A = 1111
	//COM1B = 10, Clear OC1B on compare match, set on BOTTOM
		
	//50 Hz clock
	TCCR1A |= (1<<WGM10) | (1<<WGM11);
 102:	e0 e8       	ldi	r30, 0x80	; 128
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13);
 10c:	e1 e8       	ldi	r30, 0x81	; 129
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	88 61       	ori	r24, 0x18	; 24
 114:	80 83       	st	Z, r24
	OCR1A = 1249;
 116:	81 ee       	ldi	r24, 0xE1	; 225
 118:	94 e0       	ldi	r25, 0x04	; 4
 11a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 11e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 |= (1<<OCIE1B) | (1<<OCIE1A); //Enable output compare B match interrupt
 122:	af e6       	ldi	r26, 0x6F	; 111
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	8c 91       	ld	r24, X
 128:	86 60       	ori	r24, 0x06	; 6
 12a:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS12); // prescaler = 256
 12c:	80 81       	ld	r24, Z
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <__vector_21>:
}

ISR(ADC_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	dutyCycle = ADC;
 142:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 146:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 14a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <dutyCycle+0x1>
 14e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dutyCycle>
	//startConversion();
}
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	cf 92       	push	r12
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	LED_OFF;
 18e:	58 98       	cbi	0x0b, 0	; 11
	if(dutyCycle>0)
 190:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dutyCycle>
 194:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <dutyCycle+0x1>
 198:	18 16       	cp	r1, r24
 19a:	19 06       	cpc	r1, r25
 19c:	64 f5       	brge	.+88     	; 0x1f6 <__vector_12+0x96>
		OCR1B = (int)((dutyCycle/1024.0)*(OCR1A+1)) - 1; 
 19e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dutyCycle>
 1a2:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <dutyCycle+0x1>
 1a6:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 1aa:	d0 91 89 00 	lds	r29, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1ae:	07 2e       	mov	r0, r23
 1b0:	00 0c       	add	r0, r0
 1b2:	88 0b       	sbc	r24, r24
 1b4:	99 0b       	sbc	r25, r25
 1b6:	0e 94 8e 01 	call	0x31c	; 0x31c <__floatsisf>
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e8       	ldi	r20, 0x80	; 128
 1c0:	5a e3       	ldi	r21, 0x3A	; 58
 1c2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__mulsf3>
 1c6:	6b 01       	movw	r12, r22
 1c8:	7c 01       	movw	r14, r24
 1ca:	be 01       	movw	r22, r28
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 8c 01 	call	0x318	; 0x318 <__floatunsisf>
 1d8:	9b 01       	movw	r18, r22
 1da:	ac 01       	movw	r20, r24
 1dc:	c7 01       	movw	r24, r14
 1de:	b6 01       	movw	r22, r12
 1e0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__mulsf3>
 1e4:	0e 94 56 01 	call	0x2ac	; 0x2ac <__fixsfsi>
 1e8:	61 50       	subi	r22, 0x01	; 1
 1ea:	71 09       	sbc	r23, r1
 1ec:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 1f0:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <__vector_12+0x9e>
	else 
		OCR1B = 0;
 1f6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 1fa:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	LED_ON;
 24e:	58 9a       	sbi	0x0b, 0	; 11
	if(counter == 4)
 250:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 254:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 258:	04 97       	sbiw	r24, 0x04	; 4
 25a:	39 f4       	brne	.+14     	; 0x26a <__vector_11+0x3e>
	{
		startConversion();
 25c:	0e 94 6e 00 	call	0xdc	; 0xdc <startConversion>
		counter = 0;
 260:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 264:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 268:	09 c0       	rjmp	.+18     	; 0x27c <__vector_11+0x50>
	}
	else
		counter++;
 26a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 26e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 278:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <main>:
int main(void)
{
    /* Replace with your application code */
    DDRD |= (1<<DDD0); // PORTD0 Output
 29e:	50 9a       	sbi	0x0a, 0	; 10
	
	//Enable global interrupts
	InitTimer1();
 2a0:	0e 94 81 00 	call	0x102	; 0x102 <InitTimer1>
	setupADC();
 2a4:	0e 94 74 00 	call	0xe8	; 0xe8 <setupADC>
	sei();
 2a8:	78 94       	sei
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <main+0xc>

000002ac <__fixsfsi>:
 2ac:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__fixunssfsi>
 2b0:	68 94       	set
 2b2:	b1 11       	cpse	r27, r1
 2b4:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__fp_szero>
 2b8:	08 95       	ret

000002ba <__fixunssfsi>:
 2ba:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__fp_splitA>
 2be:	88 f0       	brcs	.+34     	; 0x2e2 <__fixunssfsi+0x28>
 2c0:	9f 57       	subi	r25, 0x7F	; 127
 2c2:	98 f0       	brcs	.+38     	; 0x2ea <__fixunssfsi+0x30>
 2c4:	b9 2f       	mov	r27, r25
 2c6:	99 27       	eor	r25, r25
 2c8:	b7 51       	subi	r27, 0x17	; 23
 2ca:	b0 f0       	brcs	.+44     	; 0x2f8 <__fixunssfsi+0x3e>
 2cc:	e1 f0       	breq	.+56     	; 0x306 <__fixunssfsi+0x4c>
 2ce:	66 0f       	add	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	88 1f       	adc	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	1a f0       	brmi	.+6      	; 0x2de <__fixunssfsi+0x24>
 2d8:	ba 95       	dec	r27
 2da:	c9 f7       	brne	.-14     	; 0x2ce <__fixunssfsi+0x14>
 2dc:	14 c0       	rjmp	.+40     	; 0x306 <__fixunssfsi+0x4c>
 2de:	b1 30       	cpi	r27, 0x01	; 1
 2e0:	91 f0       	breq	.+36     	; 0x306 <__fixunssfsi+0x4c>
 2e2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__fp_zero>
 2e6:	b1 e0       	ldi	r27, 0x01	; 1
 2e8:	08 95       	ret
 2ea:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__fp_zero>
 2ee:	67 2f       	mov	r22, r23
 2f0:	78 2f       	mov	r23, r24
 2f2:	88 27       	eor	r24, r24
 2f4:	b8 5f       	subi	r27, 0xF8	; 248
 2f6:	39 f0       	breq	.+14     	; 0x306 <__fixunssfsi+0x4c>
 2f8:	b9 3f       	cpi	r27, 0xF9	; 249
 2fa:	cc f3       	brlt	.-14     	; 0x2ee <__fixunssfsi+0x34>
 2fc:	86 95       	lsr	r24
 2fe:	77 95       	ror	r23
 300:	67 95       	ror	r22
 302:	b3 95       	inc	r27
 304:	d9 f7       	brne	.-10     	; 0x2fc <__fixunssfsi+0x42>
 306:	3e f4       	brtc	.+14     	; 0x316 <__fixunssfsi+0x5c>
 308:	90 95       	com	r25
 30a:	80 95       	com	r24
 30c:	70 95       	com	r23
 30e:	61 95       	neg	r22
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	8f 4f       	sbci	r24, 0xFF	; 255
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	08 95       	ret

00000318 <__floatunsisf>:
 318:	e8 94       	clt
 31a:	09 c0       	rjmp	.+18     	; 0x32e <__floatsisf+0x12>

0000031c <__floatsisf>:
 31c:	97 fb       	bst	r25, 7
 31e:	3e f4       	brtc	.+14     	; 0x32e <__floatsisf+0x12>
 320:	90 95       	com	r25
 322:	80 95       	com	r24
 324:	70 95       	com	r23
 326:	61 95       	neg	r22
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	8f 4f       	sbci	r24, 0xFF	; 255
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	99 23       	and	r25, r25
 330:	a9 f0       	breq	.+42     	; 0x35c <__floatsisf+0x40>
 332:	f9 2f       	mov	r31, r25
 334:	96 e9       	ldi	r25, 0x96	; 150
 336:	bb 27       	eor	r27, r27
 338:	93 95       	inc	r25
 33a:	f6 95       	lsr	r31
 33c:	87 95       	ror	r24
 33e:	77 95       	ror	r23
 340:	67 95       	ror	r22
 342:	b7 95       	ror	r27
 344:	f1 11       	cpse	r31, r1
 346:	f8 cf       	rjmp	.-16     	; 0x338 <__floatsisf+0x1c>
 348:	fa f4       	brpl	.+62     	; 0x388 <__floatsisf+0x6c>
 34a:	bb 0f       	add	r27, r27
 34c:	11 f4       	brne	.+4      	; 0x352 <__floatsisf+0x36>
 34e:	60 ff       	sbrs	r22, 0
 350:	1b c0       	rjmp	.+54     	; 0x388 <__floatsisf+0x6c>
 352:	6f 5f       	subi	r22, 0xFF	; 255
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	8f 4f       	sbci	r24, 0xFF	; 255
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	16 c0       	rjmp	.+44     	; 0x388 <__floatsisf+0x6c>
 35c:	88 23       	and	r24, r24
 35e:	11 f0       	breq	.+4      	; 0x364 <__floatsisf+0x48>
 360:	96 e9       	ldi	r25, 0x96	; 150
 362:	11 c0       	rjmp	.+34     	; 0x386 <__floatsisf+0x6a>
 364:	77 23       	and	r23, r23
 366:	21 f0       	breq	.+8      	; 0x370 <__floatsisf+0x54>
 368:	9e e8       	ldi	r25, 0x8E	; 142
 36a:	87 2f       	mov	r24, r23
 36c:	76 2f       	mov	r23, r22
 36e:	05 c0       	rjmp	.+10     	; 0x37a <__floatsisf+0x5e>
 370:	66 23       	and	r22, r22
 372:	71 f0       	breq	.+28     	; 0x390 <__floatsisf+0x74>
 374:	96 e8       	ldi	r25, 0x86	; 134
 376:	86 2f       	mov	r24, r22
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	2a f0       	brmi	.+10     	; 0x388 <__floatsisf+0x6c>
 37e:	9a 95       	dec	r25
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	da f7       	brpl	.-10     	; 0x37e <__floatsisf+0x62>
 388:	88 0f       	add	r24, r24
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	97 f9       	bld	r25, 7
 390:	08 95       	ret

00000392 <__fp_split3>:
 392:	57 fd       	sbrc	r21, 7
 394:	90 58       	subi	r25, 0x80	; 128
 396:	44 0f       	add	r20, r20
 398:	55 1f       	adc	r21, r21
 39a:	59 f0       	breq	.+22     	; 0x3b2 <__fp_splitA+0x10>
 39c:	5f 3f       	cpi	r21, 0xFF	; 255
 39e:	71 f0       	breq	.+28     	; 0x3bc <__fp_splitA+0x1a>
 3a0:	47 95       	ror	r20

000003a2 <__fp_splitA>:
 3a2:	88 0f       	add	r24, r24
 3a4:	97 fb       	bst	r25, 7
 3a6:	99 1f       	adc	r25, r25
 3a8:	61 f0       	breq	.+24     	; 0x3c2 <__fp_splitA+0x20>
 3aa:	9f 3f       	cpi	r25, 0xFF	; 255
 3ac:	79 f0       	breq	.+30     	; 0x3cc <__fp_splitA+0x2a>
 3ae:	87 95       	ror	r24
 3b0:	08 95       	ret
 3b2:	12 16       	cp	r1, r18
 3b4:	13 06       	cpc	r1, r19
 3b6:	14 06       	cpc	r1, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	f2 cf       	rjmp	.-28     	; 0x3a0 <__fp_split3+0xe>
 3bc:	46 95       	lsr	r20
 3be:	f1 df       	rcall	.-30     	; 0x3a2 <__fp_splitA>
 3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <__fp_splitA+0x30>
 3c2:	16 16       	cp	r1, r22
 3c4:	17 06       	cpc	r1, r23
 3c6:	18 06       	cpc	r1, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	f1 cf       	rjmp	.-30     	; 0x3ae <__fp_splitA+0xc>
 3cc:	86 95       	lsr	r24
 3ce:	71 05       	cpc	r23, r1
 3d0:	61 05       	cpc	r22, r1
 3d2:	08 94       	sec
 3d4:	08 95       	ret

000003d6 <__fp_zero>:
 3d6:	e8 94       	clt

000003d8 <__fp_szero>:
 3d8:	bb 27       	eor	r27, r27
 3da:	66 27       	eor	r22, r22
 3dc:	77 27       	eor	r23, r23
 3de:	cb 01       	movw	r24, r22
 3e0:	97 f9       	bld	r25, 7
 3e2:	08 95       	ret

000003e4 <__mulsf3>:
 3e4:	0e 94 05 02 	call	0x40a	; 0x40a <__mulsf3x>
 3e8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_round>
 3ec:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_pscA>
 3f0:	38 f0       	brcs	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f2:	0e 94 6f 02 	call	0x4de	; 0x4de <__fp_pscB>
 3f6:	20 f0       	brcs	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	95 23       	and	r25, r21
 3fa:	11 f0       	breq	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_inf>
 400:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__fp_nan>
 404:	11 24       	eor	r1, r1
 406:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__fp_szero>

0000040a <__mulsf3x>:
 40a:	0e 94 c9 01 	call	0x392	; 0x392 <__fp_split3>
 40e:	70 f3       	brcs	.-36     	; 0x3ec <__mulsf3+0x8>

00000410 <__mulsf3_pse>:
 410:	95 9f       	mul	r25, r21
 412:	c1 f3       	breq	.-16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 414:	95 0f       	add	r25, r21
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	55 1f       	adc	r21, r21
 41a:	62 9f       	mul	r22, r18
 41c:	f0 01       	movw	r30, r0
 41e:	72 9f       	mul	r23, r18
 420:	bb 27       	eor	r27, r27
 422:	f0 0d       	add	r31, r0
 424:	b1 1d       	adc	r27, r1
 426:	63 9f       	mul	r22, r19
 428:	aa 27       	eor	r26, r26
 42a:	f0 0d       	add	r31, r0
 42c:	b1 1d       	adc	r27, r1
 42e:	aa 1f       	adc	r26, r26
 430:	64 9f       	mul	r22, r20
 432:	66 27       	eor	r22, r22
 434:	b0 0d       	add	r27, r0
 436:	a1 1d       	adc	r26, r1
 438:	66 1f       	adc	r22, r22
 43a:	82 9f       	mul	r24, r18
 43c:	22 27       	eor	r18, r18
 43e:	b0 0d       	add	r27, r0
 440:	a1 1d       	adc	r26, r1
 442:	62 1f       	adc	r22, r18
 444:	73 9f       	mul	r23, r19
 446:	b0 0d       	add	r27, r0
 448:	a1 1d       	adc	r26, r1
 44a:	62 1f       	adc	r22, r18
 44c:	83 9f       	mul	r24, r19
 44e:	a0 0d       	add	r26, r0
 450:	61 1d       	adc	r22, r1
 452:	22 1f       	adc	r18, r18
 454:	74 9f       	mul	r23, r20
 456:	33 27       	eor	r19, r19
 458:	a0 0d       	add	r26, r0
 45a:	61 1d       	adc	r22, r1
 45c:	23 1f       	adc	r18, r19
 45e:	84 9f       	mul	r24, r20
 460:	60 0d       	add	r22, r0
 462:	21 1d       	adc	r18, r1
 464:	82 2f       	mov	r24, r18
 466:	76 2f       	mov	r23, r22
 468:	6a 2f       	mov	r22, r26
 46a:	11 24       	eor	r1, r1
 46c:	9f 57       	subi	r25, 0x7F	; 127
 46e:	50 40       	sbci	r21, 0x00	; 0
 470:	9a f0       	brmi	.+38     	; 0x498 <__mulsf3_pse+0x88>
 472:	f1 f0       	breq	.+60     	; 0x4b0 <__mulsf3_pse+0xa0>
 474:	88 23       	and	r24, r24
 476:	4a f0       	brmi	.+18     	; 0x48a <__mulsf3_pse+0x7a>
 478:	ee 0f       	add	r30, r30
 47a:	ff 1f       	adc	r31, r31
 47c:	bb 1f       	adc	r27, r27
 47e:	66 1f       	adc	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	88 1f       	adc	r24, r24
 484:	91 50       	subi	r25, 0x01	; 1
 486:	50 40       	sbci	r21, 0x00	; 0
 488:	a9 f7       	brne	.-22     	; 0x474 <__mulsf3_pse+0x64>
 48a:	9e 3f       	cpi	r25, 0xFE	; 254
 48c:	51 05       	cpc	r21, r1
 48e:	80 f0       	brcs	.+32     	; 0x4b0 <__mulsf3_pse+0xa0>
 490:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_inf>
 494:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__fp_szero>
 498:	5f 3f       	cpi	r21, 0xFF	; 255
 49a:	e4 f3       	brlt	.-8      	; 0x494 <__mulsf3_pse+0x84>
 49c:	98 3e       	cpi	r25, 0xE8	; 232
 49e:	d4 f3       	brlt	.-12     	; 0x494 <__mulsf3_pse+0x84>
 4a0:	86 95       	lsr	r24
 4a2:	77 95       	ror	r23
 4a4:	67 95       	ror	r22
 4a6:	b7 95       	ror	r27
 4a8:	f7 95       	ror	r31
 4aa:	e7 95       	ror	r30
 4ac:	9f 5f       	subi	r25, 0xFF	; 255
 4ae:	c1 f7       	brne	.-16     	; 0x4a0 <__mulsf3_pse+0x90>
 4b0:	fe 2b       	or	r31, r30
 4b2:	88 0f       	add	r24, r24
 4b4:	91 1d       	adc	r25, r1
 4b6:	96 95       	lsr	r25
 4b8:	87 95       	ror	r24
 4ba:	97 f9       	bld	r25, 7
 4bc:	08 95       	ret

000004be <__fp_inf>:
 4be:	97 f9       	bld	r25, 7
 4c0:	9f 67       	ori	r25, 0x7F	; 127
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	08 95       	ret

000004ca <__fp_nan>:
 4ca:	9f ef       	ldi	r25, 0xFF	; 255
 4cc:	80 ec       	ldi	r24, 0xC0	; 192
 4ce:	08 95       	ret

000004d0 <__fp_pscA>:
 4d0:	00 24       	eor	r0, r0
 4d2:	0a 94       	dec	r0
 4d4:	16 16       	cp	r1, r22
 4d6:	17 06       	cpc	r1, r23
 4d8:	18 06       	cpc	r1, r24
 4da:	09 06       	cpc	r0, r25
 4dc:	08 95       	ret

000004de <__fp_pscB>:
 4de:	00 24       	eor	r0, r0
 4e0:	0a 94       	dec	r0
 4e2:	12 16       	cp	r1, r18
 4e4:	13 06       	cpc	r1, r19
 4e6:	14 06       	cpc	r1, r20
 4e8:	05 06       	cpc	r0, r21
 4ea:	08 95       	ret

000004ec <__fp_round>:
 4ec:	09 2e       	mov	r0, r25
 4ee:	03 94       	inc	r0
 4f0:	00 0c       	add	r0, r0
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <__fp_round+0xc>
 4f4:	88 23       	and	r24, r24
 4f6:	52 f0       	brmi	.+20     	; 0x50c <__fp_round+0x20>
 4f8:	bb 0f       	add	r27, r27
 4fa:	40 f4       	brcc	.+16     	; 0x50c <__fp_round+0x20>
 4fc:	bf 2b       	or	r27, r31
 4fe:	11 f4       	brne	.+4      	; 0x504 <__fp_round+0x18>
 500:	60 ff       	sbrs	r22, 0
 502:	04 c0       	rjmp	.+8      	; 0x50c <__fp_round+0x20>
 504:	6f 5f       	subi	r22, 0xFF	; 255
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
