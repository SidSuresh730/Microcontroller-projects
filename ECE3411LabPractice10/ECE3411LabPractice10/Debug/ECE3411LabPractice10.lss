
ECE3411LabPractice10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000626  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000626  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  0080014a  0080014a  00000704  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001141  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7d  00000000  00000000  0000195d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071d  00000000  00000000  000025da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000598  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d7  00000000  00000000  00003444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000391b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_11>
  30:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_12>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e2       	ldi	r30, 0x26	; 38
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 34       	cpi	r26, 0x4A	; 74
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e4       	ldi	r26, 0x4A	; 74
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 3f       	cpi	r26, 0xF4	; 244
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 41 01 	call	0x282	; 0x282 <main>
  ea:	0c 94 11 03 	jmp	0x622	; 0x622 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <InitTimer0>:
{
/* wait for data to be received */
while ( !(UCSR0A & (1<<RXC0)) ) ;
/* get and return received data from buffer */
return UDR0;
}
  f2:	84 b5       	in	r24, 0x24	; 36
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	84 bd       	out	0x24, r24	; 36
  f8:	89 ef       	ldi	r24, 0xF9	; 249
  fa:	87 bd       	out	0x27, r24	; 39
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	85 bd       	out	0x25, r24	; 37
 106:	08 95       	ret

00000108 <InitTimer1>:
 108:	e0 e8       	ldi	r30, 0x80	; 128
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	83 62       	ori	r24, 0x23	; 35
 110:	80 83       	st	Z, r24
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 61       	ori	r24, 0x18	; 24
 11a:	80 83       	st	Z, r24
 11c:	a8 e8       	ldi	r26, 0x88	; 136
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	81 e1       	ldi	r24, 0x11	; 17
 122:	9a e7       	ldi	r25, 0x7A	; 122
 124:	11 96       	adiw	r26, 0x01	; 1
 126:	9c 93       	st	X, r25
 128:	8e 93       	st	-X, r24
 12a:	8d 91       	ld	r24, X+
 12c:	9c 91       	ld	r25, X
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	96 95       	lsr	r25
 132:	87 95       	ror	r24
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 13a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 13e:	af e6       	ldi	r26, 0x6F	; 111
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	8c 91       	ld	r24, X
 144:	86 60       	ori	r24, 0x06	; 6
 146:	8c 93       	st	X, r24
 148:	80 81       	ld	r24, Z
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	80 83       	st	Z, r24
 14e:	08 95       	ret

00000150 <readMSG>:
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	0a e4       	ldi	r16, 0x4A	; 74
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 84 01 	call	0x308	; 0x308 <uart_getchar>
 168:	f8 01       	movw	r30, r16
 16a:	81 93       	st	Z+, r24
 16c:	8f 01       	movw	r16, r30
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	8a 30       	cpi	r24, 0x0A	; 10
 172:	11 f0       	breq	.+4      	; 0x178 <readMSG+0x28>
 174:	81 11       	cpse	r24, r1
 176:	f4 cf       	rjmp	.-24     	; 0x160 <readMSG+0x10>
 178:	c6 5b       	subi	r28, 0xB6	; 182
 17a:	de 4f       	sbci	r29, 0xFE	; 254
 17c:	18 82       	st	Y, r1
 17e:	8a e4       	ldi	r24, 0x4A	; 74
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <writeMSG>:
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <writeMSG+0x1a>
 196:	ac 0f       	add	r26, r28
 198:	bd 1f       	adc	r27, r29
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	71 e0       	ldi	r23, 0x01	; 1
 19e:	8c 91       	ld	r24, X
 1a0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <msg>
 1aa:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <msg+0x1>
 1ae:	fd 01       	movw	r30, r26
 1b0:	01 90       	ld	r0, Z+
 1b2:	00 20       	and	r0, r0
 1b4:	e9 f7       	brne	.-6      	; 0x1b0 <writeMSG+0x24>
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	ea 1b       	sub	r30, r26
 1ba:	fb 0b       	sbc	r31, r27
 1bc:	ce 17       	cp	r28, r30
 1be:	df 07       	cpc	r29, r31
 1c0:	50 f3       	brcs	.-44     	; 0x196 <writeMSG+0xa>
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <changeMode>:
 1c8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 1cc:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1d0:	81 31       	cpi	r24, 0x11	; 17
 1d2:	9a 47       	sbci	r25, 0x7A	; 122
 1d4:	39 f4       	brne	.+14     	; 0x1e4 <changeMode+0x1c>
 1d6:	83 e8       	ldi	r24, 0x83	; 131
 1d8:	9e e1       	ldi	r25, 0x1E	; 30
 1da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 1e2:	0a c0       	rjmp	.+20     	; 0x1f8 <changeMode+0x30>
 1e4:	e8 e8       	ldi	r30, 0x88	; 136
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	83 e8       	ldi	r24, 0x83	; 131
 1ea:	9e e1       	ldi	r25, 0x1E	; 30
 1ec:	91 83       	std	Z+1, r25	; 0x01
 1ee:	80 83       	st	Z, r24
 1f0:	81 e1       	ldi	r24, 0x11	; 17
 1f2:	9a e7       	ldi	r25, 0x7A	; 122
 1f4:	91 83       	std	Z+1, r25	; 0x01
 1f6:	80 83       	st	Z, r24
 1f8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 1fc:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 20c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 210:	08 95       	ret

00000212 <__vector_12>:
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	1d 98       	cbi	0x03, 5	; 3
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_11>:
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	1d 9a       	sbi	0x03, 5	; 3
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <__vector_14>:
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <counter>
 250:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <counter+0x1>
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <counter+0x1>
 25a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <counter>
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <UART_Init>:
 26c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 270:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 274:	88 e1       	ldi	r24, 0x18	; 24
 276:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 27a:	8e e0       	ldi	r24, 0x0E	; 14
 27c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 280:	08 95       	ret

00000282 <main>:

int main(void)
{
    /* Replace with your application code */
	UART_Init(MYUBRR);
 282:	87 e6       	ldi	r24, 0x67	; 103
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 36 01 	call	0x26c	; 0x26c <UART_Init>
	//DDRB &= ~(1<<DDB7); //PB7, on-board button
	DDRB |= (1<<DDB5); //PB5, on-board LED
 28a:	25 9a       	sbi	0x04, 5	; 4
	InitTimer1();
 28c:	0e 94 84 00 	call	0x108	; 0x108 <InitTimer1>
	InitTimer0();
 290:	0e 94 79 00 	call	0xf2	; 0xf2 <InitTimer0>
	sei();
 294:	78 94       	sei
			//USART_Transmit(msg);
			//a = uart_getchar(&UART_Stream);
			//uart_putchar(a, &UART_Stream);
    while (1) 
    {
			if(counter >= 10000) // 10 s
 296:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <counter>
 29a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <counter+0x1>
 29e:	80 31       	cpi	r24, 0x10	; 16
 2a0:	97 42       	sbci	r25, 0x27	; 39
 2a2:	cc f3       	brlt	.-14     	; 0x296 <main+0x14>
			{
				//Do Stuff
				counter = 0;
 2a4:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <counter+0x1>
 2a8:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <counter>
				writeMSG();
 2ac:	0e 94 c6 00 	call	0x18c	; 0x18c <writeMSG>
				const char* ans = readMSG();
 2b0:	0e 94 a8 00 	call	0x150	; 0x150 <readMSG>
				if(strcmp((const char*)ans, "YES\n") == 0)
 2b4:	60 e1       	ldi	r22, 0x10	; 16
 2b6:	71 e0       	ldi	r23, 0x01	; 1
 2b8:	0e 94 9d 02 	call	0x53a	; 0x53a <strcmp>
 2bc:	89 2b       	or	r24, r25
 2be:	59 f7       	brne	.-42     	; 0x296 <main+0x14>
				{
					changeMode();
 2c0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <changeMode>
 2c4:	e8 cf       	rjmp	.-48     	; 0x296 <main+0x14>

000002c6 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 2c6:	cf 93       	push	r28
 2c8:	c8 2f       	mov	r28, r24

  if (c == '\a')
 2ca:	87 30       	cpi	r24, 0x07	; 7
 2cc:	69 f4       	brne	.+26     	; 0x2e8 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 2ce:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <__iob+0x4>
 2d2:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <__iob+0x5>
 2d6:	47 e0       	ldi	r20, 0x07	; 7
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	81 e4       	ldi	r24, 0x41	; 65
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 a6 02 	call	0x54c	; 0x54c <fwrite>
      return 0;
 2e6:	0c c0       	rjmp	.+24     	; 0x300 <uart_putchar+0x3a>
    }

  if (c == '\n')
 2e8:	8a 30       	cpi	r24, 0x0A	; 10
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 2ec:	8d e0       	ldi	r24, 0x0D	; 13
 2ee:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 2f2:	e0 ec       	ldi	r30, 0xC0	; 192
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	85 ff       	sbrs	r24, 5
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <uart_putchar+0x30>
  UDR0 = c;
 2fc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

  return 0;
}
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 308:	6f 92       	push	r6
 30a:	7f 92       	push	r7
 30c:	8f 92       	push	r8
 30e:	9f 92       	push	r9
 310:	af 92       	push	r10
 312:	bf 92       	push	r11
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 324:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <rxp.1828>
 328:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <rxp.1828+0x1>
 32c:	23 2b       	or	r18, r19
 32e:	09 f0       	breq	.+2      	; 0x332 <uart_getchar+0x2a>
 330:	da c0       	rjmp	.+436    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 332:	8c 01       	movw	r16, r24
 334:	0f 2e       	mov	r0, r31
 336:	fc e9       	ldi	r31, 0x9C	; 156
 338:	8f 2e       	mov	r8, r31
 33a:	f1 e0       	ldi	r31, 0x01	; 1
 33c:	9f 2e       	mov	r9, r31
 33e:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 340:	c0 ec       	ldi	r28, 0xC0	; 192
 342:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 344:	0f 2e       	mov	r0, r31
 346:	f6 ec       	ldi	r31, 0xC6	; 198
 348:	cf 2e       	mov	r12, r31
 34a:	d1 2c       	mov	r13, r1
 34c:	f0 2d       	mov	r31, r0
 34e:	54 01       	movw	r10, r8
 350:	0f 2e       	mov	r0, r31
 352:	fb e9       	ldi	r31, 0x9B	; 155
 354:	6f 2e       	mov	r6, r31
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	7f 2e       	mov	r7, r31
 35a:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 35c:	88 81       	ld	r24, Y
 35e:	88 23       	and	r24, r24
 360:	ec f7       	brge	.-6      	; 0x35c <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 362:	88 81       	ld	r24, Y
 364:	84 fd       	sbrc	r24, 4
 366:	d2 c0       	rjmp	.+420    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 368:	88 81       	ld	r24, Y
 36a:	83 fd       	sbrc	r24, 3
 36c:	d2 c0       	rjmp	.+420    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
	  return _FDEV_ERR;
	c = UDR0;
 36e:	f6 01       	movw	r30, r12
 370:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 372:	8d 30       	cpi	r24, 0x0D	; 13
 374:	11 f0       	breq	.+4      	; 0x37a <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 376:	8a 30       	cpi	r24, 0x0A	; 10
 378:	69 f4       	brne	.+26     	; 0x394 <uart_getchar+0x8c>
	  {
	    *cp = c;
 37a:	8a e0       	ldi	r24, 0x0A	; 10
 37c:	f4 01       	movw	r30, r8
 37e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 380:	b8 01       	movw	r22, r16
 382:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
	    rxp = b;
 386:	8c e9       	ldi	r24, 0x9C	; 156
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <rxp.1828+0x1>
 38e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <rxp.1828>
	    break;
 392:	a9 c0       	rjmp	.+338    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
	  }
	else if (c == '\t')
 394:	89 30       	cpi	r24, 0x09	; 9
 396:	39 f0       	breq	.+14     	; 0x3a6 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 398:	90 ee       	ldi	r25, 0xE0	; 224
 39a:	98 0f       	add	r25, r24
 39c:	9f 35       	cpi	r25, 0x5F	; 95
 39e:	20 f0       	brcs	.+8      	; 0x3a8 <uart_getchar+0xa0>
 3a0:	80 3a       	cpi	r24, 0xA0	; 160
 3a2:	b8 f0       	brcs	.+46     	; 0x3d2 <uart_getchar+0xca>
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 3a6:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 3a8:	fb ee       	ldi	r31, 0xEB	; 235
 3aa:	8f 16       	cp	r8, r31
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	9f 06       	cpc	r9, r31
 3b0:	29 f4       	brne	.+10     	; 0x3bc <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 3b2:	b8 01       	movw	r22, r16
 3b4:	87 e0       	ldi	r24, 0x07	; 7
 3b6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
 3ba:	d0 cf       	rjmp	.-96     	; 0x35c <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 3bc:	74 01       	movw	r14, r8
 3be:	9f ef       	ldi	r25, 0xFF	; 255
 3c0:	e9 1a       	sub	r14, r25
 3c2:	f9 0a       	sbc	r15, r25
 3c4:	f4 01       	movw	r30, r8
 3c6:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 3c8:	b8 01       	movw	r22, r16
 3ca:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 3ce:	47 01       	movw	r8, r14
 3d0:	c5 cf       	rjmp	.-118    	; 0x35c <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 3d2:	82 31       	cpi	r24, 0x12	; 18
 3d4:	d1 f1       	breq	.+116    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3d6:	30 f4       	brcc	.+12     	; 0x3e4 <uart_getchar+0xdc>
 3d8:	83 30       	cpi	r24, 0x03	; 3
 3da:	09 f4       	brne	.+2      	; 0x3de <uart_getchar+0xd6>
 3dc:	9d c0       	rjmp	.+314    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 3de:	88 30       	cpi	r24, 0x08	; 8
 3e0:	e9 f0       	breq	.+58     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3e2:	bc cf       	rjmp	.-136    	; 0x35c <uart_getchar+0x54>
 3e4:	87 31       	cpi	r24, 0x17	; 23
 3e6:	29 f0       	breq	.+10     	; 0x3f2 <uart_getchar+0xea>
 3e8:	8f 37       	cpi	r24, 0x7F	; 127
 3ea:	c1 f0       	breq	.+48     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3ec:	85 31       	cpi	r24, 0x15	; 21
 3ee:	79 f0       	breq	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f0:	b5 cf       	rjmp	.-150    	; 0x35c <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 3f2:	fc e9       	ldi	r31, 0x9C	; 156
 3f4:	8f 16       	cp	r8, r31
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
 3f8:	9f 06       	cpc	r9, r31
 3fa:	09 f0       	breq	.+2      	; 0x3fe <uart_getchar+0xf6>
 3fc:	08 f4       	brcc	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	ae cf       	rjmp	.-164    	; 0x35c <uart_getchar+0x54>
 400:	f4 01       	movw	r30, r8
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	80 81       	ld	r24, Z
 406:	80 32       	cpi	r24, 0x20	; 32
 408:	09 f0       	breq	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	52 c0       	rjmp	.+164    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 40c:	a7 cf       	rjmp	.-178    	; 0x35c <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 40e:	8c e9       	ldi	r24, 0x9C	; 156
 410:	88 16       	cp	r8, r24
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	98 06       	cpc	r9, r24
 416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	98 f5       	brcc	.+102    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 41a:	a0 cf       	rjmp	.-192    	; 0x35c <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 41c:	9c e9       	ldi	r25, 0x9C	; 156
 41e:	89 16       	cp	r8, r25
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	99 06       	cpc	r9, r25
 424:	09 f0       	breq	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	08 f4       	brcc	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 428:	99 cf       	rjmp	.-206    	; 0x35c <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 42a:	b8 01       	movw	r22, r16
 42c:	88 e0       	ldi	r24, 0x08	; 8
 42e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
		uart_putchar(' ', stream);
 432:	b8 01       	movw	r22, r16
 434:	80 e2       	ldi	r24, 0x20	; 32
 436:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
		uart_putchar('\b', stream);
 43a:	b8 01       	movw	r22, r16
 43c:	88 e0       	ldi	r24, 0x08	; 8
 43e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
		cp--;
 442:	e1 e0       	ldi	r30, 0x01	; 1
 444:	8e 1a       	sub	r8, r30
 446:	91 08       	sbc	r9, r1
 448:	89 cf       	rjmp	.-238    	; 0x35c <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 44a:	b8 01       	movw	r22, r16
 44c:	8d e0       	ldi	r24, 0x0D	; 13
 44e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 452:	fc e9       	ldi	r31, 0x9C	; 156
 454:	8f 16       	cp	r8, r31
 456:	f1 e0       	ldi	r31, 0x01	; 1
 458:	9f 06       	cpc	r9, r31
 45a:	09 f0       	breq	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	08 f4       	brcc	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	7e cf       	rjmp	.-260    	; 0x35c <uart_getchar+0x54>
 460:	0f 2e       	mov	r0, r31
 462:	fc e9       	ldi	r31, 0x9C	; 156
 464:	ef 2e       	mov	r14, r31
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	ff 2e       	mov	r15, r31
 46a:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 46c:	b8 01       	movw	r22, r16
 46e:	f7 01       	movw	r30, r14
 470:	81 91       	ld	r24, Z+
 472:	7f 01       	movw	r14, r30
 474:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 478:	8e 14       	cp	r8, r14
 47a:	9f 04       	cpc	r9, r15
 47c:	b9 f7       	brne	.-18     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 47e:	6e cf       	rjmp	.-292    	; 0x35c <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 480:	b8 01       	movw	r22, r16
 482:	88 e0       	ldi	r24, 0x08	; 8
 484:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
		uart_putchar(' ', stream);
 488:	b8 01       	movw	r22, r16
 48a:	80 e2       	ldi	r24, 0x20	; 32
 48c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
		uart_putchar('\b', stream);
 490:	b8 01       	movw	r22, r16
 492:	88 e0       	ldi	r24, 0x08	; 8
 494:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
		cp--;
 498:	f1 e0       	ldi	r31, 0x01	; 1
 49a:	8f 1a       	sub	r8, r31
 49c:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 49e:	8c e9       	ldi	r24, 0x9C	; 156
 4a0:	88 16       	cp	r8, r24
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	98 06       	cpc	r9, r24
 4a6:	61 f7       	brne	.-40     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 4a8:	f3 01       	movw	r30, r6
 4aa:	31 96       	adiw	r30, 0x01	; 1
 4ac:	4f 01       	movw	r8, r30
 4ae:	56 cf       	rjmp	.-340    	; 0x35c <uart_getchar+0x54>
 4b0:	74 01       	movw	r14, r8
 4b2:	f1 e0       	ldi	r31, 0x01	; 1
 4b4:	ef 1a       	sub	r14, r31
 4b6:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 4b8:	b8 01       	movw	r22, r16
 4ba:	88 e0       	ldi	r24, 0x08	; 8
 4bc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
		uart_putchar(' ', stream);
 4c0:	b8 01       	movw	r22, r16
 4c2:	80 e2       	ldi	r24, 0x20	; 32
 4c4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
		uart_putchar('\b', stream);
 4c8:	b8 01       	movw	r22, r16
 4ca:	88 e0       	ldi	r24, 0x08	; 8
 4cc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_putchar>
		cp--;
 4d0:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 4d2:	ea 14       	cp	r14, r10
 4d4:	fb 04       	cpc	r15, r11
 4d6:	09 f4       	brne	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d8:	41 cf       	rjmp	.-382    	; 0x35c <uart_getchar+0x54>
 4da:	f7 01       	movw	r30, r14
 4dc:	82 91       	ld	r24, -Z
 4de:	7f 01       	movw	r14, r30
 4e0:	80 32       	cpi	r24, 0x20	; 32
 4e2:	51 f7       	brne	.-44     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4e4:	3b cf       	rjmp	.-394    	; 0x35c <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 4e6:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <rxp.1828>
 4ea:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <rxp.1828+0x1>
 4ee:	cf 01       	movw	r24, r30
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <rxp.1828+0x1>
 4f6:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <rxp.1828>
 4fa:	80 81       	ld	r24, Z
  if (c == '\n')
 4fc:	8a 30       	cpi	r24, 0x0A	; 10
 4fe:	21 f4       	brne	.+8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
    rxp = 0;
 500:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <rxp.1828+0x1>
 504:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <rxp.1828>

  return c;
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	08 c0       	rjmp	.+16     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 50c:	8e ef       	ldi	r24, 0xFE	; 254
 50e:	9f ef       	ldi	r25, 0xFF	; 255
 510:	05 c0       	rjmp	.+10     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	9f ef       	ldi	r25, 0xFF	; 255
 516:	02 c0       	rjmp	.+4      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	0f 91       	pop	r16
 524:	ff 90       	pop	r15
 526:	ef 90       	pop	r14
 528:	df 90       	pop	r13
 52a:	cf 90       	pop	r12
 52c:	bf 90       	pop	r11
 52e:	af 90       	pop	r10
 530:	9f 90       	pop	r9
 532:	8f 90       	pop	r8
 534:	7f 90       	pop	r7
 536:	6f 90       	pop	r6
 538:	08 95       	ret

0000053a <strcmp>:
 53a:	fb 01       	movw	r30, r22
 53c:	dc 01       	movw	r26, r24
 53e:	8d 91       	ld	r24, X+
 540:	01 90       	ld	r0, Z+
 542:	80 19       	sub	r24, r0
 544:	01 10       	cpse	r0, r1
 546:	d9 f3       	breq	.-10     	; 0x53e <strcmp+0x4>
 548:	99 0b       	sbc	r25, r25
 54a:	08 95       	ret

0000054c <fwrite>:
 54c:	a0 e0       	ldi	r26, 0x00	; 0
 54e:	b0 e0       	ldi	r27, 0x00	; 0
 550:	ec ea       	ldi	r30, 0xAC	; 172
 552:	f2 e0       	ldi	r31, 0x02	; 2
 554:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__prologue_saves__+0xc>
 558:	5b 01       	movw	r10, r22
 55a:	4a 01       	movw	r8, r20
 55c:	79 01       	movw	r14, r18
 55e:	d9 01       	movw	r26, r18
 560:	13 96       	adiw	r26, 0x03	; 3
 562:	2c 91       	ld	r18, X
 564:	21 ff       	sbrs	r18, 1
 566:	1d c0       	rjmp	.+58     	; 0x5a2 <fwrite+0x56>
 568:	c0 e0       	ldi	r28, 0x00	; 0
 56a:	d0 e0       	ldi	r29, 0x00	; 0
 56c:	c8 15       	cp	r28, r8
 56e:	d9 05       	cpc	r29, r9
 570:	d9 f0       	breq	.+54     	; 0x5a8 <fwrite+0x5c>
 572:	8c 01       	movw	r16, r24
 574:	6c 01       	movw	r12, r24
 576:	ca 0c       	add	r12, r10
 578:	db 1c       	adc	r13, r11
 57a:	c8 01       	movw	r24, r16
 57c:	0c 15       	cp	r16, r12
 57e:	1d 05       	cpc	r17, r13
 580:	71 f0       	breq	.+28     	; 0x59e <fwrite+0x52>
 582:	0f 5f       	subi	r16, 0xFF	; 255
 584:	1f 4f       	sbci	r17, 0xFF	; 255
 586:	d7 01       	movw	r26, r14
 588:	18 96       	adiw	r26, 0x08	; 8
 58a:	ed 91       	ld	r30, X+
 58c:	fc 91       	ld	r31, X
 58e:	19 97       	sbiw	r26, 0x09	; 9
 590:	b7 01       	movw	r22, r14
 592:	dc 01       	movw	r26, r24
 594:	8c 91       	ld	r24, X
 596:	09 95       	icall
 598:	89 2b       	or	r24, r25
 59a:	79 f3       	breq	.-34     	; 0x57a <fwrite+0x2e>
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <fwrite+0x5c>
 59e:	21 96       	adiw	r28, 0x01	; 1
 5a0:	e5 cf       	rjmp	.-54     	; 0x56c <fwrite+0x20>
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <fwrite+0x5e>
 5a8:	ce 01       	movw	r24, r28
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
 5ae:	ec e0       	ldi	r30, 0x0C	; 12
 5b0:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__epilogue_restores__+0xc>

000005b4 <__prologue_saves__>:
 5b4:	2f 92       	push	r2
 5b6:	3f 92       	push	r3
 5b8:	4f 92       	push	r4
 5ba:	5f 92       	push	r5
 5bc:	6f 92       	push	r6
 5be:	7f 92       	push	r7
 5c0:	8f 92       	push	r8
 5c2:	9f 92       	push	r9
 5c4:	af 92       	push	r10
 5c6:	bf 92       	push	r11
 5c8:	cf 92       	push	r12
 5ca:	df 92       	push	r13
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
 5dc:	ca 1b       	sub	r28, r26
 5de:	db 0b       	sbc	r29, r27
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	09 94       	ijmp

000005ec <__epilogue_restores__>:
 5ec:	2a 88       	ldd	r2, Y+18	; 0x12
 5ee:	39 88       	ldd	r3, Y+17	; 0x11
 5f0:	48 88       	ldd	r4, Y+16	; 0x10
 5f2:	5f 84       	ldd	r5, Y+15	; 0x0f
 5f4:	6e 84       	ldd	r6, Y+14	; 0x0e
 5f6:	7d 84       	ldd	r7, Y+13	; 0x0d
 5f8:	8c 84       	ldd	r8, Y+12	; 0x0c
 5fa:	9b 84       	ldd	r9, Y+11	; 0x0b
 5fc:	aa 84       	ldd	r10, Y+10	; 0x0a
 5fe:	b9 84       	ldd	r11, Y+9	; 0x09
 600:	c8 84       	ldd	r12, Y+8	; 0x08
 602:	df 80       	ldd	r13, Y+7	; 0x07
 604:	ee 80       	ldd	r14, Y+6	; 0x06
 606:	fd 80       	ldd	r15, Y+5	; 0x05
 608:	0c 81       	ldd	r16, Y+4	; 0x04
 60a:	1b 81       	ldd	r17, Y+3	; 0x03
 60c:	aa 81       	ldd	r26, Y+2	; 0x02
 60e:	b9 81       	ldd	r27, Y+1	; 0x01
 610:	ce 0f       	add	r28, r30
 612:	d1 1d       	adc	r29, r1
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	f8 94       	cli
 618:	de bf       	out	0x3e, r29	; 62
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	cd bf       	out	0x3d, r28	; 61
 61e:	ed 01       	movw	r28, r26
 620:	08 95       	ret

00000622 <_exit>:
 622:	f8 94       	cli

00000624 <__stop_program>:
 624:	ff cf       	rjmp	.-2      	; 0x624 <__stop_program>
