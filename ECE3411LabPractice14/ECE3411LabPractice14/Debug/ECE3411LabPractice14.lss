
ECE3411LabPractice14.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000009fa  00000a8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  00800136  00800136  00000ac4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126b  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c28  00000000  00000000  00001e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b8  00000000  00000000  00002a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061c  00000000  00000000  00003450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bc  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_21>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ef       	ldi	r30, 0xFA	; 250
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 33       	cpi	r26, 0x36	; 54
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e3       	ldi	r26, 0x36	; 54
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a9 39       	cpi	r26, 0x99	; 153
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <main>
  ea:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <InitTimer0>:
{
	/* Wait for reception complete */
	while(!(SPSR0 & (1<<SPIF)));
	/* Return Data Register */
	return SPDR0;
}
  f2:	84 b5       	in	r24, 0x24	; 36
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	84 bd       	out	0x24, r24	; 36
  f8:	89 ef       	ldi	r24, 0xF9	; 249
  fa:	87 bd       	out	0x27, r24	; 39
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	85 bd       	out	0x25, r24	; 37
 106:	08 95       	ret

00000108 <setupADC>:
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8e 68       	ori	r24, 0x8E	; 142
 110:	80 83       	st	Z, r24
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 118:	08 95       	ret

0000011a <startConversion>:
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <UART_Init>:
 126:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 12a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 12e:	88 e1       	ldi	r24, 0x18	; 24
 130:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 13a:	08 95       	ret

0000013c <SPI_MasterInit>:
 13c:	8d e2       	ldi	r24, 0x2D	; 45
 13e:	84 b9       	out	0x04, r24	; 4
 140:	83 e5       	ldi	r24, 0x53	; 83
 142:	8c bd       	out	0x2c, r24	; 44
 144:	08 95       	ret

00000146 <writeDouble>:
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	6b 01       	movw	r12, r22
 154:	7c 01       	movw	r14, r24
 156:	0e 94 37 03 	call	0x66e	; 0x66e <__fixsfsi>
 15a:	ca e0       	ldi	r28, 0x0A	; 10
 15c:	d0 e0       	ldi	r29, 0x00	; 0
 15e:	cb 01       	movw	r24, r22
 160:	be 01       	movw	r22, r28
 162:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divmodhi4>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	71 e0       	ldi	r23, 0x01	; 1
 16a:	80 5d       	subi	r24, 0xD0	; 208
 16c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	71 e0       	ldi	r23, 0x01	; 1
 174:	8e e2       	ldi	r24, 0x2E	; 46
 176:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	40 e2       	ldi	r20, 0x20	; 32
 180:	51 e4       	ldi	r21, 0x41	; 65
 182:	c7 01       	movw	r24, r14
 184:	b6 01       	movw	r22, r12
 186:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulsf3>
 18a:	0e 94 37 03 	call	0x66e	; 0x66e <__fixsfsi>
 18e:	cb 01       	movw	r24, r22
 190:	be 01       	movw	r22, r28
 192:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divmodhi4>
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	71 e0       	ldi	r23, 0x01	; 1
 19a:	80 5d       	subi	r24, 0xD0	; 208
 19c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	48 ec       	ldi	r20, 0xC8	; 200
 1a6:	52 e4       	ldi	r21, 0x42	; 66
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulsf3>
 1b0:	0e 94 37 03 	call	0x66e	; 0x66e <__fixsfsi>
 1b4:	cb 01       	movw	r24, r22
 1b6:	be 01       	movw	r22, r28
 1b8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divmodhi4>
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	71 e0       	ldi	r23, 0x01	; 1
 1c0:	80 5d       	subi	r24, 0xD0	; 208
 1c2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	71 e0       	ldi	r23, 0x01	; 1
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	08 95       	ret

000001de <writeMSG>:
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	08 c0       	rjmp	.+16     	; 0x1f8 <writeMSG+0x1a>
 1e8:	ac 0f       	add	r26, r28
 1ea:	bd 1f       	adc	r27, r29
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	71 e0       	ldi	r23, 0x01	; 1
 1f0:	8c 91       	ld	r24, X
 1f2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
 1f6:	21 96       	adiw	r28, 0x01	; 1
 1f8:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <pot_preamble>
 1fc:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <pot_preamble+0x1>
 200:	fd 01       	movw	r30, r26
 202:	01 90       	ld	r0, Z+
 204:	00 20       	and	r0, r0
 206:	e9 f7       	brne	.-6      	; 0x202 <writeMSG+0x24>
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	ea 1b       	sub	r30, r26
 20c:	fb 0b       	sbc	r31, r27
 20e:	ce 17       	cp	r28, r30
 210:	df 07       	cpc	r29, r31
 212:	50 f3       	brcs	.-44     	; 0x1e8 <writeMSG+0xa>
 214:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <potVolt>
 218:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <potVolt+0x1>
 21c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <potVolt+0x2>
 220:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <potVolt+0x3>
 224:	0e 94 a3 00 	call	0x146	; 0x146 <writeDouble>
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	08 c0       	rjmp	.+16     	; 0x23e <writeMSG+0x60>
 22e:	ac 0f       	add	r26, r28
 230:	bd 1f       	adc	r27, r29
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	8c 91       	ld	r24, X
 238:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
 23c:	21 96       	adiw	r28, 0x01	; 1
 23e:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <dac_preamble>
 242:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <dac_preamble+0x1>
 246:	fd 01       	movw	r30, r26
 248:	01 90       	ld	r0, Z+
 24a:	00 20       	and	r0, r0
 24c:	e9 f7       	brne	.-6      	; 0x248 <writeMSG+0x6a>
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	ea 1b       	sub	r30, r26
 252:	fb 0b       	sbc	r31, r27
 254:	ce 17       	cp	r28, r30
 256:	df 07       	cpc	r29, r31
 258:	50 f3       	brcs	.-44     	; 0x22e <writeMSG+0x50>
 25a:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <dacVolt>
 25e:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <dacVolt+0x1>
 262:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <dacVolt+0x2>
 266:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <dacVolt+0x3>
 26a:	0e 94 a3 00 	call	0x146	; 0x146 <writeDouble>
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	71 e0       	ldi	r23, 0x01	; 1
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <SPI_Master_Transmit_12>:
 27e:	2a 98       	cbi	0x05, 2	; 5
 280:	28 9a       	sbi	0x05, 0	; 5
 282:	90 67       	ori	r25, 0x70	; 112
 284:	9e bd       	out	0x2e, r25	; 46
 286:	0d b4       	in	r0, 0x2d	; 45
 288:	07 fe       	sbrs	r0, 7
 28a:	fd cf       	rjmp	.-6      	; 0x286 <SPI_Master_Transmit_12+0x8>
 28c:	8e bd       	out	0x2e, r24	; 46
 28e:	0d b4       	in	r0, 0x2d	; 45
 290:	07 fe       	sbrs	r0, 7
 292:	fd cf       	rjmp	.-6      	; 0x28e <SPI_Master_Transmit_12+0x10>
 294:	2a 9a       	sbi	0x05, 2	; 5
 296:	28 98       	cbi	0x05, 0	; 5
 298:	85 e0       	ldi	r24, 0x05	; 5
 29a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 29e:	0e 94 8d 00 	call	0x11a	; 0x11a <startConversion>
 2a2:	8e b5       	in	r24, 0x2e	; 46
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	08 95       	ret

000002a8 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
	counter++;
 2b6:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <counter>
 2ba:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <counter+0x1>
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <counter+0x1>
 2c4:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <counter>
}
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_21>:

ISR(ADC_vect)
{
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	3f 93       	push	r19
 2e4:	4f 93       	push	r20
 2e6:	5f 93       	push	r21
 2e8:	6f 93       	push	r22
 2ea:	7f 93       	push	r23
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	af 93       	push	r26
 2f2:	bf 93       	push	r27
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
	
	switch (ADMUX)
 2fc:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 300:	84 30       	cpi	r24, 0x04	; 4
 302:	19 f0       	breq	.+6      	; 0x30a <__vector_21+0x34>
 304:	85 30       	cpi	r24, 0x05	; 5
 306:	19 f1       	breq	.+70     	; 0x34e <__vector_21+0x78>
 308:	3f c0       	rjmp	.+126    	; 0x388 <__vector_21+0xb2>
	{
		case 4:
			potVolt = ADC*(5.0/1024);
 30a:	c8 e7       	ldi	r28, 0x78	; 120
 30c:	d0 e0       	ldi	r29, 0x00	; 0
 30e:	68 81       	ld	r22, Y
 310:	79 81       	ldd	r23, Y+1	; 0x01
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatunsisf>
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 ea       	ldi	r20, 0xA0	; 160
 320:	5b e3       	ldi	r21, 0x3B	; 59
 322:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulsf3>
 326:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <potVolt>
 32a:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <potVolt+0x1>
 32e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <potVolt+0x2>
 332:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <potVolt+0x3>
			ADMUX = 5;
 336:	85 e0       	ldi	r24, 0x05	; 5
 338:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			int temp = ADC;
 33c:	88 81       	ld	r24, Y
 33e:	99 81       	ldd	r25, Y+1	; 0x01
			SPI_Master_Transmit_12(temp << 2); // 10 bit potVolt normalized to 12 bit
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	0e 94 3f 01 	call	0x27e	; 0x27e <SPI_Master_Transmit_12>
			break;
 34c:	1d c0       	rjmp	.+58     	; 0x388 <__vector_21+0xb2>
		case 5:
			dacVolt = ADC*(5.0/1024);
 34e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 352:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatunsisf>
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	40 ea       	ldi	r20, 0xA0	; 160
 364:	5b e3       	ldi	r21, 0x3B	; 59
 366:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulsf3>
 36a:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <dacVolt>
 36e:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <dacVolt+0x1>
 372:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <dacVolt+0x2>
 376:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <dacVolt+0x3>
			uartPrintFlag = 1;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			PORTB |= (1<<SPI_LDAC); //reassert LDAC
 380:	28 9a       	sbi	0x05, 0	; 5
			ADMUX = 4;
 382:	84 e0       	ldi	r24, 0x04	; 4
 384:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			break;
		default:
			break;
	}
}
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <main>:
int main(void)
{
	InitTimer0();
 3ae:	0e 94 79 00 	call	0xf2	; 0xf2 <InitTimer0>
	UART_Init(MYUBRR);
 3b2:	87 e6       	ldi	r24, 0x67	; 103
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 93 00 	call	0x126	; 0x126 <UART_Init>
	setupADC();
 3ba:	0e 94 84 00 	call	0x108	; 0x108 <setupADC>
	SPI_MasterInit();
 3be:	0e 94 9e 00 	call	0x13c	; 0x13c <SPI_MasterInit>
	sei();
 3c2:	78 94       	sei
    while (1) 
    {
		if(counter >= 99)
		{
			counter = 0;
			ADMUX = 4;
 3c4:	0c e7       	ldi	r16, 0x7C	; 124
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	c4 e0       	ldi	r28, 0x04	; 4
	SPI_MasterInit();
	sei();
    /* Replace with your application code */
    while (1) 
    {
		if(counter >= 99)
 3ca:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <counter>
 3ce:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <counter+0x1>
 3d2:	83 36       	cpi	r24, 0x63	; 99
 3d4:	91 05       	cpc	r25, r1
 3d6:	40 f0       	brcs	.+16     	; 0x3e8 <main+0x3a>
		{
			counter = 0;
 3d8:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <counter+0x1>
 3dc:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <counter>
			ADMUX = 4;
 3e0:	f8 01       	movw	r30, r16
 3e2:	c0 83       	st	Z, r28
			startConversion();
 3e4:	0e 94 8d 00 	call	0x11a	; 0x11a <startConversion>
		}
		if(uartPrintFlag)
 3e8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 3ec:	88 23       	and	r24, r24
 3ee:	69 f3       	breq	.-38     	; 0x3ca <main+0x1c>
		{
			writeMSG();
 3f0:	0e 94 ef 00 	call	0x1de	; 0x1de <writeMSG>
			uartPrintFlag = 0;
 3f4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
 3f8:	e8 cf       	rjmp	.-48     	; 0x3ca <main+0x1c>

000003fa <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 3fa:	cf 93       	push	r28
 3fc:	c8 2f       	mov	r28, r24

  if (c == '\a')
 3fe:	87 30       	cpi	r24, 0x07	; 7
 400:	69 f4       	brne	.+26     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
    {
      fputs("*ring*\n", stderr);
 402:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <__iob+0x4>
 406:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <__iob+0x5>
 40a:	47 e0       	ldi	r20, 0x07	; 7
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	8e e2       	ldi	r24, 0x2E	; 46
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 90 04 	call	0x920	; 0x920 <fwrite>
      return 0;
 41a:	0c c0       	rjmp	.+24     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
    }

  if (c == '\n')
 41c:	8a 30       	cpi	r24, 0x0A	; 10
 41e:	19 f4       	brne	.+6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
    uart_putchar('\r', stream);
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 426:	e0 ec       	ldi	r30, 0xC0	; 192
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	85 ff       	sbrs	r24, 5
 42e:	fd cf       	rjmp	.-6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
  UDR0 = c;
 430:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

  return 0;
}
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 43c:	6f 92       	push	r6
 43e:	7f 92       	push	r7
 440:	8f 92       	push	r8
 442:	9f 92       	push	r9
 444:	af 92       	push	r10
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 458:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <rxp.1828>
 45c:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <rxp.1828+0x1>
 460:	23 2b       	or	r18, r19
 462:	09 f0       	breq	.+2      	; 0x466 <uart_getchar+0x2a>
 464:	da c0       	rjmp	.+436    	; 0x61a <uart_getchar+0x1de>
 466:	8c 01       	movw	r16, r24
 468:	0f 2e       	mov	r0, r31
 46a:	f1 e4       	ldi	r31, 0x41	; 65
 46c:	8f 2e       	mov	r8, r31
 46e:	f1 e0       	ldi	r31, 0x01	; 1
 470:	9f 2e       	mov	r9, r31
 472:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 474:	c0 ec       	ldi	r28, 0xC0	; 192
 476:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 478:	0f 2e       	mov	r0, r31
 47a:	f6 ec       	ldi	r31, 0xC6	; 198
 47c:	cf 2e       	mov	r12, r31
 47e:	d1 2c       	mov	r13, r1
 480:	f0 2d       	mov	r31, r0
 482:	54 01       	movw	r10, r8
 484:	0f 2e       	mov	r0, r31
 486:	f0 e4       	ldi	r31, 0x40	; 64
 488:	6f 2e       	mov	r6, r31
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	7f 2e       	mov	r7, r31
 48e:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 490:	88 81       	ld	r24, Y
 492:	88 23       	and	r24, r24
 494:	ec f7       	brge	.-6      	; 0x490 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 496:	88 81       	ld	r24, Y
 498:	84 fd       	sbrc	r24, 4
 49a:	d2 c0       	rjmp	.+420    	; 0x640 <uart_getchar+0x204>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 49c:	88 81       	ld	r24, Y
 49e:	83 fd       	sbrc	r24, 3
 4a0:	d2 c0       	rjmp	.+420    	; 0x646 <uart_getchar+0x20a>
	  return _FDEV_ERR;
	c = UDR0;
 4a2:	f6 01       	movw	r30, r12
 4a4:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 4a6:	8d 30       	cpi	r24, 0x0D	; 13
 4a8:	11 f0       	breq	.+4      	; 0x4ae <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 4aa:	8a 30       	cpi	r24, 0x0A	; 10
 4ac:	69 f4       	brne	.+26     	; 0x4c8 <uart_getchar+0x8c>
	  {
	    *cp = c;
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
 4b0:	f4 01       	movw	r30, r8
 4b2:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 4b4:	b8 01       	movw	r22, r16
 4b6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
	    rxp = b;
 4ba:	81 e4       	ldi	r24, 0x41	; 65
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <rxp.1828+0x1>
 4c2:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <rxp.1828>
	    break;
 4c6:	a9 c0       	rjmp	.+338    	; 0x61a <uart_getchar+0x1de>
	  }
	else if (c == '\t')
 4c8:	89 30       	cpi	r24, 0x09	; 9
 4ca:	39 f0       	breq	.+14     	; 0x4da <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 4cc:	90 ee       	ldi	r25, 0xE0	; 224
 4ce:	98 0f       	add	r25, r24
 4d0:	9f 35       	cpi	r25, 0x5F	; 95
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <uart_getchar+0xa0>
 4d4:	80 3a       	cpi	r24, 0xA0	; 160
 4d6:	b8 f0       	brcs	.+46     	; 0x506 <uart_getchar+0xca>
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 4da:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 4dc:	f0 e9       	ldi	r31, 0x90	; 144
 4de:	8f 16       	cp	r8, r31
 4e0:	f1 e0       	ldi	r31, 0x01	; 1
 4e2:	9f 06       	cpc	r9, r31
 4e4:	29 f4       	brne	.+10     	; 0x4f0 <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 4e6:	b8 01       	movw	r22, r16
 4e8:	87 e0       	ldi	r24, 0x07	; 7
 4ea:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
 4ee:	d0 cf       	rjmp	.-96     	; 0x490 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 4f0:	74 01       	movw	r14, r8
 4f2:	9f ef       	ldi	r25, 0xFF	; 255
 4f4:	e9 1a       	sub	r14, r25
 4f6:	f9 0a       	sbc	r15, r25
 4f8:	f4 01       	movw	r30, r8
 4fa:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 4fc:	b8 01       	movw	r22, r16
 4fe:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 502:	47 01       	movw	r8, r14
 504:	c5 cf       	rjmp	.-118    	; 0x490 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 506:	82 31       	cpi	r24, 0x12	; 18
 508:	d1 f1       	breq	.+116    	; 0x57e <uart_getchar+0x142>
 50a:	30 f4       	brcc	.+12     	; 0x518 <uart_getchar+0xdc>
 50c:	83 30       	cpi	r24, 0x03	; 3
 50e:	09 f4       	brne	.+2      	; 0x512 <uart_getchar+0xd6>
 510:	9d c0       	rjmp	.+314    	; 0x64c <uart_getchar+0x210>
 512:	88 30       	cpi	r24, 0x08	; 8
 514:	e9 f0       	breq	.+58     	; 0x550 <uart_getchar+0x114>
 516:	bc cf       	rjmp	.-136    	; 0x490 <uart_getchar+0x54>
 518:	87 31       	cpi	r24, 0x17	; 23
 51a:	29 f0       	breq	.+10     	; 0x526 <uart_getchar+0xea>
 51c:	8f 37       	cpi	r24, 0x7F	; 127
 51e:	c1 f0       	breq	.+48     	; 0x550 <uart_getchar+0x114>
 520:	85 31       	cpi	r24, 0x15	; 21
 522:	79 f0       	breq	.+30     	; 0x542 <uart_getchar+0x106>
 524:	b5 cf       	rjmp	.-150    	; 0x490 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 526:	f1 e4       	ldi	r31, 0x41	; 65
 528:	8f 16       	cp	r8, r31
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	9f 06       	cpc	r9, r31
 52e:	09 f0       	breq	.+2      	; 0x532 <uart_getchar+0xf6>
 530:	08 f4       	brcc	.+2      	; 0x534 <uart_getchar+0xf8>
 532:	ae cf       	rjmp	.-164    	; 0x490 <uart_getchar+0x54>
 534:	f4 01       	movw	r30, r8
 536:	31 97       	sbiw	r30, 0x01	; 1
 538:	80 81       	ld	r24, Z
 53a:	80 32       	cpi	r24, 0x20	; 32
 53c:	09 f0       	breq	.+2      	; 0x540 <uart_getchar+0x104>
 53e:	52 c0       	rjmp	.+164    	; 0x5e4 <uart_getchar+0x1a8>
 540:	a7 cf       	rjmp	.-178    	; 0x490 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 542:	81 e4       	ldi	r24, 0x41	; 65
 544:	88 16       	cp	r8, r24
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	98 06       	cpc	r9, r24
 54a:	09 f0       	breq	.+2      	; 0x54e <uart_getchar+0x112>
 54c:	98 f5       	brcc	.+102    	; 0x5b4 <uart_getchar+0x178>
 54e:	a0 cf       	rjmp	.-192    	; 0x490 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 550:	91 e4       	ldi	r25, 0x41	; 65
 552:	89 16       	cp	r8, r25
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	99 06       	cpc	r9, r25
 558:	09 f0       	breq	.+2      	; 0x55c <uart_getchar+0x120>
 55a:	08 f4       	brcc	.+2      	; 0x55e <uart_getchar+0x122>
 55c:	99 cf       	rjmp	.-206    	; 0x490 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 55e:	b8 01       	movw	r22, r16
 560:	88 e0       	ldi	r24, 0x08	; 8
 562:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
		uart_putchar(' ', stream);
 566:	b8 01       	movw	r22, r16
 568:	80 e2       	ldi	r24, 0x20	; 32
 56a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
		uart_putchar('\b', stream);
 56e:	b8 01       	movw	r22, r16
 570:	88 e0       	ldi	r24, 0x08	; 8
 572:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
		cp--;
 576:	e1 e0       	ldi	r30, 0x01	; 1
 578:	8e 1a       	sub	r8, r30
 57a:	91 08       	sbc	r9, r1
 57c:	89 cf       	rjmp	.-238    	; 0x490 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 57e:	b8 01       	movw	r22, r16
 580:	8d e0       	ldi	r24, 0x0D	; 13
 582:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 586:	f1 e4       	ldi	r31, 0x41	; 65
 588:	8f 16       	cp	r8, r31
 58a:	f1 e0       	ldi	r31, 0x01	; 1
 58c:	9f 06       	cpc	r9, r31
 58e:	09 f0       	breq	.+2      	; 0x592 <uart_getchar+0x156>
 590:	08 f4       	brcc	.+2      	; 0x594 <uart_getchar+0x158>
 592:	7e cf       	rjmp	.-260    	; 0x490 <uart_getchar+0x54>
 594:	0f 2e       	mov	r0, r31
 596:	f1 e4       	ldi	r31, 0x41	; 65
 598:	ef 2e       	mov	r14, r31
 59a:	f1 e0       	ldi	r31, 0x01	; 1
 59c:	ff 2e       	mov	r15, r31
 59e:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 5a0:	b8 01       	movw	r22, r16
 5a2:	f7 01       	movw	r30, r14
 5a4:	81 91       	ld	r24, Z+
 5a6:	7f 01       	movw	r14, r30
 5a8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 5ac:	8e 14       	cp	r8, r14
 5ae:	9f 04       	cpc	r9, r15
 5b0:	b9 f7       	brne	.-18     	; 0x5a0 <uart_getchar+0x164>
 5b2:	6e cf       	rjmp	.-292    	; 0x490 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 5b4:	b8 01       	movw	r22, r16
 5b6:	88 e0       	ldi	r24, 0x08	; 8
 5b8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
		uart_putchar(' ', stream);
 5bc:	b8 01       	movw	r22, r16
 5be:	80 e2       	ldi	r24, 0x20	; 32
 5c0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
		uart_putchar('\b', stream);
 5c4:	b8 01       	movw	r22, r16
 5c6:	88 e0       	ldi	r24, 0x08	; 8
 5c8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
		cp--;
 5cc:	f1 e0       	ldi	r31, 0x01	; 1
 5ce:	8f 1a       	sub	r8, r31
 5d0:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 5d2:	81 e4       	ldi	r24, 0x41	; 65
 5d4:	88 16       	cp	r8, r24
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	98 06       	cpc	r9, r24
 5da:	61 f7       	brne	.-40     	; 0x5b4 <uart_getchar+0x178>
 5dc:	f3 01       	movw	r30, r6
 5de:	31 96       	adiw	r30, 0x01	; 1
 5e0:	4f 01       	movw	r8, r30
 5e2:	56 cf       	rjmp	.-340    	; 0x490 <uart_getchar+0x54>
 5e4:	74 01       	movw	r14, r8
 5e6:	f1 e0       	ldi	r31, 0x01	; 1
 5e8:	ef 1a       	sub	r14, r31
 5ea:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 5ec:	b8 01       	movw	r22, r16
 5ee:	88 e0       	ldi	r24, 0x08	; 8
 5f0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
		uart_putchar(' ', stream);
 5f4:	b8 01       	movw	r22, r16
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
		uart_putchar('\b', stream);
 5fc:	b8 01       	movw	r22, r16
 5fe:	88 e0       	ldi	r24, 0x08	; 8
 600:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_putchar>
		cp--;
 604:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 606:	ea 14       	cp	r14, r10
 608:	fb 04       	cpc	r15, r11
 60a:	09 f4       	brne	.+2      	; 0x60e <uart_getchar+0x1d2>
 60c:	41 cf       	rjmp	.-382    	; 0x490 <uart_getchar+0x54>
 60e:	f7 01       	movw	r30, r14
 610:	82 91       	ld	r24, -Z
 612:	7f 01       	movw	r14, r30
 614:	80 32       	cpi	r24, 0x20	; 32
 616:	51 f7       	brne	.-44     	; 0x5ec <uart_getchar+0x1b0>
 618:	3b cf       	rjmp	.-394    	; 0x490 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 61a:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <rxp.1828>
 61e:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <rxp.1828+0x1>
 622:	cf 01       	movw	r24, r30
 624:	01 96       	adiw	r24, 0x01	; 1
 626:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <rxp.1828+0x1>
 62a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <rxp.1828>
 62e:	80 81       	ld	r24, Z
  if (c == '\n')
 630:	8a 30       	cpi	r24, 0x0A	; 10
 632:	21 f4       	brne	.+8      	; 0x63c <uart_getchar+0x200>
    rxp = 0;
 634:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <rxp.1828+0x1>
 638:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <rxp.1828>

  return c;
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	08 c0       	rjmp	.+16     	; 0x650 <uart_getchar+0x214>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 640:	8e ef       	ldi	r24, 0xFE	; 254
 642:	9f ef       	ldi	r25, 0xFF	; 255
 644:	05 c0       	rjmp	.+10     	; 0x650 <uart_getchar+0x214>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	9f ef       	ldi	r25, 0xFF	; 255
 64a:	02 c0       	rjmp	.+4      	; 0x650 <uart_getchar+0x214>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	1f 91       	pop	r17
 656:	0f 91       	pop	r16
 658:	ff 90       	pop	r15
 65a:	ef 90       	pop	r14
 65c:	df 90       	pop	r13
 65e:	cf 90       	pop	r12
 660:	bf 90       	pop	r11
 662:	af 90       	pop	r10
 664:	9f 90       	pop	r9
 666:	8f 90       	pop	r8
 668:	7f 90       	pop	r7
 66a:	6f 90       	pop	r6
 66c:	08 95       	ret

0000066e <__fixsfsi>:
 66e:	0e 94 3e 03 	call	0x67c	; 0x67c <__fixunssfsi>
 672:	68 94       	set
 674:	b1 11       	cpse	r27, r1
 676:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_szero>
 67a:	08 95       	ret

0000067c <__fixunssfsi>:
 67c:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_splitA>
 680:	88 f0       	brcs	.+34     	; 0x6a4 <__fixunssfsi+0x28>
 682:	9f 57       	subi	r25, 0x7F	; 127
 684:	98 f0       	brcs	.+38     	; 0x6ac <__fixunssfsi+0x30>
 686:	b9 2f       	mov	r27, r25
 688:	99 27       	eor	r25, r25
 68a:	b7 51       	subi	r27, 0x17	; 23
 68c:	b0 f0       	brcs	.+44     	; 0x6ba <__fixunssfsi+0x3e>
 68e:	e1 f0       	breq	.+56     	; 0x6c8 <__fixunssfsi+0x4c>
 690:	66 0f       	add	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	88 1f       	adc	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	1a f0       	brmi	.+6      	; 0x6a0 <__fixunssfsi+0x24>
 69a:	ba 95       	dec	r27
 69c:	c9 f7       	brne	.-14     	; 0x690 <__fixunssfsi+0x14>
 69e:	14 c0       	rjmp	.+40     	; 0x6c8 <__fixunssfsi+0x4c>
 6a0:	b1 30       	cpi	r27, 0x01	; 1
 6a2:	91 f0       	breq	.+36     	; 0x6c8 <__fixunssfsi+0x4c>
 6a4:	0e 94 cc 03 	call	0x798	; 0x798 <__fp_zero>
 6a8:	b1 e0       	ldi	r27, 0x01	; 1
 6aa:	08 95       	ret
 6ac:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_zero>
 6b0:	67 2f       	mov	r22, r23
 6b2:	78 2f       	mov	r23, r24
 6b4:	88 27       	eor	r24, r24
 6b6:	b8 5f       	subi	r27, 0xF8	; 248
 6b8:	39 f0       	breq	.+14     	; 0x6c8 <__fixunssfsi+0x4c>
 6ba:	b9 3f       	cpi	r27, 0xF9	; 249
 6bc:	cc f3       	brlt	.-14     	; 0x6b0 <__fixunssfsi+0x34>
 6be:	86 95       	lsr	r24
 6c0:	77 95       	ror	r23
 6c2:	67 95       	ror	r22
 6c4:	b3 95       	inc	r27
 6c6:	d9 f7       	brne	.-10     	; 0x6be <__fixunssfsi+0x42>
 6c8:	3e f4       	brtc	.+14     	; 0x6d8 <__fixunssfsi+0x5c>
 6ca:	90 95       	com	r25
 6cc:	80 95       	com	r24
 6ce:	70 95       	com	r23
 6d0:	61 95       	neg	r22
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	8f 4f       	sbci	r24, 0xFF	; 255
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	08 95       	ret

000006da <__floatunsisf>:
 6da:	e8 94       	clt
 6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <__floatsisf+0x12>

000006de <__floatsisf>:
 6de:	97 fb       	bst	r25, 7
 6e0:	3e f4       	brtc	.+14     	; 0x6f0 <__floatsisf+0x12>
 6e2:	90 95       	com	r25
 6e4:	80 95       	com	r24
 6e6:	70 95       	com	r23
 6e8:	61 95       	neg	r22
 6ea:	7f 4f       	sbci	r23, 0xFF	; 255
 6ec:	8f 4f       	sbci	r24, 0xFF	; 255
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	99 23       	and	r25, r25
 6f2:	a9 f0       	breq	.+42     	; 0x71e <__floatsisf+0x40>
 6f4:	f9 2f       	mov	r31, r25
 6f6:	96 e9       	ldi	r25, 0x96	; 150
 6f8:	bb 27       	eor	r27, r27
 6fa:	93 95       	inc	r25
 6fc:	f6 95       	lsr	r31
 6fe:	87 95       	ror	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f1 11       	cpse	r31, r1
 708:	f8 cf       	rjmp	.-16     	; 0x6fa <__floatsisf+0x1c>
 70a:	fa f4       	brpl	.+62     	; 0x74a <__floatsisf+0x6c>
 70c:	bb 0f       	add	r27, r27
 70e:	11 f4       	brne	.+4      	; 0x714 <__floatsisf+0x36>
 710:	60 ff       	sbrs	r22, 0
 712:	1b c0       	rjmp	.+54     	; 0x74a <__floatsisf+0x6c>
 714:	6f 5f       	subi	r22, 0xFF	; 255
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	16 c0       	rjmp	.+44     	; 0x74a <__floatsisf+0x6c>
 71e:	88 23       	and	r24, r24
 720:	11 f0       	breq	.+4      	; 0x726 <__floatsisf+0x48>
 722:	96 e9       	ldi	r25, 0x96	; 150
 724:	11 c0       	rjmp	.+34     	; 0x748 <__floatsisf+0x6a>
 726:	77 23       	and	r23, r23
 728:	21 f0       	breq	.+8      	; 0x732 <__floatsisf+0x54>
 72a:	9e e8       	ldi	r25, 0x8E	; 142
 72c:	87 2f       	mov	r24, r23
 72e:	76 2f       	mov	r23, r22
 730:	05 c0       	rjmp	.+10     	; 0x73c <__floatsisf+0x5e>
 732:	66 23       	and	r22, r22
 734:	71 f0       	breq	.+28     	; 0x752 <__floatsisf+0x74>
 736:	96 e8       	ldi	r25, 0x86	; 134
 738:	86 2f       	mov	r24, r22
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	2a f0       	brmi	.+10     	; 0x74a <__floatsisf+0x6c>
 740:	9a 95       	dec	r25
 742:	66 0f       	add	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	da f7       	brpl	.-10     	; 0x740 <__floatsisf+0x62>
 74a:	88 0f       	add	r24, r24
 74c:	96 95       	lsr	r25
 74e:	87 95       	ror	r24
 750:	97 f9       	bld	r25, 7
 752:	08 95       	ret

00000754 <__fp_split3>:
 754:	57 fd       	sbrc	r21, 7
 756:	90 58       	subi	r25, 0x80	; 128
 758:	44 0f       	add	r20, r20
 75a:	55 1f       	adc	r21, r21
 75c:	59 f0       	breq	.+22     	; 0x774 <__fp_splitA+0x10>
 75e:	5f 3f       	cpi	r21, 0xFF	; 255
 760:	71 f0       	breq	.+28     	; 0x77e <__fp_splitA+0x1a>
 762:	47 95       	ror	r20

00000764 <__fp_splitA>:
 764:	88 0f       	add	r24, r24
 766:	97 fb       	bst	r25, 7
 768:	99 1f       	adc	r25, r25
 76a:	61 f0       	breq	.+24     	; 0x784 <__fp_splitA+0x20>
 76c:	9f 3f       	cpi	r25, 0xFF	; 255
 76e:	79 f0       	breq	.+30     	; 0x78e <__fp_splitA+0x2a>
 770:	87 95       	ror	r24
 772:	08 95       	ret
 774:	12 16       	cp	r1, r18
 776:	13 06       	cpc	r1, r19
 778:	14 06       	cpc	r1, r20
 77a:	55 1f       	adc	r21, r21
 77c:	f2 cf       	rjmp	.-28     	; 0x762 <__fp_split3+0xe>
 77e:	46 95       	lsr	r20
 780:	f1 df       	rcall	.-30     	; 0x764 <__fp_splitA>
 782:	08 c0       	rjmp	.+16     	; 0x794 <__fp_splitA+0x30>
 784:	16 16       	cp	r1, r22
 786:	17 06       	cpc	r1, r23
 788:	18 06       	cpc	r1, r24
 78a:	99 1f       	adc	r25, r25
 78c:	f1 cf       	rjmp	.-30     	; 0x770 <__fp_splitA+0xc>
 78e:	86 95       	lsr	r24
 790:	71 05       	cpc	r23, r1
 792:	61 05       	cpc	r22, r1
 794:	08 94       	sec
 796:	08 95       	ret

00000798 <__fp_zero>:
 798:	e8 94       	clt

0000079a <__fp_szero>:
 79a:	bb 27       	eor	r27, r27
 79c:	66 27       	eor	r22, r22
 79e:	77 27       	eor	r23, r23
 7a0:	cb 01       	movw	r24, r22
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret

000007a6 <__mulsf3>:
 7a6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsf3x>
 7aa:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_round>
 7ae:	0e 94 49 04 	call	0x892	; 0x892 <__fp_pscA>
 7b2:	38 f0       	brcs	.+14     	; 0x7c2 <__mulsf3+0x1c>
 7b4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_pscB>
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__mulsf3+0x1c>
 7ba:	95 23       	and	r25, r21
 7bc:	11 f0       	breq	.+4      	; 0x7c2 <__mulsf3+0x1c>
 7be:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
 7c2:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_nan>
 7c6:	11 24       	eor	r1, r1
 7c8:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_szero>

000007cc <__mulsf3x>:
 7cc:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_split3>
 7d0:	70 f3       	brcs	.-36     	; 0x7ae <__mulsf3+0x8>

000007d2 <__mulsf3_pse>:
 7d2:	95 9f       	mul	r25, r21
 7d4:	c1 f3       	breq	.-16     	; 0x7c6 <__mulsf3+0x20>
 7d6:	95 0f       	add	r25, r21
 7d8:	50 e0       	ldi	r21, 0x00	; 0
 7da:	55 1f       	adc	r21, r21
 7dc:	62 9f       	mul	r22, r18
 7de:	f0 01       	movw	r30, r0
 7e0:	72 9f       	mul	r23, r18
 7e2:	bb 27       	eor	r27, r27
 7e4:	f0 0d       	add	r31, r0
 7e6:	b1 1d       	adc	r27, r1
 7e8:	63 9f       	mul	r22, r19
 7ea:	aa 27       	eor	r26, r26
 7ec:	f0 0d       	add	r31, r0
 7ee:	b1 1d       	adc	r27, r1
 7f0:	aa 1f       	adc	r26, r26
 7f2:	64 9f       	mul	r22, r20
 7f4:	66 27       	eor	r22, r22
 7f6:	b0 0d       	add	r27, r0
 7f8:	a1 1d       	adc	r26, r1
 7fa:	66 1f       	adc	r22, r22
 7fc:	82 9f       	mul	r24, r18
 7fe:	22 27       	eor	r18, r18
 800:	b0 0d       	add	r27, r0
 802:	a1 1d       	adc	r26, r1
 804:	62 1f       	adc	r22, r18
 806:	73 9f       	mul	r23, r19
 808:	b0 0d       	add	r27, r0
 80a:	a1 1d       	adc	r26, r1
 80c:	62 1f       	adc	r22, r18
 80e:	83 9f       	mul	r24, r19
 810:	a0 0d       	add	r26, r0
 812:	61 1d       	adc	r22, r1
 814:	22 1f       	adc	r18, r18
 816:	74 9f       	mul	r23, r20
 818:	33 27       	eor	r19, r19
 81a:	a0 0d       	add	r26, r0
 81c:	61 1d       	adc	r22, r1
 81e:	23 1f       	adc	r18, r19
 820:	84 9f       	mul	r24, r20
 822:	60 0d       	add	r22, r0
 824:	21 1d       	adc	r18, r1
 826:	82 2f       	mov	r24, r18
 828:	76 2f       	mov	r23, r22
 82a:	6a 2f       	mov	r22, r26
 82c:	11 24       	eor	r1, r1
 82e:	9f 57       	subi	r25, 0x7F	; 127
 830:	50 40       	sbci	r21, 0x00	; 0
 832:	9a f0       	brmi	.+38     	; 0x85a <__mulsf3_pse+0x88>
 834:	f1 f0       	breq	.+60     	; 0x872 <__mulsf3_pse+0xa0>
 836:	88 23       	and	r24, r24
 838:	4a f0       	brmi	.+18     	; 0x84c <__mulsf3_pse+0x7a>
 83a:	ee 0f       	add	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	bb 1f       	adc	r27, r27
 840:	66 1f       	adc	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	91 50       	subi	r25, 0x01	; 1
 848:	50 40       	sbci	r21, 0x00	; 0
 84a:	a9 f7       	brne	.-22     	; 0x836 <__mulsf3_pse+0x64>
 84c:	9e 3f       	cpi	r25, 0xFE	; 254
 84e:	51 05       	cpc	r21, r1
 850:	80 f0       	brcs	.+32     	; 0x872 <__mulsf3_pse+0xa0>
 852:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
 856:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_szero>
 85a:	5f 3f       	cpi	r21, 0xFF	; 255
 85c:	e4 f3       	brlt	.-8      	; 0x856 <__mulsf3_pse+0x84>
 85e:	98 3e       	cpi	r25, 0xE8	; 232
 860:	d4 f3       	brlt	.-12     	; 0x856 <__mulsf3_pse+0x84>
 862:	86 95       	lsr	r24
 864:	77 95       	ror	r23
 866:	67 95       	ror	r22
 868:	b7 95       	ror	r27
 86a:	f7 95       	ror	r31
 86c:	e7 95       	ror	r30
 86e:	9f 5f       	subi	r25, 0xFF	; 255
 870:	c1 f7       	brne	.-16     	; 0x862 <__mulsf3_pse+0x90>
 872:	fe 2b       	or	r31, r30
 874:	88 0f       	add	r24, r24
 876:	91 1d       	adc	r25, r1
 878:	96 95       	lsr	r25
 87a:	87 95       	ror	r24
 87c:	97 f9       	bld	r25, 7
 87e:	08 95       	ret

00000880 <__fp_inf>:
 880:	97 f9       	bld	r25, 7
 882:	9f 67       	ori	r25, 0x7F	; 127
 884:	80 e8       	ldi	r24, 0x80	; 128
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	08 95       	ret

0000088c <__fp_nan>:
 88c:	9f ef       	ldi	r25, 0xFF	; 255
 88e:	80 ec       	ldi	r24, 0xC0	; 192
 890:	08 95       	ret

00000892 <__fp_pscA>:
 892:	00 24       	eor	r0, r0
 894:	0a 94       	dec	r0
 896:	16 16       	cp	r1, r22
 898:	17 06       	cpc	r1, r23
 89a:	18 06       	cpc	r1, r24
 89c:	09 06       	cpc	r0, r25
 89e:	08 95       	ret

000008a0 <__fp_pscB>:
 8a0:	00 24       	eor	r0, r0
 8a2:	0a 94       	dec	r0
 8a4:	12 16       	cp	r1, r18
 8a6:	13 06       	cpc	r1, r19
 8a8:	14 06       	cpc	r1, r20
 8aa:	05 06       	cpc	r0, r21
 8ac:	08 95       	ret

000008ae <__fp_round>:
 8ae:	09 2e       	mov	r0, r25
 8b0:	03 94       	inc	r0
 8b2:	00 0c       	add	r0, r0
 8b4:	11 f4       	brne	.+4      	; 0x8ba <__fp_round+0xc>
 8b6:	88 23       	and	r24, r24
 8b8:	52 f0       	brmi	.+20     	; 0x8ce <__fp_round+0x20>
 8ba:	bb 0f       	add	r27, r27
 8bc:	40 f4       	brcc	.+16     	; 0x8ce <__fp_round+0x20>
 8be:	bf 2b       	or	r27, r31
 8c0:	11 f4       	brne	.+4      	; 0x8c6 <__fp_round+0x18>
 8c2:	60 ff       	sbrs	r22, 0
 8c4:	04 c0       	rjmp	.+8      	; 0x8ce <__fp_round+0x20>
 8c6:	6f 5f       	subi	r22, 0xFF	; 255
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ca:	8f 4f       	sbci	r24, 0xFF	; 255
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	08 95       	ret

000008d0 <__divmodhi4>:
 8d0:	97 fb       	bst	r25, 7
 8d2:	07 2e       	mov	r0, r23
 8d4:	16 f4       	brtc	.+4      	; 0x8da <__divmodhi4+0xa>
 8d6:	00 94       	com	r0
 8d8:	07 d0       	rcall	.+14     	; 0x8e8 <__divmodhi4_neg1>
 8da:	77 fd       	sbrc	r23, 7
 8dc:	09 d0       	rcall	.+18     	; 0x8f0 <__divmodhi4_neg2>
 8de:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__udivmodhi4>
 8e2:	07 fc       	sbrc	r0, 7
 8e4:	05 d0       	rcall	.+10     	; 0x8f0 <__divmodhi4_neg2>
 8e6:	3e f4       	brtc	.+14     	; 0x8f6 <__divmodhi4_exit>

000008e8 <__divmodhi4_neg1>:
 8e8:	90 95       	com	r25
 8ea:	81 95       	neg	r24
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	08 95       	ret

000008f0 <__divmodhi4_neg2>:
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255

000008f6 <__divmodhi4_exit>:
 8f6:	08 95       	ret

000008f8 <__udivmodhi4>:
 8f8:	aa 1b       	sub	r26, r26
 8fa:	bb 1b       	sub	r27, r27
 8fc:	51 e1       	ldi	r21, 0x11	; 17
 8fe:	07 c0       	rjmp	.+14     	; 0x90e <__udivmodhi4_ep>

00000900 <__udivmodhi4_loop>:
 900:	aa 1f       	adc	r26, r26
 902:	bb 1f       	adc	r27, r27
 904:	a6 17       	cp	r26, r22
 906:	b7 07       	cpc	r27, r23
 908:	10 f0       	brcs	.+4      	; 0x90e <__udivmodhi4_ep>
 90a:	a6 1b       	sub	r26, r22
 90c:	b7 0b       	sbc	r27, r23

0000090e <__udivmodhi4_ep>:
 90e:	88 1f       	adc	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	5a 95       	dec	r21
 914:	a9 f7       	brne	.-22     	; 0x900 <__udivmodhi4_loop>
 916:	80 95       	com	r24
 918:	90 95       	com	r25
 91a:	bc 01       	movw	r22, r24
 91c:	cd 01       	movw	r24, r26
 91e:	08 95       	ret

00000920 <fwrite>:
 920:	a0 e0       	ldi	r26, 0x00	; 0
 922:	b0 e0       	ldi	r27, 0x00	; 0
 924:	e6 e9       	ldi	r30, 0x96	; 150
 926:	f4 e0       	ldi	r31, 0x04	; 4
 928:	0c 94 ca 04 	jmp	0x994	; 0x994 <__prologue_saves__+0xc>
 92c:	5b 01       	movw	r10, r22
 92e:	4a 01       	movw	r8, r20
 930:	79 01       	movw	r14, r18
 932:	d9 01       	movw	r26, r18
 934:	13 96       	adiw	r26, 0x03	; 3
 936:	2c 91       	ld	r18, X
 938:	21 ff       	sbrs	r18, 1
 93a:	1d c0       	rjmp	.+58     	; 0x976 <fwrite+0x56>
 93c:	c0 e0       	ldi	r28, 0x00	; 0
 93e:	d0 e0       	ldi	r29, 0x00	; 0
 940:	c8 15       	cp	r28, r8
 942:	d9 05       	cpc	r29, r9
 944:	d9 f0       	breq	.+54     	; 0x97c <fwrite+0x5c>
 946:	8c 01       	movw	r16, r24
 948:	6c 01       	movw	r12, r24
 94a:	ca 0c       	add	r12, r10
 94c:	db 1c       	adc	r13, r11
 94e:	c8 01       	movw	r24, r16
 950:	0c 15       	cp	r16, r12
 952:	1d 05       	cpc	r17, r13
 954:	71 f0       	breq	.+28     	; 0x972 <fwrite+0x52>
 956:	0f 5f       	subi	r16, 0xFF	; 255
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	d7 01       	movw	r26, r14
 95c:	18 96       	adiw	r26, 0x08	; 8
 95e:	ed 91       	ld	r30, X+
 960:	fc 91       	ld	r31, X
 962:	19 97       	sbiw	r26, 0x09	; 9
 964:	b7 01       	movw	r22, r14
 966:	dc 01       	movw	r26, r24
 968:	8c 91       	ld	r24, X
 96a:	09 95       	icall
 96c:	89 2b       	or	r24, r25
 96e:	79 f3       	breq	.-34     	; 0x94e <fwrite+0x2e>
 970:	05 c0       	rjmp	.+10     	; 0x97c <fwrite+0x5c>
 972:	21 96       	adiw	r28, 0x01	; 1
 974:	e5 cf       	rjmp	.-54     	; 0x940 <fwrite+0x20>
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	01 c0       	rjmp	.+2      	; 0x97e <fwrite+0x5e>
 97c:	ce 01       	movw	r24, r28
 97e:	cd b7       	in	r28, 0x3d	; 61
 980:	de b7       	in	r29, 0x3e	; 62
 982:	ec e0       	ldi	r30, 0x0C	; 12
 984:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__epilogue_restores__+0xc>

00000988 <__prologue_saves__>:
 988:	2f 92       	push	r2
 98a:	3f 92       	push	r3
 98c:	4f 92       	push	r4
 98e:	5f 92       	push	r5
 990:	6f 92       	push	r6
 992:	7f 92       	push	r7
 994:	8f 92       	push	r8
 996:	9f 92       	push	r9
 998:	af 92       	push	r10
 99a:	bf 92       	push	r11
 99c:	cf 92       	push	r12
 99e:	df 92       	push	r13
 9a0:	ef 92       	push	r14
 9a2:	ff 92       	push	r15
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	ca 1b       	sub	r28, r26
 9b2:	db 0b       	sbc	r29, r27
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	f8 94       	cli
 9b8:	de bf       	out	0x3e, r29	; 62
 9ba:	0f be       	out	0x3f, r0	; 63
 9bc:	cd bf       	out	0x3d, r28	; 61
 9be:	09 94       	ijmp

000009c0 <__epilogue_restores__>:
 9c0:	2a 88       	ldd	r2, Y+18	; 0x12
 9c2:	39 88       	ldd	r3, Y+17	; 0x11
 9c4:	48 88       	ldd	r4, Y+16	; 0x10
 9c6:	5f 84       	ldd	r5, Y+15	; 0x0f
 9c8:	6e 84       	ldd	r6, Y+14	; 0x0e
 9ca:	7d 84       	ldd	r7, Y+13	; 0x0d
 9cc:	8c 84       	ldd	r8, Y+12	; 0x0c
 9ce:	9b 84       	ldd	r9, Y+11	; 0x0b
 9d0:	aa 84       	ldd	r10, Y+10	; 0x0a
 9d2:	b9 84       	ldd	r11, Y+9	; 0x09
 9d4:	c8 84       	ldd	r12, Y+8	; 0x08
 9d6:	df 80       	ldd	r13, Y+7	; 0x07
 9d8:	ee 80       	ldd	r14, Y+6	; 0x06
 9da:	fd 80       	ldd	r15, Y+5	; 0x05
 9dc:	0c 81       	ldd	r16, Y+4	; 0x04
 9de:	1b 81       	ldd	r17, Y+3	; 0x03
 9e0:	aa 81       	ldd	r26, Y+2	; 0x02
 9e2:	b9 81       	ldd	r27, Y+1	; 0x01
 9e4:	ce 0f       	add	r28, r30
 9e6:	d1 1d       	adc	r29, r1
 9e8:	0f b6       	in	r0, 0x3f	; 63
 9ea:	f8 94       	cli
 9ec:	de bf       	out	0x3e, r29	; 62
 9ee:	0f be       	out	0x3f, r0	; 63
 9f0:	cd bf       	out	0x3d, r28	; 61
 9f2:	ed 01       	movw	r28, r26
 9f4:	08 95       	ret

000009f6 <_exit>:
 9f6:	f8 94       	cli

000009f8 <__stop_program>:
 9f8:	ff cf       	rjmp	.-2      	; 0x9f8 <__stop_program>
